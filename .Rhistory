# format as amt track - add columns as needed
make_track(.x = easting, .y = northing, .t = time_local, id = id) %>%
steps(keep_cols = "start")
View(steps)
# Test subset, Nutmeg 1 month
dates <- seq(as.Date("2023-06-01"), as.Date("2023-07-01"), "days")
test <- filter(data_night, ID == "Nutmeg" & date_bird %in% dates)
test <- filter(data_night, id == "Nutmeg" & date_bird %in% dates)
# Calculate vector of the dynamic body acceleration (VEDBA)
test <- test %>%
mutate(vedba = ((sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2))/1000))
test
max.print(3)
options(max.print = 3)
test
options(max.print = 10)
test
options(max.print = 20)
test
# format as amt and calculate step lengths
steps <- test %>%
# format as amt track - add columns as needed
make_track(.x = easting, .y = northing, .t = time_local, id = id, date_bird = date_bird) %>%
steps(keep_cols = "start")
# format as amt and calculate step lengths
steps <- test %>%
# format as amt track - add columns as needed
make_track(.x = easting, .y = northing, .t = time_local, id = id, date_bird = date_bird)
steps
# check sample rate
summarize_sampling_rate(steps)
# format as amt and calculate step lengths
steps <- test %>%
# format as amt track - add columns as needed
make_track(.x = easting, .y = northing, .t = time_local, id = id, date_bird = date_bird)
# check sample rate
summarize_sampling_rate(steps)
# Test subset, Nutmeg 1 month
dates <- seq(as.Date("2023-06-01"), as.Date("2023-07-01"), "days")
test <- filter(data_night, id == "Nutmeg" & date_bird %in% dates)
# Calculate vector of the dynamic body acceleration (VEDBA)
test <- test %>%
mutate(vedba = ((sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2))/1000))
# format as amt and calculate step lengths
steps <- test %>%
# format as amt track - add columns as needed
make_track(.x = easting, .y = northing, .t = time_local, id = id, date_bird = date_bird)
# check sample rate
summarize_sampling_rate(steps)
# format as amt and calculate step lengths
steps <- test %>%
# format as amt track - add columns as needed
make_track(.x = easting, .y = northing, .t = time_local, id = id, date_bird = date_bird) %>%
steps()
# Test subset, Nutmeg 1 month
dates <- seq(as.Date("2023-06-01"), as.Date("2023-07-01"), "days")
test <- filter(data_night, id == "Nutmeg" & date_bird %in% dates)
# Calculate vector of the dynamic body acceleration (VEDBA)
test <- test %>%
mutate(vedba = ((sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2))/1000))
# format as amt and calculate step lengths
steps <- test %>%
# format as amt track - add columns as needed
make_track(.x = easting, .y = northing, .t = time_local, id = id, date_bird = date_bird) %>%
steps()
# check sample rate
summarize_sampling_rate(steps)
# format as amt and calculate step lengths
steps <- test %>%
# format as amt track - add columns as needed
make_track(.x = easting, .y = northing, .t = time_local, id = id, date_bird = date_bird) %>%
steps()
# check sample rate
summarize_sampling_rate(steps)
# read in cleaned night data
data_night <- read.csv("data/data_clean_night.csv") %>%
# drop columns notneeded
dplyr::select(!c(sunrise, sunset, suntime, tod)) %>%
# format date time in posixct
mutate(time_local = as.POSIXct(time_local),
date_bird = as_date(date_bird))
# prep data for moveHMM
data_hmm <- data_night %>%
prepData(type = "UTM", coordNames = c("easting", "northing"),
covNames = c("acceleration_raw_x", "acceleration_raw_y", "acceleration_raw_z", "altitude")) %>%
# add vector of the dynamic body acceleration (VEDBA)
mutate(vedba = ((sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2))/1000))
test <- filter(data_hmm, id == "Nutmeg" & date_bird %in% dates)
test
# format as amt and calculate step lengths
steps <- test %>%
# format as amt track - add columns as needed
make_track(.x = easting, .y = northing, .t = time_local, id = id, date_bird = date_bird)
# Packages
pacman::p_load(amt, atlastools, beepr, crawl, ggfortify, ggmap, ggnewscale, ggpubr, ggridges, janitor, lme4, lmerTest, move, momentuHMM, scattermore, sf, spThin, suncalc, survival, survminer, terra, tidyterra, tidyverse)
# read in cleaned night data
data_night <- read.csv("data/data_clean_night.csv") %>%
# drop columns notneeded
dplyr::select(!c(sunrise, sunset, suntime, tod)) %>%
# format date time in posixct
mutate(time_local = as.POSIXct(time_local),
date_bird = as_date(date_bird))
# prep data for moveHMM
data_hmm <- data_night %>%
prepData(type = "UTM", coordNames = c("easting", "northing"),
covNames = c("acceleration_raw_x", "acceleration_raw_y", "acceleration_raw_z", "altitude")) %>%
# add vector of the dynamic body acceleration (VEDBA)
mutate(vedba = ((sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2))/1000))
# Test subset, Nutmeg 1 month
dates <- seq(as.Date("2023-06-01"), as.Date("2023-07-01"), "days")
test <- filter(data_hmm, id == "Nutmeg" & date_bird %in% dates)
# format as amt and calculate step lengths
steps <- test %>%
# format as amt track - add columns as needed
make_track(.x = easting, .y = northing, .t = time_local, id = id, date_bird = date_bird)
View(data_hmm)
# format as amt and calculate step lengths
steps <- test %>%
# format as amt track - add columns as needed
make_track(.x = x, .y = y, .t = time_local, id = id, date_bird = date_bird)
View(steps)
# format as amt and calculate step lengths
steps <- test %>%
# format as amt track - add columns as needed
make_track(.x = x, .y = y, .t = time_local, id = id, date_bird = date_bird) %>%
steps()
View(steps)
View(test)
test <- filter(data_hmm, id == "Aurora" & date_bird %in% dates)
View(test)
# format as amt and calculate step lengths
steps <- test %>%
# format as amt track - add columns as needed
make_track(.x = x, .y = y, .t = time_local, id = id, date_bird = date_bird)
# check sample rate
summarize_sampling_rate(steps)
# Packages
pacman::p_load(amt, atlastools, beepr, crawl, ggfortify, ggmap, ggnewscale, ggpubr, ggridges, janitor, lme4, lmerTest, move, momentuHMM, scattermore, sf, spThin, suncalc, survival, survminer, terra, tidyterra, tidyverse)
# read in data with hmm states
data_hmm <- read.csv("data/data_hmm.csv")
View(data_hmm)
# calculate proportion of fixes in each state per bird
budget <- data_hmm %>%
group_by(ID, date_bird) %>%
summarise(state1 = count(states==2))
# calculate proportion of fixes in each state per bird
budget <- data_hmm %>%
group_by(ID, date_bird) %>%
count(states)
View(budget)
# calculate proportion of fixes in each state per bird per day
budget <- data_hmm %>%
group_by(ID, date_bird) %>%
# count of states
count(states) %>%
# pivot to wide format
pivot_wider(cols = 3:4, names_from = 3, values_from = 4)
# calculate proportion of fixes in each state per bird per day
budget <- data_hmm %>%
group_by(ID, date_bird) %>%
# count of states
count(states) %>%
# pivot to wide format
pivot_wider(names_from = 3, values_from = 4)
View(budget)
# calculate proportion of fixes in each state per bird per day
budget <- data_hmm %>%
group_by(ID, date_bird) %>%
# count of states
count(states) %>%
# pivot to wide format
pivot_wider(names_from = 3, values_from = 4) %>%
# replace NAs with zeros
replace(is.na(.), 0)
View(budget)
# calculate proportion of fixes in each state per bird per day
budget <- data_hmm %>%
group_by(ID, date_bird) %>%
# count of states
count(states) %>%
# pivot to wide format
pivot_wider(names_from = 3, values_from = 4) %>%
# replace NAs with zeros
replace(is.na(.), 0) %>%
# calculate proportion
mutate(total = sum(3:6))
View(budget)
# calculate proportion of fixes in each state per bird per day
budget <- data_hmm %>%
group_by(ID, date_bird) %>%
# count of states
count(states) %>%
# pivot to wide format
pivot_wider(names_from = 3, values_from = 4) %>%
# replace NAs with zeros
replace(is.na(.), 0) %>%
# calculate proportion
mutate(total = sum(c(1,2,3,4)))
View(budget)
# calculate proportion of fixes in each state per bird per day
budget <- data_hmm %>%
group_by(ID, date_bird) %>%
# count of states
count(states) %>%
# pivot to wide format
pivot_wider(names_from = 3, values_from = 4) %>%
# rename state columns
rename(state1 = 1,
state2 = 2,
state3 = 3,
state4 = 4)
# calculate proportion of fixes in each state per bird per day
budget <- data_hmm %>%
group_by(ID, date_bird) %>%
# count of states
count(states) %>%
# pivot to wide format
pivot_wider(names_from = 3, values_from = 4) %>%
# rename state columns
rename(state1 = 1,
state2 = 2,
state3 = 3,
state4 = 4) %>%
# replace NAs with zeros
replace(is.na(.), 0) %>%
# calculate proportion
mutate(total = sum(state1, state2, state3, state4))
# calculate proportion of fixes in each state per bird per day
budget <- data_hmm %>%
group_by(ID, date_bird) %>%
# count of states
count(states) %>%
# pivot to wide format
pivot_wider(names_from = 3, values_from = 4) %>%
# rename state columns
rename(state1 = 3,
state2 = 4,
state3 = 5,
state4 = 6) %>%
# replace NAs with zeros
replace(is.na(.), 0) %>%
# calculate proportion
mutate(total = sum(state1, state2, state3, state4))
View(budget)
# calculate proportion of fixes in each state per bird per day
budget <- data_hmm %>%
group_by(ID, date_bird) %>%
# count of states
count(states) %>%
# pivot to wide format
pivot_wider(names_from = 3, values_from = 4) %>%
# rename state columns
rename(state1 = 3,
state2 = 4,
state3 = 5,
state4 = 6) %>%
# replace NAs with zeros
replace(is.na(.), 0) %>%
# calculate proportion
mutate(total = sum(state1, state2, state3, state4),
state1p = state1/total)
View(budget)
# calculate proportion of fixes in each state per bird per day
budget <- data_hmm %>%
group_by(ID, date_bird) %>%
# count of states
count(states) %>%
# pivot to wide format
pivot_wider(names_from = 3, values_from = 4) %>%
# rename state columns
rename(state1 = 3,
state2 = 4,
state3 = 5,
state4 = 6) %>%
# replace NAs with zeros
replace(is.na(.), 0) %>%
# calculate proportion
mutate(total = sum(state1, state2, state3, state4),
state1p = state1/total,
state2p = state2/total,
state3p = state3/total,
state4p = state4/total)
View(budget)
# calculate proportion of fixes in each state per bird
budget <- data_hmm %>%
group_by(ID, date_bird) %>%
# count of states
count(states) %>%
# pivot to wide format
pivot_wider(names_from = 3, values_from = 4) %>%
# rename state columns
rename(state1 = 3,
state2 = 4,
state3 = 5,
state4 = 6) %>%
# replace NAs with zeros
replace(is.na(.), 0) %>%
# calculate proportion
mutate(total = sum(state1, state2, state3, state4),
state1p = state1/total,
state2p = state2/total,
state3p = state3/total,
state4p = state4/total) %>%
# calculate mean and sd
group_by(ID) %>%
summarise(s1m = mean(state1p),
s1sd = sd(state1p),
s2m = mean(state2p),
s2sd = sd(state2p),
s3m = mean(state3p),
s3sd = sd(state3p),
s4m = mean(state4p),
s4sd = sd(state4p))
View(budget)
# calculate proportion of fixes in each state per bird
budget <- data_hmm %>%
group_by(ID, date_bird) %>%
# count of states
count(states) %>%
# pivot to wide format
pivot_wider(names_from = 3, values_from = 4) %>%
# rename state columns
rename(state1 = 3,
state2 = 4,
state3 = 5,
state4 = 6) %>%
# replace NAs with zeros
replace(is.na(.), 0) %>%
# calculate proportion
mutate(total = sum(state1, state2, state3, state4),
state1p = state1/total,
state2p = state2/total,
state3p = state3/total,
state4p = state4/total) %>%
# calculate mean and sd
group_by(ID) %>%
summarise(s1m = mean(state1p),
s2m = mean(state2p),
s3m = mean(state3p),
s4m = mean(state4p),
s1sd = sd(state1p),
s2sd = sd(state2p),
s3sd = sd(state3p),
s4sd = sd(state4p))
View(budget)
# calculate proportion of fixes in each state per bird per day
budget_daily <- data_hmm %>%
group_by(ID, date_bird) %>%
# count of states
count(states) %>%
# pivot to wide format
pivot_wider(names_from = 3, values_from = 4) %>%
# rename state columns
rename(state1 = 3,
state2 = 4,
state3 = 5,
state4 = 6) %>%
# replace NAs with zeros
replace(is.na(.), 0) %>%
# calculate proportion
mutate(total = sum(state1, state2, state3, state4),
state1p = state1/total,
state2p = state2/total,
state3p = state3/total,
state4p = state4/total)
# summarise over time
budget <- budget_daily %>%
# calculate mean and sd
group_by(ID) %>%
summarise(s1m = mean(state1p),
s2m = mean(state2p),
s3m = mean(state3p),
s4m = mean(state4p),
s1sd = sd(state1p),
s2sd = sd(state2p),
s3sd = sd(state3p),
s4sd = sd(state4p))
View(budget_daily)
# plot state2 over time
ggplot(budget_daily)+
geom_path(aes(date_bird, state2p))
# plot state2 over time
ggplot(budget_daily)+
geom_path(aes(as.date(date_bird), state2p))
# plot state2 over time
ggplot(budget_daily)+
geom_path(aes(as_date(date_bird), state2p))
# calculate proportion of fixes in each state per bird per day
budget_daily <- data_hmm %>%
group_by(ID, date_bird) %>%
# count of states
count(states) %>%
# pivot to wide format
pivot_wider(names_from = 3, values_from = 4) %>%
# rename state columns
rename(state1 = 3,
state2 = 4,
state3 = 5,
state4 = 6) %>%
# replace NAs with zeros
replace(is.na(.), 0) %>%
# calculate proportion
mutate(total = sum(state1, state2, state3, state4),
state1p = state1/total,
state2p = state2/total,
state3p = state3/total,
state4p = state4/total) %>%
arrange(date_bird)
# plot state2 over time
ggplot(budget_daily)+
geom_path(aes(as_date(date_bird), state2p))
# plot state2 over time
ggplot(budget_daily)+
geom_path(aes(as_date(date_bird), state2p, colour = ID))
View(budget_daily)
geom_path(aes(as_date(date_bird), mean(state2p))
# plot state2 over time
ggplot(budget_daily)+
# plot state2 over time
ggplot(budget_daily)+
geom_path(aes(as_date(date_bird), mean(state2p)))
# plot state2 over time
ggplot(budget_daily)+
geom_path(aes(as_date(date_bird), mean(state2p)))
# Packages
pacman::p_load(amt, atlastools, beepr, crawl, ggfortify, ggmap, ggnewscale, ggpubr, ggridges, janitor, lme4, lmerTest, move, momentuHMM, scattermore, sf, spThin, suncalc, survival, survminer, terra, tidyterra, tidyverse)
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC")) %>%
# Add date
mutate(date = as_date(time_local, tz = "Australia/Melbourne"))%>%
filter(!id %in% c("Wobbles", "Star"))
# Packages
pacman::p_load(adehabitatHR, amt, atlastools, beepr, crawl, ggfortify, ggmap, ggnewscale, ggpubr, ggridges, janitor, lme4, lmerTest, move, momentuHMM, scattermore, sf, spThin, suncalc, survival, survminer, terra, tidyterra, tidyverse)
View(data)
# set up data in spatial points dataframe
locs <- SpatialPointsDataFrame(coordinates(
cbind(data$easting, data$northing)), data = data)
names(data)
# home range polygon per bird per day
birds <- as.character(unique(data$id))
days <- unique(locs[["date"]])
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points)<5){
next
}
kud <- kernelUD(points[,1], h="href", grid=1000, extent = 4) %>%
getverticeshr(percent = 50)
proj4string(kud) <- CRS("EPSG:32755")
kud_df_utm <- st_as_sf(kud)%>%
mutate(date = days[j])
print(head(kud_df_utm, n= 1L))
hr_daily <- rbind.data.frame(hr_daily, kud_df_utm)
}}
hr_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points)<5){
next
}
kud <- kernelUD(points[,1], h="href", grid=1000, extent = 4) %>%
getverticeshr(percent = 50)
proj4string(kud) <- CRS("EPSG:32755")
kud_df_utm <- st_as_sf(kud)%>%
mutate(date = days[j])
print(head(kud_df_utm, n= 1L))
hr_daily <- rbind.data.frame(hr_daily, kud_df_utm)
}}
# extract area per day i.e. drop geometry
hr_area <- st_drop_geometry(hr_daily_utm)
# extract area per day i.e. drop geometry
hr_area <- st_drop_geometry(hr_daily)
View(hr_area)
# save to file
write.csv(hr_area, "results/hr_daily_area.csv", row.names = TRUE)
# Packages
pacman::p_load(adehabitatHR, amt, atlastools, beepr, crawl, ggfortify, ggmap, ggnewscale, ggpubr, ggridges, janitor, lme4, lmerTest, move, momentuHMM, scattermore, sf, spThin, suncalc, survival, survminer, terra, tidyterra, tidyverse)
# Packages
pacman::p_load(adehabitatHR, amt, atlastools, beepr, crawl, ggfortify, ggmap, ggnewscale, ggpubr, ggridges, janitor, lme4, lmerTest, move, momentuHMM, scattermore, sf, spThin, STRAND, suncalc, survival, survminer, terra, tidyterra, tidyverse)
data(Baboon_Data)
load("C:/Users/shosh/Downloads/Baboon_Data.RData")
View(Baboon_Data)
Baboon_Data
Baboon_Data[["Grooming"]]
View(Baboon_Data)
# Packages
pacman::p_load(adehabitatHR, amt, atlastools, beepr, crawl, ggfortify, ggmap, ggnewscale, ggpubr, ggridges, janitor, lme4, lmerTest, move, momentuHMM, scattermore, sf, spThin, STRAND, suncalc, survival, survminer, terra, tidyterra, tidyverse, wildlifeDI)
# read in day data
data_day <- read.csv("data/data_clean_day.csv")
# read in night data
data_night <- read.csv("data/data_clean_night.csv")
# read in night data
data_night <- read.csv("data/data_clean_night.csv") %>%
# format time as posixct
mutate(time_local = as.POSIXct(time_local))
# summarise sampling rate to decide on temporal interaction threshold
steps <- data_night %>%
# format as amt track - add columns as needed
make_track(.x = easting, .y = northing, .t = time_local, id = id, date_bird = date_bird)
summarize_sampling_rate(steps)
summarize_sampling_rate_many(steps)
summarize_sampling_rate(steps)
View(steps)
