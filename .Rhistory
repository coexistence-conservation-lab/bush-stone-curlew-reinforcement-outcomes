# select only residents
filter(cohort == "Resident") %>%
# format dates as numeric
mutate(date = as_date(date)) %>%
# limit to reinforcement period
filter(date %in% dates) %>%
# add column for pre or post release
mutate(period = factor(ifelse(date %in% pre_dates,
"pre-reinforcement", "post-reinforcement"),
levels  = c("pre-reinforcement", "post-reinforcement"))) %>%
# exclude Nutmeg
filter(!id == "Nutmeg")
# create social group means
sum7 <- datam7 %>%
group_by(date) %>%
summarise(dist = mean(distance_previous),
upper = dist + 1.96 * std.error(distance_previous),
lower = dist - 1.96 * std.error(distance_previous)) %>%
arrange(date)
# plot daily distance over time as period means
ggplot(sum7, aes(date, dist, ymin = lower, ymax = upper)) +
geom_path() +
geom_ribbon(alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Distance between consecutive roosts (m)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()+
geom_vline(aes(xintercept = as_date("2023-06-07")), colour = "purple")
# read in data and filter to residents for reinforcement period
datam7 <- read.csv("results/daily_distance_between_roosts.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort"))) %>%
# select only residents
filter(cohort == "Resident") %>%
# format dates as numeric
mutate(date = as_date(date)) %>%
# limit to reinforcement period
filter(date %in% dates) %>%
# add column for pre or post release
mutate(period = factor(ifelse(date %in% pre_dates,
"pre-reinforcement", "post-reinforcement"),
levels  = c("pre-reinforcement", "post-reinforcement")))
# summary
summary(best7)
# plot predictions
ggplot(pred7, aes(date, predicted, ymin = lower, ymax = upper)) +
geom_line()+
geom_ribbon(alpha = 0.2)+
xlab(element_blank()) +
ylab("Predicted values of roost fidelity (m)") +
theme_minimal()+
facet_wrap(~period, scales = "free_x")
# read in data and filter to residents for reinforcement period
datam8 <- read.csv("results/daily_roost_distance_from_release.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort"))) %>%
# select only residents
filter(cohort == "Resident") %>%
# format dates as numeric
mutate(date = as_date(date)) %>%
# limit to reinforcement period
filter(date %in% dates) %>%
# add column for pre or post release
mutate(period = factor(ifelse(date %in% pre_dates,
"pre-reinforcement", "post-reinforcement"),
levels  = c("pre-reinforcement", "post-reinforcement")))
# create social group means
sum8 <- datam8 %>%
group_by(date) %>%
summarise(dist = mean(dist_release),
upper = dist + 1.96 * std.error(dist_release),
lower = dist - 1.96 * std.error(dist_release)) %>%
arrange(date)
# plot daily distance over time as period means
ggplot(sum8, aes(date, dist, ymin = lower, ymax = upper)) +
geom_path() +
geom_ribbon(alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Distance from release site (m)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()+
geom_vline(aes(xintercept = as_date("2023-06-07")), colour = "purple")
# distribution of movement data
hist(datam8$dist_release)
ggqqplot(datam8$dist_release)
# correct left skew - not perfect but okay
hist(log1p(datam8$dist_release))
ggqqplot(log1p(datam8$dist_release))
# test difference pre and post reinforcement
m8 <- glmmTMB(log1p(dist_release) ~ period * (scale(as.numeric(date)) + I(scale(as.numeric(date))^2)) + (1|id),
data = datam8,
na.action = "na.fail")
# model selection
dm8 <- dredge(m8)
View(dm8)
# parsimonious model where delta <2 and fewest predictors
# in this case only one model (top ranked) had delta AICc <2
best8 <- get.models(dm8, delta<2)[[1]]
# summary
summary(best8)
# Generate prediction data only within valid date ranges
release_date <- as_date("2023-06-07")
pred_data_pre <- expand.grid(
date = seq(min(datam8$date[datam8$period == "pre-reinforcement"]),
release_date - 1, by = 1),
period = "pre-reinforcement"
)
pred_data_post <- expand.grid(
date = seq(release_date, max(datam8$date[datam8$period == "post-reinforcement"]), by = 1),
period = "post-reinforcement"
)
# Combine and add necessary covariates (date2, id, etc.)
pred8 <- rbind(pred_data_pre, pred_data_post) %>%
mutate(id = NA)
# Predict values using the valid dataset
values8 <- predict(best8, newdata = pred8, type = "response", se.fit = TRUE) %>%
as.data.frame()
# Add predictions to dataframe - back transform the log values using exponential
pred8 <- pred8 %>%
mutate(
predicted = expm1(values8$fit),
lower = expm1(values8$fit - 1.96 * values8$se.fit),
upper = expm1(values8$fit + 1.96 * values8$se.fit)
) %>%
mutate(date = as_date(date))
# plot predictions
ggplot(pred8, aes(date, predicted, ymin = lower, ymax = upper)) +
geom_line()+
geom_ribbon(alpha = 0.2)+
xlab(element_blank()) +
ylab("Predicted values of release fidelity (m)") +
theme_minimal()+
facet_wrap(~period, scales = "free_x")
map_z15 <- get_map(c(144.4380, -37.9000), zoom=15, maptype = "satellite")
# Google and STadia API key for ggmaps
ggmap::register_google(key = readChar("apikey_google.txt", nchars = file.info("apikey_google.txt")$size))
map_z15 <- get_map(c(144.4380, -37.9000), zoom=15, maptype = "satellite")
ggmap(map_z15)+
# plot roosts colour by time
geom_point(aes(longitude, latitude, colour = date),
size = 2, data = datam8, inherit.aes = FALSE)+
# add release location
geom_point(aes(144.434323, -37.902374),
colour = "white", size = 5, shape = 13, inherit.aes = FALSE)+
# add fence
geom_spatvector(data = mtr, inherit.aes = FALSE, fill = NA, colour = "white",
linetype = "longdash")+
# wrap by period
facet_wrap(~period)+
# theme options
scale_colour_viridis_c(trans = "date", name = "2023")+
theme_void()+
scale_y_continuous(expand = expansion(mult = c(0, 0.01)))+
ggplot2::theme(legend.position="bottom",
legend.key.width = unit(4, 'cm'),
strip.text = element_text(size = 15))
# Define fence polygons (zones 1 and 2)
mtr <- rbind(
## zone 1
c(-37.897319, 144.429048), # S end of NW diagonal
c(-37.894066, 144.432334), # N end of NW diagonal, i.e. NW corner
c(-37.894749, 144.438305), # bend at main gate
c(-37.894693, 144.438324), # main gate
c(-37.894803, 144.439214), # bend before N Z1/2 gate
c(-37.894718, 144.439337), # N Z1/2 gate, i.e. NE corner
## zone 2
c(-37.892433, 144.440236), # N boundary internal aviary/Z2 i.e. NW corner
c(-37.892803, 144.443374), # Z2 northern boundary bend 1
c(-37.893634, 144.444076), # Z2 northern boundary bend 2
c(-37.894585, 144.447739), # N end of Z2/Z3 boundary, i.e. NE corner
c(-37.896515, 144.446789), # Z2/Z3 boundary bend 1
c(-37.896726, 144.446099), # Z2/Z3 boundary bend 2
c(-37.897964, 144.445706), # Z2/Z3 boundary bend 3
c(-37.899960, 144.444517), # S end of Z2/Z3 boundary, i.e. SE corner
# hashed lines are to remove the gap of the rock wallaby pen
#c(-37.899908, 144.444288), # Z2/btrw NE corner
#c(-37.898280, 144.440662), # Z1/btrw pen NW corner
## zone 1
#c(-37.900692, 144.440368), # Z1/btrw SW corner
#c(-37.902610, 144.443002), # Z1/btrw SE corner
c(-37.909538, 144.439648), # Z1 SE corner
c(-37.908999, 144.434965), # Z1 southern boundary bend 1
c(-37.907537, 144.433359), # Z1 southern boundary bend 2
c(-37.905958, 144.430140), # Z1 southern boundary bend 3
c(-37.905486, 144.429479), # Z1 southern boundary bend 4
c(-37.904649, 144.427566), # Z1 SW corner
c(-37.897319, 144.429048)  # S end of NW diagonal
) %>%  vect(type = "polygons", crs = "EPSG:4326") %>%
# transpose
t()
ggmap(map_z15)+
# plot roosts colour by time
geom_point(aes(longitude, latitude, colour = date),
size = 2, data = datam8, inherit.aes = FALSE)+
# add release location
geom_point(aes(144.434323, -37.902374),
colour = "white", size = 5, shape = 13, inherit.aes = FALSE)+
# add fence
geom_spatvector(data = mtr, inherit.aes = FALSE, fill = NA, colour = "white",
linetype = "longdash")+
# wrap by period
facet_wrap(~period)+
# theme options
scale_colour_viridis_c(trans = "date", name = "2023")+
theme_void()+
scale_y_continuous(expand = expansion(mult = c(0, 0.01)))+
ggplot2::theme(legend.position="bottom",
legend.key.width = unit(4, 'cm'),
strip.text = element_text(size = 15))
ggmap(map_z15)+
# plot roosts colour by time
geom_point(aes(longitude, latitude, colour = date),
size = 2, data = datam8, inherit.aes = FALSE)+
# add release location
geom_point(aes(144.434323, -37.902374),
colour = "white", size = 5, shape = 13, inherit.aes = FALSE)+
# add fence
geom_spatvector(data = mtr, inherit.aes = FALSE, fill = NA, colour = "white",
linetype = "longdash", inherit.aed = FALSE)+
# wrap by period
facet_wrap(~period)+
# theme options
scale_colour_viridis_c(trans = "date", name = "2023")+
theme_void()+
scale_y_continuous(expand = expansion(mult = c(0, 0.01)))+
ggplot2::theme(legend.position="bottom",
legend.key.width = unit(4, 'cm'),
strip.text = element_text(size = 15))
ggmap(map_z15)+
# plot roosts colour by time
geom_point(aes(longitude, latitude, colour = date),
size = 2, data = datam8, inherit.aes = FALSE)+
# add release location
geom_point(aes(144.434323, -37.902374),
colour = "white", size = 5, shape = 13, inherit.aes = FALSE)+
# add fence
geom_spatvector(data = mtr, inherit.aes = FALSE, fill = NA, colour = "white",
linetype = "longdash", inherit.aes = FALSE)+
# wrap by period
facet_wrap(~period)+
# theme options
scale_colour_viridis_c(trans = "date", name = "2023")+
theme_void()+
scale_y_continuous(expand = expansion(mult = c(0, 0.01)))+
ggplot2::theme(legend.position="bottom",
legend.key.width = unit(4, 'cm'),
strip.text = element_text(size = 15))
ggmap(map_z15)+
# plot roosts colour by time
geom_point(aes(longitude, latitude, colour = date),
size = 2, data = datam8, inherit.aes = FALSE)+
# add release location
geom_point(aes(144.434323, -37.902374),
colour = "white", size = 5, shape = 13, inherit.aes = FALSE)+
# add fence
geom_spatvector(data = mtr, inherit.aes = FALSE, fill = NA, colour = "white",
linetype = "longdash")+
# wrap by period
facet_wrap(~period)+
# theme options
scale_colour_viridis_c(trans = "date", name = "2023")+
theme_void()+
scale_y_continuous(expand = expansion(mult = c(0, 0.01)))+
ggplot2::theme(legend.position="bottom",
legend.key.width = unit(4, 'cm'),
strip.text = element_text(size = 15))
ggmap(map_z15)+
# plot roosts colour by time
geom_point(aes(longitude, latitude, colour = date),
size = 2, data = datam8, inherit.aes = FALSE)+
# add release location
geom_point(aes(144.434323, -37.902374),
colour = "white", size = 5, shape = 13, inherit.aes = FALSE)+
# add fence
geom_spatvector(data = mtr, fill = NA, colour = "white",
linetype = "longdash", inherit.aes = FALSE,)+
# wrap by period
facet_wrap(~period)+
# theme options
scale_colour_viridis_c(trans = "date", name = "2023")+
theme_void()+
scale_y_continuous(expand = expansion(mult = c(0, 0.01)))+
ggplot2::theme(legend.position="bottom",
legend.key.width = unit(4, 'cm'),
strip.text = element_text(size = 15))
ggmap(map_z15)+
# plot roosts colour by time
geom_point(aes(longitude, latitude, colour = date),
size = 2, data = datam8, inherit.aes = FALSE)+
# add release location
geom_point(aes(144.434323, -37.902374),
colour = "white", size = 5, shape = 13, inherit.aes = FALSE)+
# add fence
geom_spatvector(data = mtr, fill = NA, colour = "white",
linetype = "longdash", inherit.aes = FALSE)+
# wrap by period
facet_wrap(~period)+
# theme options
scale_colour_viridis_c(trans = "date", name = "2023")+
theme_void()+
scale_y_continuous(expand = expansion(mult = c(0, 0.01)))+
ggplot2::theme(legend.position="bottom",
legend.key.width = unit(4, 'cm'),
strip.text = element_text(size = 15))
ggmap(map_z15)+
# plot roosts colour by time
geom_point(aes(longitude, latitude, colour = date),
size = 2, data = datam8, inherit.aes = FALSE)+
# add release location
geom_point(aes(144.434323, -37.902374),
colour = "white", size = 5, shape = 13, inherit.aes = FALSE)+
# add fence
geom_sf(data = mtr, fill = NA, colour = "white",
linetype = "longdash", inherit.aes = FALSE)+
# wrap by period
facet_wrap(~period)+
# theme options
scale_colour_viridis_c(trans = "date", name = "2023")+
theme_void()+
scale_y_continuous(expand = expansion(mult = c(0, 0.01)))+
ggplot2::theme(legend.position="bottom",
legend.key.width = unit(4, 'cm'),
strip.text = element_text(size = 15))
View(datam8)
# read in data and filter to residents for reinforcement period
datam9 <- read.csv("results/daily_hr90_area.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort"))) %>%
# select only residents
filter(cohort == "Resident") %>%
# format dates as numeric
mutate(date = as_date(date)) %>%
# limit to reinforcement period
filter(date %in% dates) %>%
# add column for pre or post release
mutate(period = factor(ifelse(date %in% pre_dates,
"pre-reinforcement", "post-reinforcement"),
levels  = c("pre-reinforcement", "post-reinforcement")))
# read in data and filter to residents for reinforcement period
datam9 <- read.csv("results/daily_hr.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort"))) %>%
# select only residents
filter(cohort == "Resident") %>%
# format dates as numeric
mutate(date = as_date(date)) %>%
# limit to reinforcement period
filter(date %in% dates) %>%
# add column for pre or post release
mutate(period = factor(ifelse(date %in% pre_dates,
"pre-reinforcement", "post-reinforcement"),
levels  = c("pre-reinforcement", "post-reinforcement")))
View(datam9)
# create social group means
sum9 <- datam9 %>%
group_by(date) %>%
summarise(dist = mean(kud50),
upper = dist + 1.96 * std.error(kud50),
lower = dist - 1.96 * std.error(kud50)) %>%
arrange(date)
# plot daily distance over time as period means
ggplot(sum9, aes(date, dist, ymin = lower, ymax = upper)) +
geom_path() +
geom_ribbon(alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Home range (90% KUD) area (ha)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()+
geom_vline(aes(xintercept = as_date("2023-06-07")), colour = "purple")
# plot daily distance over time as period means
ggplot(sum9, aes(date, area, ymin = lower, ymax = upper)) +
geom_path() +
geom_ribbon(alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Home range (90% KUD) area (ha)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()+
geom_vline(aes(xintercept = as_date("2023-06-07")), colour = "purple")
# create social group means
sum9 <- datam9 %>%
group_by(date) %>%
summarise(area = mean(kud50),
upper = area + 1.96 * std.error(kud50),
lower = area - 1.96 * std.error(kud50)) %>%
arrange(date)
# plot daily distance over time as period means
ggplot(sum9, aes(date, area, ymin = lower, ymax = upper)) +
geom_path() +
geom_ribbon(alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Home range (90% KUD) area (ha)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()+
geom_vline(aes(xintercept = as_date("2023-06-07")), colour = "purple")
# distribution of movement data
hist(datam9$area)
ggqqplot(datam9$area)
# distribution of movement data
hist(datam9$kud50)
ggqqplot(datam9$kud50)
# correct left skew
hist(log1p(datam9$kud50))
ggqqplot(log1p(datam9$kud50))
# test difference pre and post reinforcement
m9 <- glmmTMB(log1p(kud50) ~ period * (scale(as.numeric(date)) + I(scale(as.numeric(date))^2)) + (1|id),
data = datam9,
na.action = "na.fail")
# model selection# moarea()del selection
dm9 <- dredge(m9)
View(dm9)
# parsimonious model where delta <2 and fewest predictors
# in this case two models had delta AICc <2 but the top ranked had fewer terms
best9 <- get.models(dm9, delta<2)[[1]]
# summary
summary(best9)
# Generate prediction data only within valid date ranges
release_date <- as_date("2023-06-07")
pred_data_pre <- expand.grid(
date = seq(min(datam9$date[datam9$period == "pre-reinforcement"]),
release_date - 1, by = 1),
period = "pre-reinforcement"
)
pred_data_post <- expand.grid(
date = seq(release_date, max(datam9$date[datam9$period == "post-reinforcement"]), by = 1),
period = "post-reinforcement"
)
# Combine and add necessary covariates (date2, id, etc.)
pred9 <- rbind(pred_data_pre, pred_data_post) %>%
mutate(id = NA)
# Predict values using the valid dataset
values9 <- predict(best9, newdata = pred9, type = "response", se.fit = TRUE) %>%
as.data.frame()
# Add predictions to dataframe - back transform the log values using exponential
pred9 <- pred9 %>%
mutate(
predicted = expm1(values9$fit),
lower = expm1(values9$fit - 1.96 * values9$se.fit),
upper = expm1(values9$fit + 1.96 * values9$se.fit)
) %>%
mutate(date = as_date(date))
# plot predictions
ggplot(pred9, aes(date, predicted, ymin = lower, ymax = upper)) +
geom_line()+
geom_ribbon(alpha = 0.2)+
xlab(element_blank()) +
ylab("Predicted values of home range size (ha)") +
theme_minimal()+
facet_wrap(~period, scales = "free_x")
# set default theme options for all plots
labels <- c(`pre-reinforcement` = "Pre reinforcement",
`post-reinforcement` = "Post reinforcement")
theme <- function(){
list(
geom_line(),
geom_ribbon(alpha = 0.2),
xlab(element_blank()),
theme_bw(),
facet_wrap(~period, scales = "free_x",
labeller = as_labeller(labels)),
scale_x_date(date_breaks = "1 month", date_labels =  "%b"),
ggplot2::theme(axis.title.y = element_text(hjust = 0.5, size = 10),
axis.title.x = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
)
}
# list of plots
g6 <- ggplot(pred6, aes(date, predicted, ymin = lower, ymax = upper)) +
ylab("Daily distance moved (m)")+
theme()
g7 <- ggplot(pred7, aes(date, predicted, ymin = lower, ymax = upper)) +
ylab("Roost displacement (m)")+
theme()
g8 <- ggplot(pred8, aes(date, predicted, ymin = lower, ymax = upper)) +
ylab("Distance from release (m)")+
theme()
g9 <- ggplot(pred9, aes(date, predicted, ymin = lower, ymax = upper)) +
ylab("Home range area (ha)")+
theme()
# multi plot 3x2
combined_plot <- (g6 + g7)  / (g8 + g9) +
plot_annotation(tag_levels = 'A')
combined_plot
# save
ggsave("plots/resident_outcomes.png", dpi = 400, bg = 'white',
width = 20, height = 16, units = "cm")
# best models
tab_model(best6, best7, best8, best9, show.est = TRUE, show.se = TRUE, show.ci = FALSE,
file = "results/m6-9_effects.xls")
# model selection table
ms2 <- mutate(as.data.frame(dm6), model = "distance daily") %>%
rbind(mutate(as.data.frame(dm7), model = "roost displacement")) %>%
rbind(mutate(as.data.frame(dm8), model = "release fidelity")) %>%
rbind(mutate(as.data.frame(dm9), model = "home range"))
write.csv(ms2, "results/m6-9_modelselection.csv", row.names = FALSE)
# summary
summary(best6)
# summary
summary(best7)
# means
emmeans(best7, period)
# means
emmeans(best7, pairwise ~ period)
# summary
summary(best8)
# summary
summary(best9)
