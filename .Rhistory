scale_colour_viridis_d()
?as.factor
?as_factor
# read in data and clean up
datam11 <- read_xlsx("data/healthchecks.xlsx") %>%
clean_names() %>%
rename(id = identity) %>%
select(id, date, weight) %>%
mutate(date = as_date(date)) %>%
# add metadata
left_join(select(metadata, c(id, start_date, cohort))) %>%
drop_na() %>%
# calculate elapsed time and add status
mutate(elapsed = as.numeric(date - start_date)) %>%
# keep only reinforcers
filter(cohort == "Reinforcing") %>%
# add social group membership %>%
mutate(social = ifelse(id %in% club, "exclusive", ifelse(cohort == "Resident", "mixed-resident", "mixed-reinforcer"))) %>%
# keep only the latest pre-release values and assign to pre/post release
group_by(id) %>%
filter(elapsed > 0 | elapsed == max(elapsed[elapsed <= 0])) %>%
ungroup() %>%
mutate(status = as_factor(ifelse(elapsed > 0, "post-release", "pre-release"))) %>%
arrange(id) %>%
# filter to study period
filter(elapsed <70)
# plot weight pre and post release by elapsed time
ggplot(datam11)+
geom_path(aes(status, weight, colour = id, group = id))+
theme_minimal()+
scale_colour_viridis_d()
# plot weight pre and post release by social group
ggplot(datam11)+
geom_path(aes(status, weight, colour = social, group = social))+
theme_minimal()+
scale_colour_viridis_d()
# plot weight pre and post release by social group
ggplot(datam11)+
geom_smooth(aes(status, weight, colour = social, group = social), method = "lm")+
theme_minimal()+
scale_colour_viridis_d()
# plot weight pre and post release by social group
ggplot(datam11)+
geom_smooth(aes(status, weight, colour = social, group = social), method = "lm")+
theme_minimal()
# plot weight pre and post release by individual
ggplot(datam11)+
geom_path(aes(status, weight, colour = id, group = id))+
theme_minimal()+
scale_colour_viridis_d()+
facet_wrap(~social)
# plot weight pre and post release by social group as a linear model
ggplot(datam11)+
geom_smooth(aes(status, weight, colour = social, group = social), method = "lm")+
theme_minimal()
View(datam11)
# calculate weight change as a proportion of starting weight
sum11 <- datam11 %>%
pivot_wider(names_from = status, values_from = weight)
View(sum11)
# calculate weight change in grams and as a proportion of starting weight
sum11 <- datam11 %>%
select(c(id, social, weight, status)) %>%
pivot_wider(names_from = status, values_from = weight)
View(sum11)
# calculate weight change in grams and as a proportion of starting weight
sum11 <- datam11 %>%
select(c(id, social, weight, status)) %>%
pivot_wider(names_from = status, values_from = weight) %>%
drop_na()
View(sum11)
# calculate weight change in grams and as a proportion of starting weight
sum11 <- datam11 %>%
select(c(id, social, weight, status)) %>%
pivot_wider(names_from = status, values_from = weight) %>%
clean_names() %>%
drop_na() %>%
# add change columns
mutate(diff = pre_release - post_release)
View(sum11)
# calculate weight change in grams and as a proportion of starting weight
sum11 <- datam11 %>%
select(c(id, social, weight, status)) %>%
pivot_wider(names_from = status, values_from = weight) %>%
clean_names() %>%
drop_na() %>%
# add change columns
mutate(diff = post_release - pre_release)
View(sum11)
# calculate weight change in grams and as a proportion of starting weight
sum11 <- datam11 %>%
select(c(id, social, weight, status)) %>%
pivot_wider(names_from = status, values_from = weight) %>%
clean_names() %>%
drop_na() %>%
# add change columns
mutate(diff = pre_release - post_release,
proportion = diff/pre-release)
# calculate weight change in grams and as a proportion of starting weight
sum11 <- datam11 %>%
select(c(id, social, weight, status)) %>%
pivot_wider(names_from = status, values_from = weight) %>%
clean_names() %>%
drop_na() %>%
# add change columns
mutate(diff = pre_release - post_release,
proportion = diff/pre_release)
View(sum11)
# plot weight differences by social group
ggplot(sum11)+
geom_boxplot(aes(social, diff))
# plot weight differences by social group
ggplot(sum11)+
geom_boxplot(aes(social, diff))+
theme_minimal()
# plot weight differences by social group
ggplot(sum11)+
geom_boxplot(aes(social, diff))+
geom_boxplot(aes(social, proportion))+
theme_minimal()
# plot proportional weight differences by social group
ggplot(sum11)+
geom_boxplot(aes(social, proportion))+
theme_minimal()
# check distribution of the difference
hist(sum11$diff)
ggqqplot(sum11$diff)
# plot weight pre and post-release
ggplot(datam11)+
geom_boxplot(aes(status, weight))
# plot weight pre and post-release
ggplot(datam11)+
geom_boxplot(aes(status, weight))+
theme_minimal()
# plot weight pre and post release by individual, facet wrap social
ggplot(datam11)+
geom_path(aes(status, weight, colour = id, group = id))+
theme_minimal()+
scale_colour_viridis_d()+
facet_wrap(~social)
# plot weight pre and post release by social group as a linear model
ggplot(datam11)+
geom_smooth(aes(status, weight, colour = social, group = social), method = "lm")+
theme_minimal()
# calculate weight change in grams and as a proportion of starting weight
sum11 <- datam11 %>%
select(c(id, social, weight, status)) %>%
pivot_wider(names_from = status, values_from = weight) %>%
clean_names() %>%
drop_na() %>%
# add change columns
mutate(diff = pre_release - post_release,
proportion = diff/pre_release)
# plot total weight differences by social group
ggplot(sum11)+
geom_boxplot(aes(social, diff))+
theme_minimal()
# plot proportional weight differences by social group
ggplot(sum11)+
geom_boxplot(aes(social, proportion))+
theme_minimal()
# test whether weight change differs between the social groups
m11 <- lmer(weight ~ social * status + (1|id), data = datam11)
summary(m11)
# test whether weight change differs between the social groups
m11 <- lmer(diff ~ social + (1|id), data = summ11)
# test whether weight change differs between the social groups
m11 <- lmer(diff ~ social + (1|id), data = sum11)
# test whether weight change differs between the social groups
m11 <- lmer(diff ~ social, data = sum11)
# test whether weight change differs between the social groups
m11 <- lmer(diff ~ social + (1), data = sum11)
# test whether weight change differs between the social groups
m11 <- lm(diff ~ social, data = sum11)
summary(m11)
# test whether weight change differs between the social groups
m11 <- lm(proportion ~ social, data = sum11)
summary(m11)
# test whether weight change differs between the social groups
m11 <- lm(diff ~ social, data = sum11)
summary(m11)
# summary stats
summary(sum11$diff)
# summary stats
sums <- sum11 %>%
group_by(social) %>%
summarise(mean = mean(diff, na.rm = TRUE),
se = sd(diff, na.rm = TRUE) / sqrt(n()))
# summary stats
sums <- sum11 %>%
group_by(social) %>%
summarise(mean_diff = mean(diff),
se_diff = sd(diff, na.rm = TRUE) / sqrt(n()),
mean_prop = mean(proportion),
se_prop = sd(proportion, na.rm = TRUE) / sqrt(n()))
View(sums)
# read in data and filter to establishment period
datam2 <- read.csv("results/daily_distance_between_roosts.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort", "start_date"))) %>%
# format dates as dates
mutate(date = as_date(date),
start_date = as_date(start_date)) %>%
# calculate time since release
mutate(elapsed = as.numeric(date - start_date)) %>%
# limit to first 55 days
filter(elapsed <56)
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity,
mortality = mortality_or_capture) %>%
mutate(start_date = as_date(dmy(start_date)),
end_date = as_date(dmy(end_date)),
mortality = as_date(dmy(mortality)))
# test whether establishment differs between the groups
m2 <- lmer(log(distance_previous) ~ cohort * elapsed + (1|id), data = datam2)
summary(m2)
# read in data and filter to establishment period
datam2 <- read.csv("results/daily_distance_between_roosts.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort", "start_date"))) %>%
# format dates as dates
mutate(date = as_date(date),
start_date = as_date(start_date)) %>%
# calculate time since release
mutate(elapsed = as.numeric(date - start_date)) %>%
# limit to first 55 days
filter(elapsed <56)
# test whether establishment differs between the groups
m2 <- lmer(log(distance_previous) ~ cohort * elapsed + (1|id), data = datam2)
summary(m2)
# read in data and filter to establishment period
datam2 <- read.csv("results/daily_distance_between_roosts.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort", "start_date"))) %>%
# format dates as dates
mutate(date = as_date(date),
start_date = as_date(start_date)) %>%
# calculate time since release
mutate(elapsed = as.numeric(date - start_date)) %>%
# limit to first 55 days
filter(elapsed <56) %>%
# re-level so residents are the reference group for stats
mutate(cohort = relevel(factor(cohort), ref = "Resident"))
# test whether establishment differs between the groups
m2 <- lmer(log(distance_previous) ~ cohort * elapsed + (1|id), data = datam2)
summary(m2)
# plot daily roost distance over time as linear model
ggplot(datam2)+
geom_smooth(aes(elapsed, distance_previous, color = cohort), method = "lm")+
theme_minimal()+
xlab("Days post-release")+
ylab("Daily distance between roosts (m)")+
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
# read in data and filter to establishment period
datam3 <- read.csv("results/daily_roost_distance_from_release.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort", "start_date"))) %>%
# format dates as dates
mutate(date = as_date(date),
start_date = as_date(start_date)) %>%
# calculate time since release
mutate(elapsed = as.numeric(date - start_date)) %>%
# limit to first 55 days
filter(elapsed <56) %>%
# re-level so residents are the reference group for stats
mutate(cohort = relevel(factor(cohort), ref = "Resident"))
# plot release site distance over time as linear model
ggplot(datam3)+
geom_smooth(aes(elapsed, dist_release, color = cohort), method = "lm")+
theme_minimal()+
xlab("Days post-release")+
ylab("Distance from release site (m)")+
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
# test whether establishment differs between the groups
m3 <- lmer(sqrt(dist_release) ~ cohort * elapsed + (1|id), data = datam3)
summary(m3)
g1 <- ggplot(datam1)+
geom_smooth(aes(elapsed, daily_dist, color = cohort), method = "lm")+
theme_minimal()+
xlab("Days post-release")+
ylab("Daily distance moved (m)")
# read in data and filter to establishment period
datam1 <- read.csv("results/daily_distance_moved.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort", "start_date"))) %>%
# format dates as dates
mutate(date_bird = as_date(date_bird),
start_date = as_date(start_date)) %>%
# calculate time since release
mutate(elapsed = as.numeric(date_bird - start_date)) %>%
# limit to first 55 days
filter(elapsed <56) %>%
# re-level so residents are the reference group for stats
mutate(cohort = relevel(factor(cohort), ref = "Resident"))
g1 <- ggplot(datam1)+
geom_smooth(aes(elapsed, daily_dist, color = cohort), method = "lm")+
theme_minimal()+
xlab("Days post-release")+
ylab("Daily distance moved (m)")
g2 <- ggplot(datam2)+
geom_smooth(aes(elapsed, distance_previous, color = cohort), method = "lm")+
theme_minimal()+
xlab("Days post-release")+
ylab("Daily distance between roosts (m)")+
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
g3 <- ggplot(datam3)+
geom_smooth(aes(elapsed, dist_release, color = cohort), method = "lm")+
theme_minimal()+
xlab("Days post-release")+
ylab("Distance from release site (m)")+
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
# read in data and filter to establishment period
datam4 <- read.csv("results/daily_hr_area.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort", "start_date"))) %>%
# format dates as dates
mutate(date = as_date(date),
start_date = as_date(start_date)) %>%
# calculate time since release
mutate(elapsed = as.numeric(date - start_date)) %>%
# limit to first 55 days
filter(elapsed <56) %>%
# re-level so residents are the reference group for stats
mutate(cohort = relevel(factor(cohort), ref = "Resident"))
# plot home range size over time as linear model
ggplot(datam4)+
geom_smooth(aes(elapsed, area, color = cohort), method = "lm")+
theme_minimal()+
xlab("Days post-release")+
ylab("Home range (50% KUD) area (hectares)")+
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
# test whether establishment differs between the groups
m4 <- lmer(log(area) ~ cohort * elapsed + (1|id), data = datam4)
summary(m4)
# check residuals
hist(residuals(m4))
ggqqplot(residuals(m4))
# read in data and filter to establishment period
datam5 <- read.csv("results/daily_time_budget.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort", "start_date"))) %>%
# format dates as dates
mutate(date = as_date(date_bird),
start_date = as_date(start_date)) %>%
# calculate time since release
mutate(elapsed = as.numeric(date - start_date)) %>%
# limit to first 55 days
filter(elapsed <56) %>%
# re-level so residents are the reference group for stats
mutate(cohort = relevel(factor(cohort), ref = "Resident"))
# plot state 2 allocation over time as linear model
ggplot(datam5)+
geom_smooth(aes(elapsed, state2p, color = cohort), method = "lm")+
theme_minimal()+
xlab("Days post-release")+
ylab("Allocation of time to foraging effort")+
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
# add a small constant to the handful of 0s and 1s
datam5 <- datam5 %>%
mutate(state2AD = (datam5$state2p + 0.001) / 1.002)
# test whether state 2 allocation differs between the groups
m5 <- glmmTMB(state2AD ~ cohort * elapsed, data = datam5,
family = beta_family(link = "logit"))
summary(m5)
# check residuals
hist(residuals(m4))
ggqqplot(residuals(m4))
View(datam5)
m5 <- glmmTMB(state2AD ~ cohort * elapsed, data = datam5,
family = "beta")
m5 <- glmmTMB(state2AD ~ cohort * elapsed, data = datam5,
family = beta_family())
summary(m5)
# test whether state 2 allocation differs between the groups
m5 <- glmmTMB(state2AD ~ cohort * elapsed + (1 | id), data = datam5,
family = beta_family(link = "logit"))
summary(m5)
# Generate predictions over a range of elapsed values for both cohorts
elapsed_vals <- seq(0, 1, length.out = 100)
cohorts <- c("Resident", "Reinforcing")
# Create a new data frame for prediction
new_data <- expand.grid(elapsed = elapsed_vals, cohort = cohorts)
# Predict probabilities
predictions <- predict(model2, newdata = new_data, type = "response")
# Predict probabilities
predictions <- predict(m4, newdata = new_data, type = "response")
# Create a new data frame for prediction
new_data <- expand.grid(elapsed = elapsed_vals, cohort = cohorts) %>%
as.matrix()
# Predict probabilities
predictions <- predict(m4, newdata = new_data, type = "response")
View(new_data)
# Plotting the predictions to check the trajectories
ggplot(data = data.frame(elapsed = rep(elapsed_vals, 2),
cohort = rep(cohorts, each = 100),
prob = predictions), aes(x = elapsed, y = prob, color = cohort)) +
geom_line() +
labs(x = "Elapsed Time", y = "Predicted Probability of state2AD") +
theme_minimal()
# Predict probabilities
predictions <- predict(m4, type = "response")
predictions
# Plotting the predictions to check the trajectories
ggplot(data = data.frame(elapsed = rep(elapsed_vals, 2),
cohort = rep(cohorts, each = 100),
prob = predictions), aes(x = elapsed, y = prob, color = cohort)) +
geom_line() +
labs(x = "Elapsed Time", y = "Predicted Probability of state2AD") +
theme_minimal()
1810/2
# Plotting the predictions to check the trajectories
ggplot(data = data.frame(elapsed = rep(elapsed_vals, 2),
cohort = rep(cohorts, each = 905),
prob = predictions), aes(x = elapsed, y = prob, color = cohort)) +
geom_line() +
labs(x = "Elapsed Time", y = "Predicted Probability of state2AD") +
theme_minimal()
effect_plot(m4, pred = elapsed_
effect_plot(m4, pred = elapsed)
effect_plot(m4, pred = elapsed)
# Packages
pacman::p_load(adehabitatHR, amt, asnipe, atlastools, beepr, emmeans, ggfortify, ggmap, ggnewscale, ggpubr, ggridges, glmmTMB, gtools, igraph, janitor, jtools, lme4, lmerTest, move2, momentuHMM, readxl, scattermore, sf, sp, STRAND, suncalc, survival, survminer, terra, tidyterra, tidyverse, wildlifeDI)
effect_plot(m5, pred = elapsed)
# check residuals
hist(residuals(m5))
ggqqplot(residuals(m5))
?effect_plot
effect_plot(m5, pred = elapsed, plot.points = TRUE)
effect_plot(m5, pred = elapsed, partial.residuals = TRUE)
effect_plot(m5, pred = elapsed, partial.residuals = TRUE, modx = cohort)
effect_plot(m5, pred = elapsed, modx = cohort)
effect_plot(m5, pred = elapsed, modx = cohort,  interval = TRUE,)
effect_plot(m5, pred = elapsed, modx = "cohort",  interval = TRUE,)
effect_plot(m5, pred = elapsed, modx = "cohort")
effect_plot(m5, pred = elapsed, modx = "cohort",  interval = TRUE, plot.points = TRUE)
effect_plot(m5, pred = cohort, modx = "cohort",  interval = TRUE, plot.points = TRUE)
effect_plot(m5, pred = cohort, modx = "cohort",  interval = TRUE)
# model predictions
p5 <- predict(m5)
# model predictions
p5 <- predict(m5, datam5$state2AD)
# plot
plot(p5, datam5$state2AD)
# plot
plot(p5, datam5$state2AD); abline(a = 0, b = 1)
# diagnostics - plot predicted vs real
plot(predict(m1), datam1$daily_dist); abline(a = 0, b = 1)
# test whether establishment differs between the groups
m1 <- lmer(sqrt(daily_dist) ~ cohort * elapsed + (1|id), data = datam1)
# diagnostics - plot predicted vs real
plot(predict(m1), datam1$daily_dist); abline(a = 0, b = 1)
# diagnostics - plot predicted vs real
plot(predict(m1), datam1$daily_dist); abline(a = 0, b = 1)
# diagnostics - plot predicted vs real
plot(predict(m1), sqrt(datam1$daily_dist)); abline(a = 0, b = 1)
ggqqplot(residuals(m1))
# effects plot
effect_plot(m1, plot.points = TRUE, interval = TRUE)
?effect_plot
# effects plot
effect_plot(m1, daily_dist, plot.points = TRUE, interval = TRUE)
# effects plot
effect_plot(m1, elapsed, plot.points = TRUE, interval = TRUE)
# effects plot
effect_plot(m1, daily_dist, plot.points = TRUE, interval = TRUE)
# effects plot
effect_plot(m1, elapsed, plot.points = TRUE, interval = TRUE)
# effects plot
effect_plot(m1, elapsed, plot.points = TRUE, interval = TRUE, facet.by = cohort)
## diagnostics
# check residuals
hist(residuals(m2))
ggqqplot(residuals(m2))
# diagnostics - plot predicted vs real
plot(predict(m2), log(datam2$distance_previous)); abline(a = 0, b = 1)
# effects plot with points
effect_plot(m2, elapsed, plot.points = TRUE, interval = TRUE, facet.by = cohort)
# effects plot
effect_plot(m2, elapsed, partial.residuals = TRUE, interval = TRUE, facet.by = cohort)
# effects plot
effect_plot(m2, elapsed, partial.residuals = TRUE, interval = TRUE, facet.by = cohort)
# effects plot
effect_plot(m2, elapsed, partial.residuals = TRUE, interval = TRUE, facet.by = cohort, data = datam2)
# effects plot with points
effect_plot(m1, elapsed, partial.residuals = TRUE, interval = TRUE, facet.by = cohort, data = datam1)
# diagnostics - plot predicted vs real
plot(predict(m3), sqrt(datam3$dist_release)); abline(a = 0, b = 1)
# effects plot
effect_plot(m3, elapsed, partial.residuals = TRUE, interval = TRUE, facet.by = cohort, data = datam2)
## diagnostics
# check residuals
hist(residuals(m4))
ggqqplot(residuals(m4))
# diagnostics - plot predicted vs real
plot(predict(m4), log(datam4$area)); abline(a = 0, b = 1)
# effects plot
effect_plot(m4, elapsed, partial.residuals = TRUE, interval = TRUE, facet.by = cohort, data = datam2)
# effects plot
effect_plot(m4, elapsed, partial.residuals = TRUE, interval = TRUE, facet.by = cohort, data = datam4)
# effects plot
effect_plot(m3, elapsed, partial.residuals = TRUE, interval = TRUE, facet.by = cohort, data = datam3)
# test whether establishment differs between the groups
m3 <- lmer(sqrt(dist_release) ~ cohort * elapsed + (1|id), data = datam3)
summary(m3)
# effects plot
effect_plot(m3, elapsed, partial.residuals = TRUE, interval = TRUE, facet.by = cohort, data = datam3)
# diagnostics - plot predicted vs real
plot(predict(m5), datam5$state2AD); abline(a = 0, b = 1)
# effects plot
effect_plot(m5, elapsed, partial.residuals = TRUE, interval = TRUE, facet.by = cohort, data = datam5)
