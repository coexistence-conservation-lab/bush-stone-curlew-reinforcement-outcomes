id = "id",
method = "aggregate")
View(steps)
# Packages
pacman::p_load(amt, atlastools, beepr, crawlWrap, ggfortify, ggmap, ggnewscale, ggpubr, ggridges, janitor, lme4, lmerTest, move, momentuHMM, scattermore, sf, spThin, suncalc, survival, survminer, terra, tidyterra, tidyverse)
# Packages
pacman::p_load(amt, atlastools, beepr, crawl, ggfortify, ggmap, ggnewscale, ggpubr, ggridges, janitor, lme4, lmerTest, move, momentuHMM, scattermore, sf, spThin, suncalc, survival, survminer, terra, tidyterra, tidyverse)
# use crawlWrap to fill in missing values
crawl <- crawlWrap(data_night, timeStep="minute",
theta=c(6.855, -0.007), fixPar=c(NA,NA))
?crawlWrap
# use crawlWrap to fill in missing values
crawl <- crawlWrap(data_night,
Time.name = "time_local",
timeStep="minute",
theta=c(6.855, -0.007),
fixPar=c(NA,NA))
# read in cleaned night data
data_night <- read.csv("data/data_clean_night.csv") %>%
# drop columns notneeded
dplyr::select(!c(sunrise, sunset, suntime, tod)) %>%
# format date time in posixct
mutate(time_local = as.POSIXct(time_local),
date_bird = as_date(date_bird)) %>%
# rename id column for momentuHMM
rename(ID = id,
x = easting,
y= northing)
# use crawlWrap to fill in missing values
crawl <- crawlWrap(data_night,
Time.name = "time_local",
timeStep="minute",
theta=c(6.855, -0.007),
fixPar=c(NA,NA))
# use crawlWrap to fill in missing values
crawl <- crawlWrap(data_night,
Time.name = "time_local",
timeStep = 60,
theta=c(6.855, -0.007),
fixPar=c(NA,NA))
# use crawlWrap to fill in missing values
crawl <- crawlWrap(data_night,
Time.name = "time_local",
timeStep = 60))
# use crawlWrap to fill in missing values
crawl <- crawlWrap(data_night,
Time.name = "time_local",
timeStep = 60)
View(crawl)
crawl[["crwPredict"]]
data_filled <- crawl[["crwPredict"]]
View(data_filled)
# prep data for momentuHMM
data_hmm <- data_night %>%
prepData(type = "UTM", coordNames = c("easting", "northing"),
covNames = c("acceleration_raw_x", "acceleration_raw_y", "acceleration_raw_z", "altitude"))
# read in cleaned night data
data_night <- read.csv("data/data_clean_night.csv") %>%
# drop columns notneeded
dplyr::select(!c(sunrise, sunset, suntime, tod)) %>%
# format date time in posixct
mutate(time_local = as.POSIXct(time_local),
date_bird = as_date(date_bird)) %>%
# rename id column for momentuHMM
rename(ID = id)
# prep data for momentuHMM
data_hmm <- data_night %>%
prepData(type = "UTM", coordNames = c("easting", "northing"),
covNames = c("acceleration_raw_x", "acceleration_raw_y", "acceleration_raw_z", "altitude"))
# Test subset, Nutmeg 1 month
dates <- seq(as.Date("2023-06-01"), as.Date("2023-07-01"), "days")
test <- filter(data_hmm, ID == "Nutmeg" & date_bird %in% dates)
# two state model
stepPar0 <- c(10, 100, 1, 5, 0, 0.1) # (mu_1, mu_2, zm, sd_1, sd_2, sd_zm)
anglePar0 <- c((pi/2), 0, 1, 1) # (mean_1, mean_2, concentration_1, concentration_2)
hmm2 <- momentuHMM::fitHMM(data = test, nbStates = 2,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar0, angle = anglePar0),
estAngleMean = list(angle=TRUE))
plot(hmm2)
hmm2
hist(test$step)
View(test)
summary(test$step)
# two state model parameters
mu0 <- c(20, 100) # step mean
sigma0 <- c(1, 5) # step SD
zeromass0 <- c(0.1, 0.1) # step zero mass
angleMean0 <- c(pi, 0) # angle mean
kappa0 <-c(1, 1) # angle concentration
stepPar0 <- c(mu0, sigma0, zeromass0)
anglePar0 <- c(angleMean0, kappa0)
# two state model
hmm2 <- momentuHMM::fitHMM(data = test, nbStates = 2,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar0, angle = anglePar0),
estAngleMean = list(angle=TRUE))
hmm2
plot(hmm2)
# two state model parameters
mu0 <- c(20, 100) # step mean
sigma0 <- c(1, 5) # step SD
zeromass0 <- c(0.01, 0.01) # step zero mass
angleMean0 <- c(pi, 0) # angle mean
kappa0 <-c(1, 1) # angle concentration
stepPar0 <- c(mu0, sigma0, zeromass0)
anglePar0 <- c(angleMean0, kappa0)
# two state model
hmm2 <- momentuHMM::fitHMM(data = test, nbStates = 2,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar0, angle = anglePar0),
estAngleMean = list(angle=TRUE))
hmm2
plot(hmm2)
# angle statistics
hist(test$angle, breaks = seq(-pi, pi, length = 15), xlab = "angle", main = "")
# step statistics
hist(test$step)
# step statistics
hist(test$step, xlab = "step", main = "")
summary(test$step)
summary(test$angle)
# two state model parameters
mu0 <- c(60, 200) # step mean
sigma0 <- c(10, 10) # step SD
zeromass0 <- c(0.01, 0.01) # step zero mass
angleMean0 <- c(pi, 0) # angle mean
kappa0 <-c(1, 10) # angle concentration
stepPar0 <- c(mu0, sigma0, zeromass0)
anglePar0 <- c(angleMean0, kappa0)
# two state model
hmm2 <- momentuHMM::fitHMM(data = test, nbStates = 2,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar0, angle = anglePar0),
estAngleMean = list(angle=TRUE))
hmm2
plot(hmm2)
View(hmm2)
hmm2[["data"]]
View(hmm_data)
# three state model parameters
mu0 <- c(10, 50, 200) # step mean
sigma0 <- c(1, 10, 10) # step SD
zeromass0 <- c(0.01, 0.01, 0.01) # step zero mass
angleMean0 <- c(pi, 0, 0) # angle mean
kappa0 <-c(1, 1, 1) # angle concentration
stepPar0 <- c(mu0, sigma0, zeromass0)
anglePar0 <- c(angleMean0, kappa0)
# create hmm
hmm3 <- momentuHMM::fitHMM(data = test, nbStates = 3,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar0, angle = anglePar0),
estAngleMean = list(angle=TRUE))
hmm3
plot(hmm3)
# step statistics
hist(test$step, xlab = "step", main = "", breaks = 30)
summary(test$step)
# angle statistics
hist(test$angle, breaks = seq(-pi, pi, length = 15), xlab = "angle", main = "")
summary(test$angle)
# 2 state model parameters
mu0 <- c(30, 300) # step mean
sigma0 <- c(20, 150) # step SD
stepPar0 <- c(mu0, sigma0)
angleMean0 <- c(0, 0) # angle mean
kappa0 <-c(5, 1) # angle concentration
stepPar0 <- c(mu0, sigma0)
anglePar0 <- c(angleMean0, kappa0)
# create hmm
hmm2 <- fitHMM(data = test, nbStates = 2,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar0, angle = anglePar0),
estAngleMean = list(angle=TRUE))
# 2 state model parameters
stepPar <- c(30, 200, 20, 150, 0.7, 0.05) # mean_s1, mean_s2, sd_s1, sd_s2, zm_s1, zm_s2
anglePar <- c(0, 0, 5, 1) # mean_s1, mean_s2, kappa_s1, kappa_s2
# create hmm
hmm2 <- fitHMM(data = test, nbStates = 2,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar0, angle = anglePar0),
estAngleMean = list(angle=TRUE))
# create hmm
hmm2 <- fitHMM(data = data_hmm,
nbStates = 2,
stepPar = stepPar,
anglePar = anglePar)
# create hmm
hmm2 <- fitHMM(data = test, nbStates = 2,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar, angle = anglePar),
estAngleMean = list(angle=TRUE))
hmm2
plot(hmm2)
?fithmm
?fitHMM
# 2 state model
hmm2 <- fitHMM(data = test,
nbStates = 2,
#dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar, angle = anglePar),
estAngleMean = list(angle=TRUE)
)
# 2 state model
hmm2 <- fitHMM(data = test,
nbStates = 2,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar, angle = anglePar),
)
# 2 state model
hmm2 <- fitHMM(data = test,
nbStates = 2,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar, angle = anglePar),
estAngleMean = list(angle=TRUE))
# 2 state model
hmm2 <- fitHMM(data = test,
nbStates = 2,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar, angle = anglePar),
estAngleMean = list(angle=TRUE),
formula = ~altitude)
hmm2
plot(hmm2)
anglePar <- c(0, 0, 0, 0.5, 2, 10) # mean1, mean2, mean3, kappa1, kappa2, kappa3
# Packages
pacman::p_load(amt, atlastools, beepr, crawl, ggfortify, ggmap, ggnewscale, ggpubr, ggridges, janitor, lme4, lmerTest, move, moveHMM, scattermore, sf, spThin, suncalc, survival, survminer, terra, tidyterra, tidyverse)
mod <- moveHMM::fitHMM(data = data_hmm,
nbStates = 3,
stepPar = stepPar,
anglePar = anglePar)
mod <- moveHMM::fitHMM(data = test,
nbStates = 3,
stepPar = stepPar,
anglePar = anglePar)
# 3 state model
hmm3 <- fitHMM(data = test,
nbStates = 3,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar, angle = anglePar),
estAngleMean = list(angle=TRUE),
formula = ~altitude)
# 3 state model
hmm3 <- momentuHMM::fitHMM(data = test,
nbStates = 3,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar, angle = anglePar),
estAngleMean = list(angle=TRUE),
formula = ~altitude)
# 3 state model parameters
stepPar <- c(10, 60, 200, 10, 50, 150, 0.9, 0.3, 0.05) # mean1, mean2, mean3, sd1, sd2, sd3, zm1, zm2, zm3
anglePar <- c(0, 0, 0, 0.5, 2, 10) # mean1, mean2, mean3, kappa1, kappa2, kappa3
# 3 state model
hmm3 <- momentuHMM::fitHMM(data = test,
nbStates = 3,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar, angle = anglePar),
estAngleMean = list(angle=TRUE),
formula = ~altitude)
hmm3
plot(hmm3)
# 3 state model
hmm3 <- momentuHMM::fitHMM(data = test,
nbStates = 3,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar, angle = anglePar),
estAngleMean = list(angle=TRUE)
)
# 3 state model
hmm3 <- momentuHMM::fitHMM(data = test,
nbStates = 3,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar, angle = anglePar),
estAngleMean = list(angle=TRUE),
formala = ~altitude
)
hmm3$convergence
# For reproducibility
set.seed(12345)
# Number of tries with different starting values
niter <- 25
# For reproducibility
set.seed(12345)
# Number of tries with different starting values
niter <- 25
# Save list of fitted models
allm <- list()
for(i in 1:niter) {
# Step length mean
stepMean0 <- runif(3, min = c(5, 50, 100), max = c(50, 150, 300))
# Step length standard deviation
stepSD0 <- runif(3, min = c(5, 30, 50), max = c(30, 100, 150))
# Zero mass
zeroMass0 <- runif(3, min = c(0.5, 0.05, 0.01), max = c(0.9, 0.3, 0.1))
# Turning angle mean
angleMean0 <- c(0, 0, 0)
# Turning angle concentration
angleCon0 <- runif(3, min = c(0.5, 3, 5), max = c(3, 10, 15))
# Fit model
stepPar0 <- c(stepMean0, stepSD0, zeroMass0)
anglePar0 <- c(angleMean0, angleCon0)
allm[[i]] <- tryCatch({
momentuHMM::fitHMM(
data = test,
nbStates = 3,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar0, angle = anglePar0),
estAngleMean = list(angle = TRUE)
)
}, error = function(e) NULL)
}
# Filter out failed models
successful_models <- allm[!sapply(allm, is.null)]
# Extract log-likelihoods
log_liks <- sapply(successful_models, function(x) x$mod$minimum)
# Select the best model
best_model <- successful_models[[which.max(log_liks)]]
# Summarize the best model
summary(best_model)
View(best_model)
# Select the best model
best <- successful_models[[which.max(log_liks)]]
# Summarize the best model
best
plot(best)
# Extract likelihoods of fitted models
allnllk <- unlist(lapply(allm, function(m) m$mod$minimum))
# Index of best fitting model (smallest negative log-likelihood)
whichbest <- which.min(allnllk)
# Best fitting model
mbest <- allm[[whichbest]]
mbest
plot(mbest)
View(test)
# add VEDBA
test <- test %>%
mutate(vedba = ((sqrt(acceleration_raw_x^2 + acceleration_raw_y^2 + acceleration_raw_x^2))/1000))
View(test)
# 3 state model
hmm3 <- momentuHMM::fitHMM(data = test,
nbStates = 3,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar, angle = anglePar),
estAngleMean = list(angle=TRUE),
formula = ~altitude + vedba
)
hmm3
plot(hmm3)
# For reproducibility
set.seed(12345)
# Number of tries with different starting values
niter <- 10
# Save list of fitted models
allm <- list()
for(i in 1:niter) {
# Step length mean
stepMean0 <- runif(3, min = c(5, 50, 100), max = c(50, 150, 300))
# Step length standard deviation
stepSD0 <- runif(3, min = c(5, 30, 50), max = c(30, 100, 150))
# Zero mass
zeroMass0 <- runif(3, min = c(0.5, 0.05, 0.01), max = c(0.9, 0.3, 0.1))
# Turning angle mean
angleMean0 <- c(0, 0, 0)
# Turning angle concentration
angleCon0 <- runif(3, min = c(0.5, 3, 5), max = c(3, 10, 15))
# Fit model
stepPar0 <- c(stepMean0, stepSD0, zeroMass0)
anglePar0 <- c(angleMean0, angleCon0)
allm[[i]] <- tryCatch({
momentuHMM::fitHMM(
data = test,
nbStates = 3,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar0, angle = anglePar0),
estAngleMean = list(angle = TRUE),
formula = ~vedba
)
}, error = function(e) NULL)
}
# Extract likelihoods of fitted models
allnllk <- unlist(lapply(allm, function(m) m$mod$minimum))
# Index of best fitting model (smallest negative log-likelihood)
whichbest <- which.min(allnllk)
# Best fitting model
mbest <- allm[[whichbest]]
mbest
plot(mbest)
# 3 state model parameters
stepPar <- c(
10, 60, 200,   # Means for States 1, 2, and 3 (Resting, Exploring, Traveling/Flying)
5, 20, 150,    # Standard deviations for States 1, 2, and 3
0.15, 0, 0.5   # Zero-mass values for Resting (0.15), Exploring/Foraging (0), Traveling/Flying (0.5)
)
anglePar <- c(
0, 0, 0,      # Means for all states (0 radians)
1.5, 7, 3     # Concentrations for States 1 (Resting), 2 (Exploring), and 4 (Traveling/Flying)
)
# 3 state model
hmm3 <- momentuHMM::fitHMM(data = test,
nbStates = 3,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar, angle = anglePar),
estAngleMean = list(angle=TRUE),
formula = ~vedba
)
hmm3
plot(hmm3)
# Step Parameters for 4 States
stepPar <- c(
10, 60, 200, 300,   # Means for States 1, 2, 3, and 4 (Resting, Exploring, Foraging, Traveling/Flying)
5, 20, 150, 200,    # Standard deviations for States 1, 2, 3, and 4
0.15, 0, 0.5, 0.25  # Zero-mass values for Resting (0.15), Exploring (0), Foraging (0), Traveling/Flying (0.25)
)
# Angle Parameters for 4 States
anglePar <- c(
0, 0, 0, 0.1,      # Means for all states (0 radians, slightly shifted for Traveling/Flying)
1.5, 7, 3, 5       # Concentrations for States 1 (Resting), 2 (Exploring), 3 (Foraging), 4 (Traveling/Flying)
)
# 4 state model
hmm4 <- momentuHMM::fitHMM(data = test,
nbStates = 4,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar, angle = anglePar),
estAngleMean = list(angle=TRUE),
formula = ~vedba
)
# 4 state model
hmm4 <- momentuHMM::fitHMM(data = test,
nbStates = 4,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar, angle = anglePar),
estAngleMean = list(angle=TRUE),
formula = ~vedba
)
# Step Parameters for 4 States
stepPar <- c(
10, 60, 150, 300,   # Means for States 1, 2, 3, and 4 (Resting, Exploring, Foraging, Traveling/Flying)
5, 15, 100, 150,    # Standard deviations for States 1, 2, 3, and 4 (smaller variance for states like Exploring)
0.1, 0, 0.3, 0.15   # Zero-mass values for Resting (0.1), Exploring (0), Foraging (0.3), Traveling/Flying (0.15)
)
# Angle Parameters for 4 States
anglePar <- c(
0, 0, 0, 0.05,      # Means for all states (0 radians, slightly shifted for Traveling/Flying)
1.5, 5, 2, 3        # Concentrations for States 1 (Resting), 2 (Exploring), 3 (Foraging), 4 (Traveling/Flying)
)
# 4 state model
hmm4 <- momentuHMM::fitHMM(data = test,
nbStates = 4,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar, angle = anglePar),
estAngleMean = list(angle=TRUE),
formula = ~vedba
)
hmm4
plot(hmm4)
# compare 3 and 4 state models
AIC(hmm3, hmm4)
BIC(hmm3, hmm4)
anova(hmm3, hmm4)
# Number of tries with different starting values
niter <- 10
# Save list of fitted models
allm <- list()
for(i in 1:niter) {
# Step length mean
stepMean0 <- runif(4, min = c(5, 50, 100, 200), max = c(50, 150, 300, 400))
# Step length standard deviation
stepSD0 <- runif(4, min = c(5, 30, 50, 100), max = c(30, 100, 150, 200))
# Zero mass
zeroMass0 <- runif(4, min = c(0.5, 0.05, 0.01, 0.2), max = c(0.9, 0.3, 0.1, 0.3))
# Turning angle mean
angleMean0 <- c(0, 0, 0, 0.1)
# Turning angle concentration
angleCon0 <- runif(4, min = c(0.5, 3, 5, 3), max = c(3, 10, 15, 10))
# Fit model
stepPar0 <- c(stepMean0, stepSD0, zeroMass0)
anglePar0 <- c(angleMean0, angleCon0)
allm[[i]] <- tryCatch({
momentuHMM::fitHMM(
data = test,
nbStates = 4,
dist = list(step = "gamma", angle = "vm"),
Par0 = list(step = stepPar0, angle = anglePar0),
estAngleMean = list(angle = TRUE),
formula = ~vedba
)
}, error = function(e) NULL)
}
# Extract likelihoods of fitted models
allnllk <- unlist(lapply(allm, function(m) m$mod$minimum))
# Index of best fitting model (smallest negative log-likelihood)
whichbest <- which.min(allnllk)
# Best fitting model
mbest <- allm[[whichbest]]
mbest
plot(mbest)
starting_parameters <- best_model$Par0
mmodel$Par0
mbest$Par0
mbest$conditions
mbest$stateNames
mbest$prior
View(mbest)
mbest[["CIreal"]][["step"]]
mbest[["CIbeta"]][["angle"]]
mbest[["mle"]][["step"]]
mbest[["mle"]][["step"]]
mbest[["mle"]][["angle"]]
View(hmm4)
hmm4[["CIreal"]]
hmm4[["mle"]][["step"]]
hmm4[["mle"]][["angle"]]
