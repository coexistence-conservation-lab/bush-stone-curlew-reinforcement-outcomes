# plot distance moved by cohort during establishment
ggplot(distance_daily2)+
geom_smooth(aes(elapsed, daily_dist, colour = id))+
facet_wrap(~cohort)
# plot distance moved by cohort during establishment
ggplot(distance_daily2)+
geom_path(aes(elapsed, daily_dist, colour = id))+
facet_wrap(~cohort)
# plot distance moved by cohort during establishment
ggplot(distance_daily2)+
geom_path(aes(elapsed, daily_dist, colour = id))+
facet_wrap(~id)
# plot distance moved by cohort during establishment
ggplot(distance_daily2)+
geom_smooth(aes(elapsed, daily_dist, colour = cohort))
# calculate cohort means
summary2 <- distance_daily2 %>%
group_by(cohort) %>%
summarise(mean_daily_dist = average(daily_dist))
# calculate cohort means
summary2 <- distance_daily2 %>%
group_by(cohort) %>%
summarise(mean_daily_dist = mean(daily_dist))
View(summary2)
# calculate cohort means
summary2 <- distance_daily2 %>%
group_by(cohort, bird_date) %>%
summarise(mean_daily_dist = mean(daily_dist))
View(distance_daily2)
# calculate cohort means
summary2 <- distance_daily2 %>%
group_by(cohort, date_bird) %>%
summarise(mean_daily_dist = mean(daily_dist))
View(summary2)
View(distance_daily2)
# calculate cohort means
summary2 <- distance_daily2 %>%
group_by(cohort, elapsed) %>%
summarise(mean_daily_dist = mean(daily_dist))
View(summary2)
# plot distance moved by cohort during establishment
ggplot(summary2)+
geom_path(aes(elapsed, mean_daily_dist, colour = cohort))
# filter to establishment period
distance_daily2 <- distance_daily %>%
# add metadata
left_join(select(metadata, c("id", "cohort", "start_date"))) %>%
# calculate time since release
mutate(elapsed = as.numeric(date_bird - start_date))
# calculate cohort means
summary2 <- distance_daily2 %>%
group_by(cohort, elapsed) %>%
summarise(mean_daily_dist = mean(daily_dist))
# plot distance moved by cohort during establishment
ggplot(summary2)+
geom_path(aes(elapsed, mean_daily_dist, colour = cohort))
# plot distance moved by cohort during establishment
ggplot(summary2)+
geom_path(aes(elapsed, mean_daily_dist, colour = cohort))+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
xlab("Days post-release") +
xlab("Mean daily distance moved (m)")
# plot distance moved by cohort during establishment
ggplot(summary2)+
geom_path(aes(elapsed, mean_daily_dist, colour = cohort))+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
xlab("Days post-release") +
ylab("Mean daily distance moved (m)")
# plot distance moved by cohort during establishment
ggplot(summary2)+
geom_smooth(aes(elapsed, mean_daily_dist, colour = cohort))+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
xlab("Days post-release") +
ylab("Mean daily distance moved (m)")
# limit cohort daily means to 54 days
cohort_establishment <- summary2 %>%
filter(elapsed < 55)
View(cohort_establishment)
# limit cohort daily means to 54 days
cohort_establishment <- summary2 %>%
filter(elapsed < 60)
View(cohort_establishment)
# limit cohort daily means to 55 days (minimum period for reinforcers)
cohort_establishment <- summary2 %>%
filter(elapsed < 56)
View(cohort_establishment)
View(distance_daily2)
# limit cohort daily means to 55 days (minimum period for reinforcers)
cohort_establishment <- distance_daily2 %>%
filter(elapsed < 56)
View(cohort_establishment)
?glmm
# Packages
pacman::p_load(amt, atlastools, beepr, janitor, ggmap, ggridges, glmm, move, scattermore, sf, suncalc, terra, tidyterra, tidyverse)
# plot distance moved by cohort during establishment
ggplot(summary2)+
geom_path(aes(elapsed, mean_daily_dist, colour = cohort))+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
xlab("Days post-release") +
ylab("Mean daily distance moved (m)")
# plot movement
ggplot(cohort_establishment)+
geom_smooth(elapsed, daily_dist)
View(cohort_establishment)
# plot movement
ggplot(cohort_establishment)+
geom_smooth(aes(elapsed, daily_dist, color = cohort))
# plot movement
ggplot(cohort_establishment)+
geom_smooth(aes(elapsed, daily_dist, color = cohort))+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
xlab("Days post-release") +
ylab("Daily distance moved (m)")
# plot movement
ggplot(cohort_establishment)+
geom_smooth(aes(elapsed, daily_dist, color = cohort), method = "lm")+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
xlab("Days post-release") +
ylab("Daily distance moved (m)")
# test whether establishment differs between the groups
m1 <- glmm(daily_dist ~ cohort * elapsed + (1 | id), data = cohort_establishment)
?glmm
# test whether establishment differs between the groups
m1 <- lm(daily_dist ~ cohort * elapsed + (1 | id), data = cohort_establishment)
# test whether establishment differs between the groups
m1 <- lme4(daily_dist ~ cohort * elapsed + (1 | id), data = cohort_establishment)
# test whether establishment differs between the groups
m1 <- lmer(daily_dist ~ cohort * elapsed + (1 | id), data = cohort_establishment)
# distribution of movement data
hist(cohort_establishment$daily_dist)
# test normality of of movement data
shapiro.test(cohort_establishment$daily_dist)
# correct left skew
cohort_establishment <- cohort_establishment %>%
mutate(dist_transformed = root(daily_dist))
# correct left skew
cohort_establishment <- cohort_establishment %>%
mutate(dist_transformed = sqrt(daily_dist))
# correct left skew
cohort_establishment <- cohort_establishment %>%
mutate(dist_sqrt = sqrt(daily_dist))
hist(cohort_establishment$dist_sqrt)
shapiro.test(cohort_establishment$dist_sqrt)
ggqqplot(cohort_establishment$dist_sqrt)
# Packages
pacman::p_load(amt, atlastools, beepr, janitor, ggmap, ggpubr, ggridges, glmm, move, scattermore, sf, suncalc, terra, tidyterra, tidyverse)
ggqqplot(cohort_establishment$dist_sqrt)
# correct left skew
cohort_establishment <- cohort_establishment %>%
mutate(dist_sqrt = sqrt(daily_dist),
dist_log = log(daily_dist))
hist(cohort_establishment$dist_log)
# limit cohort daily means to 55 days (minimum period for reinforcers)
cohort_establishment <- distance_daily2 %>%
filter(elapsed < 56)
hist(cohort_establishment$dist_sqrt)
# correct left skew
cohort_establishment <- cohort_establishment %>%
mutate(dist_sqrt = sqrt(daily_dist))
hist(cohort_establishment$dist_sqrt)
# distribution of movement data
hist(cohort_establishment$daily_dist)
hist(cohort_establishment$dist_sqrt)
ggqqplot(cohort_establishment$dist_sqrt)
ggqqplot(cohort_establishment$daily_dist)
# test whether establishment differs between the groups
m1 <- lm(dist_sqrt ~ cohort * elapsed + (1 | id), data = cohort_establishment)
# test whether establishment differs between the groups
m1 <- lm(daily_dist ~ cohort * elapsed, data = cohort_establishment)
# Packages
pacman::p_load(amt, atlastools, beepr, ggmap, ggpubr, ggridges, janitor, lme4, move, scattermore, sf, suncalc, terra, tidyterra, tidyverse)
# test whether establishment differs between the groups
m1 <- lmer(daily_dist ~ cohort * elapsed + (1 | id), data = cohort_establishment)
summary(m1)
anova(m1)
# test whether establishment differs between the groups
m1 <- lmer(dist_sqrt ~ cohort * elapsed + (1 | id), data = cohort_establishment)
summary(m1)
anova(m1)
# test whether establishment differs between the groups
m1 <- lmer(dist_sqrt ~ cohort * elapsed + (1|id), data = cohort_establishment)
summary(m1)
anova(m1)
# visualise effect
ggplot(cohort_establishment,
aes(elapsed, dist_sqrt, color = cohort, group = interaction(cohort, id))) +
geom_line(alpha = 0.5) +
stat_summary(fun = mean, geom = "line", aes(group = cohort), linewidth = 1.2) +
theme_minimal() +
labs(title = "Distance Moved Over Time by Group",
x = "Day", y = "Distance Moved")
# plot movement
ggplot(cohort_establishment)+
geom_smooth(aes(elapsed, daily_dist, color = cohort), method = "lm")+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
xlab("Days post-release") +
ylab("Daily distance moved (m)")
# visualise effect
ggplot(cohort_establishment,
aes(elapsed, dist_sqrt, color = cohort, group = interaction(cohort, id))) +
geom_line(alpha = 0.5) +
stat_summary(fun = mean, geom = "line", aes(group = cohort), linewidth = 1.2) +
theme_minimal() +
labs(title = "Distance Moved Over Time by Group",
x = "Day", y = "Distance Moved")
# another way to visualise (group means)
ggplot(cohort_establishment,
aes(elapsed, dist_sqrt, color = cohort, group = interaction(cohort, id))) +
geom_line(alpha = 0.5) +
stat_summary(fun = mean, geom = "line", aes(group = cohort), linewidth = 1.2) +
theme_minimal() +
xlab("Days post-release") +
ylab("Daily distance moved (m)")
# plot movement
ggplot(cohort_establishment)+
geom_smooth(aes(elapsed, daily_dist, color = cohort), method = "lm")+
theme_minimal() +
xlab("Days post-release") +
ylab("Daily distance moved (m)")
# plot movement
ggplot(cohort_establishment)+
geom_path(aes(elapsed, daily_dist, color = cohort))+
theme_minimal() +
xlab("Days post-release") +
ylab("Daily distance moved (m)")
# plot movement
ggplot(cohort_establishment)+
geom_smooth(aes(elapsed, daily_dist, color = cohort))+
theme_minimal() +
xlab("Days post-release") +
ylab("Daily distance moved (m)")
# another way to visualise (group means)
ggplot(cohort_establishment,
aes(elapsed, dist_sqrt, color = cohort, group = interaction(cohort, id))) +
geom_line(alpha = 0.5) +
stat_summary(fun = mean, geom = "line", aes(group = cohort), linewidth = 1.2) +
theme_minimal() +
xlab("Days post-release") +
ylab("Daily distance moved (m)")
# another way to visualise (group means)
ggplot(cohort_establishment,
aes(elapsed, daily_dist, color = cohort, group = interaction(cohort, id))) +
geom_line(alpha = 0.5) +
stat_summary(fun = mean, geom = "line", aes(group = cohort), linewidth = 1.2) +
theme_minimal() +
xlab("Days post-release") +
ylab("Daily distance moved (m)")
# Packages
pacman::p_load(amt, atlastools, beepr, ggmap, ggpubr, ggridges, janitor, lme4, lmerTest, move, scattermore, sf, suncalc, terra, tidyterra, tidyverse)
# test whether establishment differs between the groups
m1 <- lmer(dist_sqrt ~ cohort * elapsed + (1|id), data = cohort_establishment)
summary(m1)
anova(m1)
# plot movement
ggplot(cohort_establishment)+
geom_smooth(aes(elapsed, daily_dist, color = cohort))+
theme_minimal() +
xlab("Days post-release") +
ylab("Daily distance moved (m)")
# plot movement
ggplot(cohort_establishment)+
geom_smooth(aes(elapsed, daily_dist, color = cohort), method = "lm")+
theme_minimal() +
xlab("Days post-release") +
ylab("Daily distance moved (m)")
# Packages
pacman::p_load(amt, atlastools, beepr, ggmap, ggpubr, ggridges, janitor, lme4, lmerTest, move, scattermore, sf, suncalc, survival, terra, tidyterra, tidyverse)
View(metadata)
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity) %>%
mutate(start_date = as_date(dmy(start_date)),
end_date = as_date(dmy(end_date)))
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity,
mortality = mortality_or_capture) %>%
mutate(start_date = as_date(dmy(start_date)),
end_date = as_date(dmy(end_date)),
mortality = as_date(dmy(mortality)))
View(metadata)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
km <- metadata %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(mortality > 0, 1, 0))
View(km)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
km <- metadata %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year))
View(km)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
km <- metadata %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(mortality > 0, 1, 0))
View(km)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
km <- metadata %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
View(km)
# Fit a survival model
survival <- survfit(Surv(time, status) ~ 1, km)
View(survival)
# Estimated survival probabilities
summary(survival, times = c(1, 10, 30, 100))
# Estimated survival probabilities
summary(survival, times = c(1, 10, 30, 100, 365))
survival[["n.censor"]]
View(km)
print(survival)
# Fit a survival model
survival <- survfit(Surv(time, status) ~ 1, km)
survival
# Estimated survival probabilities
summary(survival, times = c(1, 10, 30, 100, 365))
# Fit a basic survival model
kmfit <- survfit(Surv(time, status) ~ 1, km)
# Estimated survival probabilities
summary(kmfit, times = c(1, 10, 30, 100, 365))
# basic plot
autoplot(kmfit)
# Kaplan Meyer Plot
ggsurvplot(kmfit, data = km, risk.table = FALSE,
gtheme = theme_bw(),
censor = FALSE,
xlab = "Days post-release",
ylab = "Survival",
xlim = c(0,360),
palette = "grey20",
conf.int = FALSE)
# Packages
pacman::p_load(amt, atlastools, beepr, ggmap, ggpubr, ggridges, janitor, lme4, lmerTest, move, scattermore, sf, suncalc, survival, survminer, terra, tidyterra, tidyverse)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
km <- with(surv_data, Surv(time, status))
km
# Fit a basic survival model
kmfit <- survfit(Surv(time, status) ~ 1, km)
# Fit a basic survival model
kmfit <- survfit(Surv(time, status) ~ 1, data = surv_data)
# Estimated survival probabilities
summary(kmfit, times = c(1, 10, 30, 100, 365))
# Kaplan Meyer Plot
ggsurvplot(kmfit, data = km, risk.table = FALSE,
gtheme = theme_bw(),
censor = FALSE,
xlab = "Days post-release",
ylab = "Survival",
xlim = c(0,360),
palette = "grey20",
conf.int = FALSE)
# Kaplan Meyer Plot
ggsurvplot(kmfit, data = surv_data, risk.table = FALSE,
gtheme = theme_bw(),
censor = FALSE,
xlab = "Days post-release",
ylab = "Survival",
xlim = c(0,360),
palette = "grey20",
conf.int = FALSE)
# plot
autoplot(kmfit)
# Packages
pacman::p_load(amt, atlastools, beepr, ggfortify, ggmap, ggpubr, ggridges, janitor, lme4, lmerTest, move, scattermore, sf, suncalc, survival, survminer, terra, tidyterra, tidyverse)
# plot
autoplot(kmfit)
View(metadata)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# limit to study period
mutate(end_date_study = ifelse(end_date < "2023-08-04", end_date, "2023-08-04"))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# limit to study period
mutate(end_date_study = ifelse(end_date < as_date("2023-08-04"), end_date, as_date("2023-08-04")))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# limit to study period
mutate(end_date_study = ifelse(end_date < as_date(ymd("2023-08-04")), end_date, as_date(ymd("2023-08-04"))))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# limit to study period
mutate(end_date_study = as_date(ifelse(end_date < as_date("2023-08-04"), end_date, as_date("2023-08-04"))))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# limit to study period
mutate(end_date_study = as_date(ifelse(end_date < as_date("2023-08-05"), end_date, as_date("2023-08-04"))))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# limit to study period
mutate(end_date_study = as_date(ifelse(end_date < as_date("2023-08-05"),
end_date, as_date("2023-08-04")))) %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date_study - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# limit to study period
mutate(end_date_study = as_date(ifelse(end_date < as_date("2023-08-05"),
end_date, as_date("2023-08-04"))),
mortality_study = ifelse(end_date < as_date("2023-08-05"), 1, 0)) %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date_study - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# limit to study period
mutate(end_date_study = as_date(ifelse(end_date < as_date("2023-08-05"),
end_date, as_date("2023-08-04"))),
status = ifelse(end_date < as_date("2023-08-05"), 1, 0)) %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date_study - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
View(surv_data)
# Estimated survival probabilities
summary(kmfit, times = c(1, 10, 30, 100, 365))
# Fit a survival model by cohort
kmfit_cohort <- survfit(Surv(time, status) ~ cohort, data = surv_data)
# plot
autoplot(kmfit_cohort)
# Fit Cox Model
cox <- coxph(Surv(time, status) ~ cohort, data = surv_data)
summary(cox)
autoplot(cox)
autoplot(survfit(cox))
?glm
View(metadata)
# survival data
survival <- metadata %>%
# remove un-needed columns
select(id, cohort, start_date, mortality, end_date)
View(survival)
# survival data
survival <- metadata %>%
# remove un-needed columns
select(id, cohort, start_date, mortality, end_date) %>%
# calculate persistence
mutate(persistence = end_date - start_date)
View(survival)
# survival data
survival <- metadata %>%
# remove un-needed columns
select(id, cohort, start_date, mortality, end_date) %>%
# calculate persistence
mutate(persistence = end_date - start_date) %>%
# binary survival to 54 days
mutate(survived = ifelse(persistence < 54, FALSE, TRUE))
View(survival)
# survival data
survival <- metadata %>%
# remove un-needed columns
select(id, cohort, start_date, mortality, end_date) %>%
# calculate persistence
mutate(persistence = end_date - start_date) %>%
# binary survival to 54 days
mutate(survive_initial = ifelse(persistence < 54, FALSE, TRUE))
View(survival)
