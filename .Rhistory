xlab = "Maximum speed (m/s) [R3]", ylab = "Density", cex.lab = 1.2,  freq = FALSE)
text(Max.speed, max(h$density), labels = paste("R3 =", Max.speed), col = "blue", cex = 0.8) # User defined 'Max.speed [R3]'
text(quantile(df.sub$Maximum.speed, 0.95, na.rm = TRUE), max(h$density)/1.7, labels = "95%", col = "green", cex = 0.8) # 95%
text(quantile(df.sub$Maximum.speed, 0.99, na.rm = TRUE), max(h$density)/3.2, labels = "99%", col = "red", cex = 0.8) # 99%
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density) - max(h$density)/10)
abline(v = Max.speed, col="blue", lwd=1.5, lty=2) # User defined 'Dist.thresh [R1]'
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density)/2)
abline(v = quantile(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), 0.95, na.rm = TRUE), col="green", lwd=1.5, lty=2) #95% quantile
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density)/4)
abline(v = quantile(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), 0.99, na.rm = TRUE), col="red", lwd=1.5, lty=2) #99 % quantile
#Zoom in
par(fig = c(0.7, 0.99, 0.15, 0.49), new = T)
h = hist(c(df.sub$Outgoing.speed, df.sub$Incoming.speed), breaks="Scott", plot=TRUE, main = "",
xlab = "", ylab = "", freq = FALSE, xlim = c(0, quantile(df.sub$Maximum.speed, 0.99, na.rm = TRUE)))
if(Max.speed < quantile(df.sub$Maximum.speed, 0.99, na.rm = TRUE)){
text(Max.speed, max(h$density), labels = paste("R3 =", Max.speed), col = "blue", cex = 0.8) # User defined 'Angle.speed [R2]'
}
text(quantile(df.sub$Maximum.speed, 0.95, na.rm = TRUE), max(h$density)/1.7, labels = "95%", col = "green", cex = 0.8) # 95%
text(quantile(df.sub$Maximum.speed, 0.99, na.rm = TRUE), max(h$density)/3.2, labels = "99%", col = "red", cex = 0.8) # 99%
if(Max.speed < quantile(df.sub$Maximum.speed, 0.99, na.rm = TRUE)){
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density) - max(h$density)/10)
abline(v = Angle.speed, col="blue", lwd=1.5, lty=2) # User defined 'Dist.thresh [R1]'
}
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density)/2)
abline(v = quantile(df.sub$Maximum.speed, 0.95, na.rm = TRUE), col="green", lwd=1.5, lty=2) #95% quantile
clip(x1 = 0,
x2 = max(h$breaks),
y1 = 0,
y2 = max(h$density)/4)
abline(v = quantile(df.sub$Maximum.speed, 0.99, na.rm = TRUE), col="red", lwd=1.5, lty=2) #99 % quantile
Thresholds <- recordPlot() #Save plot
###ggplot Results of filtering (user-defined thresholds)###
p1 = ggplot(df.sub, aes(x = Longitude, y = Latitude,
text =  paste('Timestamp: ', Timestamp,
'</br> Fix number: ', Fix.number,
'</br> Window group: ', Window.group,
'</br> Distance from median (m): ', round(Dist.from.median, 1),
'</br> Angle between 3 fixes (°): ', round(Ang.vertex, 1),
'</br> Outgoing speed of 3 fixes (m/s): ', round(Outgoing.speed, 2),
'</br> Incoming speed of 3 fixes (m/s): ', round(Incoming.speed, 2),
'</br> Maximum speed (m/s): ', round(Maximum.speed, 2),
'</br> R1: ', R1,
'</br> R2: ', R2,
'</br> R3: ', R3)))+
geom_path(aes(group=1), size = 0.3,  alpha = 0.5, color = "grey30")+
geom_point(aes(color = Verdict), alpha = 0.8)+
ggtitle("Gundog GPS filter")+
xlab("Longitude")+
ylab("Latitude")+
scale_color_manual(name = "Outlier detection:",
labels = c("Not anomalous" ,"Possible outlier", "Unanimous outlier"),
values = c("green", "darkorange2" ,"red"),
na.translate = FALSE,
drop = FALSE)+
coord_equal(ratio = 1) + #+ scale_x_continuous(labels=scaleFUN)+scale_y_continuous(labels=scaleFUN)
theme_bw()+
theme(axis.text.x = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(color = "black", size = 16),
axis.title.y = element_text(color = "black", size = 16),
plot.title = element_text(hjust = 0.5),
legend.position = "none")
###ggplot Results of filtering (Isolation forest)####
p2 = ggplot(df.sub, aes(x = Longitude, y = Latitude,
text =  paste('Timestamp: ', Timestamp,
'</br> Fix number: ', Fix.number,
'</br> Window group: ', Window.group,
'</br> Distance from median (m): ', round(Dist.from.median, 1),
'</br> Angle between 3 fixes (°): ', round(Ang.vertex, 1),
'</br> Outgoing speed of 3 fixes (m/s): ', round(Outgoing.speed, 2),
'</br> Incoming speed of 3 fixes (m/s): ', round(Incoming.speed, 2),
'</br> Maximum speed (m/s): ', round(Maximum.speed, 2),
'</br> I.F_anomaly_score_R1: ', round(I.F_anomaly_score_R1, 2),
'</br> I.F_anomaly_score_R2: ', round(I.F_anomaly_score_R2, 2),
'</br> I.F_anomaly_score_R3: ', round(I.F_anomaly_score_R3, 2))))+
geom_path(aes(group=1), size = 0.3,  alpha = 0.5, color = "grey30")+
geom_point(aes(color = Verdict_IF), alpha = 0.8)+
ggtitle("Gundog GPS filter")+
xlab("Longitude")+
ylab("Latitude")+
scale_color_manual(name = "Outlier detection:",
labels = c("Not anomalous" ,"Possible outlier", "Unanimous outlier"),
values = c("green", "darkorange2" ,"red"),
na.translate = FALSE,
drop = FALSE)+
coord_equal(ratio = 1) + #+ scale_x_continuous(labels=scaleFUN)+scale_y_continuous(labels=scaleFUN)
theme_bw()+
theme(axis.text.x = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 12),
axis.title.x = element_text(color = "black", size = 16),
axis.title.y = element_text(color = "black", size = 16),
plot.title = element_text(hjust = 0.5),
legend.position = "none")
#Make Interactive and plot user-defined, and Isolation Forests results side-by-side
fig <- subplot(ggplotly(p1), ggplotly(p2))
#Add sub headings
annotations = list(
list(
x = 0.2,
y = 1.0,
text = "User-defined threholds",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1,
text = "Isolation forest",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
))
fig <- fig %>%layout(annotations = annotations)
print(fig)
return(list(Thresholds = Thresholds, Plot = fig, df = as.data.frame(df.sub)))
par(mfrow = c(1,1)) #Return plotting parameters back
}else{ return(df = as.data.frame(df.sub))
} #If no plotting, just return the data frame
}
#END OF FUNCTION
#For example.... (assuming original GPS data set is called 'Drogon')
#df.sub = Gundog.GPS.Filter(TS = Drogon$study.local.timestamp, Longitude = Drogon$location.long, Latitude = Drogon$location.lat, Drop.out = 300, Window.length = 10, Burst.method = "median", Dist.thresh = 50, Max.speed = 0.85, Speed.step = 1, Angle.speed = 0.85, Angle.thresh = 30, plot = TRUE, I.F_conf = 0.995)
#And to recover the data frame from the returned list...
#GPS.df = df.sub[["df"]]
# Birds list
birds <- unique(data_alt$id)
# Loop through all birds 🐢🐢
data_filt <- data.frame()
# Loop through all birds 🐢🐢
data_filt <- data.frame()
for(i in 1:length(birds)){
subset <- filter(data_alt, id == birds[i])
temp <- Gundog.GPS.Filter(
TS = subset$DateTime,
Longitude = subset$lon,
Latitude = subset$lat,
Drop.out = 600, # grouping window
Burst.method = "none",
Dist.thresh = 714, #m - max distance per time window
Angle.speed = 1.07, #m/s
Angle.thresh = 30,
Max.speed = 1.19, #m/s
Speed.step = 1, # number of fixes to calculate speed
plot = FALSE # to get just dataframe output, otherwise TRUE for list including plots
) %>%
rename(DateTime = Timestamp) %>%
left_join(subset)
data_filt <- rbind(data_filt, temp)
print(paste("Completed processing for", as.character(birds[i])))
}; beep()
names(data_alt)
names(data_filt)
# Filter to non-outlier points and select columns to retain
data_clean <- data_filt %>%
filter(Verdict_IF == "Not anomalous") %>%
select(c("id", "study_local_timestamp", "lon", "lat", "acceleration_raw_x", "acceleration_raw_y", "acceleration_raw_z", "external_temperature", "height_above_msl", "utm_easting", "utm_northing", "utm_zone", "ground_speed", "heading"))
length(data_clean)
nrow(data_clean)
1719843 - 1701926
17917/1719843
0.01041781*100
# Plot filtering by bird to visually inspect outcome
ggmap(map_z13)+
geom_path(data=data_filt, aes(Longitude, Latitude), colour = "black", alpha = .6)+
geom_point(data=filter(data_filt, Verdict_IF == "Possible outlier"),
aes(Longitude, Latitude), colour = "purple", alpha = 0.8)+
geom_point(data=filter(data_filt, Verdict_IF == "Unanimous outlier"),
aes(Longitude, Latitude), colour = "red", alpha = 0.8)+
geom_point(data=filter(data_filt, Verdict_IF == "Not anomalous"),
aes(Longitude, Latitude), colour = "blue", alpha = 0.8)+
facet_wrap(~id) +
theme_void()
# Plot filtering by bird to visually inspect outcome
ggmap(map_z13)+
geom_path(data=data_filt, aes(Longitude, Latitude), colour = "black", alpha = .6)+
geom_point(data=filter(data_filt, Verdict_IF == "Possible outlier"),
aes(Longitude, Latitude), colour = "purple", alpha = 0.8,
pch='.')+
geom_point(data=filter(data_filt, Verdict_IF == "Unanimous outlier"),
aes(Longitude, Latitude), colour = "red", alpha = 0.8,
pch='.')+
geom_point(data=filter(data_filt, Verdict_IF == "Not anomalous"),
aes(Longitude, Latitude), colour = "blue", alpha = 0.8,
pch='.')+
facet_wrap(~id) +
theme_void()
# Save to file
write.csv(speed_filt2, "data/gpsclean.csv", row.names = FALSE)
# Save to file
write.csv(data_filt, "data/gpsclean.csv", row.names = FALSE)
# Plot filtering by bird to visually inspect outcome
for(i in 1:length(birds)){
subset <- filter(data_filt, id == birds[i])
ggmap(map_z13)+
geom_path(data=subset, aes(Longitude, Latitude), colour = "black", alpha = .6)+
geom_point(data=filter(subset, Verdict_IF == "Possible outlier"),
aes(Longitude, Latitude), colour = "purple", alpha = 0.8,
pch='.')+
geom_point(data=filter(subset, Verdict_IF == "Unanimous outlier"),
aes(Longitude, Latitude), colour = "red", alpha = 0.8,
pch='.')+
geom_point(data=filter(subset, Verdict_IF == "Not anomalous"),
aes(Longitude, Latitude), colour = "blue", alpha = 0.8,
pch='.')+
theme_void()
}
# Plot filtering by bird to visually inspect outcome
for(i in 1:length(birds)){
subset <- filter(data_filt, id == birds[i])
map <- ggmap(map_z13)+
geom_path(data=subset, aes(Longitude, Latitude), colour = "black", alpha = .6)+
geom_point(data=filter(subset, Verdict_IF == "Possible outlier"),
aes(Longitude, Latitude), colour = "purple", alpha = 0.8,
pch='.')+
geom_point(data=filter(subset, Verdict_IF == "Unanimous outlier"),
aes(Longitude, Latitude), colour = "red", alpha = 0.8,
pch='.')+
geom_point(data=filter(subset, Verdict_IF == "Not anomalous"),
aes(Longitude, Latitude), colour = "blue", alpha = 0.8,
pch='.')+
theme_void()
map
}
print(map)
# Plot filtering by bird to visually inspect outcome
for(i in 1:length(birds)){
subset <- filter(data_filt, id == birds[i])
map <- ggmap(map_z13)+
geom_path(data=subset, aes(Longitude, Latitude), colour = "black", alpha = .6)+
geom_point(data=filter(subset, Verdict_IF == "Possible outlier"),
aes(Longitude, Latitude), colour = "purple", alpha = 0.8,
pch='.')+
geom_point(data=filter(subset, Verdict_IF == "Unanimous outlier"),
aes(Longitude, Latitude), colour = "red", alpha = 0.8,
pch='.')+
geom_point(data=filter(subset, Verdict_IF == "Not anomalous"),
aes(Longitude, Latitude), colour = "blue", alpha = 0.8,
pch='.')+
theme_void()
print(map)
}
filenamme <- paste("datafiltmap", birds[i])
filenamme <- paste("datafiltmap", birds[i], sep = "_")
# Plot filtering by bird to visually inspect outcome
for(i in 1:length(birds)){
subset <- filter(data_filt, id == birds[i])
map <- ggmap(map_z13)+
geom_path(data=subset, aes(Longitude, Latitude), colour = "black", alpha = .6)+
geom_point(data=filter(subset, Verdict_IF == "Possible outlier"),
aes(Longitude, Latitude), colour = "purple", alpha = 0.8,
pch='.')+
geom_point(data=filter(subset, Verdict_IF == "Unanimous outlier"),
aes(Longitude, Latitude), colour = "red", alpha = 0.8,
pch='.')+
geom_point(data=filter(subset, Verdict_IF == "Not anomalous"),
aes(Longitude, Latitude), colour = "blue", alpha = 0.8,
pch='.')+
theme_void()
filename <- paste("datafiltmap", birds[i], sep = "_")
ggsave(filename = filename, plot = map)
}
filename <- paste("datafiltmap", birds[i], ".jpeg", sep = "_")
# Plot filtering by bird to visually inspect outcome
for(i in 1:length(birds)){
subset <- filter(data_filt, id == birds[i])
map <- ggmap(map_z13)+
geom_path(data=subset, aes(Longitude, Latitude), colour = "black", alpha = .6)+
geom_point(data=filter(subset, Verdict_IF == "Possible outlier"),
aes(Longitude, Latitude), colour = "purple", alpha = 0.8,
pch='.')+
geom_point(data=filter(subset, Verdict_IF == "Unanimous outlier"),
aes(Longitude, Latitude), colour = "red", alpha = 0.8,
pch='.')+
geom_point(data=filter(subset, Verdict_IF == "Not anomalous"),
aes(Longitude, Latitude), colour = "blue", alpha = 0.8,
pch='.')+
theme_void()
filename <- paste("datafiltmap", birds[i], ".jpeg", sep = "_")
ggsave(filename = filename, plot = map)
}
filename <- paste("maps/datafiltmap_", birds[i], ".jpeg", sep = "")
map <- ggmap(map_z13)+
geom_path(data=subset, aes(Longitude, Latitude), colour = "black", alpha = .6)+
geom_point(data=filter(subset, Verdict_IF == "Possible outlier"),
aes(Longitude, Latitude), colour = "purple", alpha = 0.8, size = 1,
pch='.')+
geom_point(data=filter(subset, Verdict_IF == "Unanimous outlier"),
aes(Longitude, Latitude), colour = "red", alpha = 0.8, size = 1,
pch='.')+
geom_point(data=filter(subset, Verdict_IF == "Not anomalous"),
aes(Longitude, Latitude), colour = "blue", alpha = 0.8, size = 1,
pch='.')+
theme_void()
map <- ggmap(map_z13)+
geom_path(data=subset, aes(Longitude, Latitude), colour = "black", alpha = .6)+
geom_point(data=filter(subset, Verdict_IF == "Possible outlier"),
aes(Longitude, Latitude), colour = "purple", alpha = 0.8, size = 1,
pch='.')+
geom_point(data=filter(subset, Verdict_IF == "Unanimous outlier"),
aes(Longitude, Latitude), colour = "red", alpha = 0.8, size = 1,
pch='.')+
geom_point(data=filter(subset, Verdict_IF == "Not anomalous"),
aes(Longitude, Latitude), colour = "blue", alpha = 0.8, size = 1,
pch='.')+
theme_void()
map
map <- ggmap(map_z13)+
geom_path(data=subset, aes(Longitude, Latitude), colour = "black", alpha = .6)+
geom_point(data=filter(subset, Verdict_IF == "Possible outlier"),
aes(Longitude, Latitude), colour = "purple", alpha = 0.8)+
geom_point(data=filter(subset, Verdict_IF == "Unanimous outlier"),
aes(Longitude, Latitude), colour = "red", alpha = 0.8)+
geom_point(data=filter(subset, Verdict_IF == "Not anomalous"),
aes(Longitude, Latitude), colour = "blue", alpha = 0.8)+
theme_void()
map
theme_void()
theme_void()
map <- ggmap(map_z13)+
geom_path(data=subset, aes(Longitude, Latitude), colour = "black", alpha = .6)+
geom_point(data=filter(subset, Verdict_IF == "Possible outlier"),
aes(Longitude, Latitude), colour = "purple", alpha = 0.8)+
geom_point(data=filter(subset, Verdict_IF == "Unanimous outlier"),
aes(Longitude, Latitude), colour = "red", alpha = 0.8)+
geom_point(data=filter(subset, Verdict_IF == "Not anomalous"),
aes(Longitude, Latitude), colour = "blue", alpha = 0.8)+
geom_point(data=filter(subset, Verdict_IF == "Not anomalous" & height_above_msl >100),
aes(Longitude, Latitude), colour = "green", alpha = 0.8)
map
# import data from movebank
test <- readr::read_csv(fs::dir_ls(path = "movebank/marmalade")) %>%
clean_names() %>%
# Time in posix format
mutate(DateTime = as.POSIXct(study_local_timestamp, "%Y-%m-%d %H:%M:%S"),
date = as.Date(DateTime),
# Remove days after end of tracking period - for Marmalade whose GPS not removed
filter(date < "2024-01-12"))
# import data from movebank
test <- readr::read_csv(fs::dir_ls(path = "movebank/marmalade.csv")) %>%
clean_names() %>%
# Time in posix format
mutate(DateTime = as.POSIXct(study_local_timestamp, "%Y-%m-%d %H:%M:%S"),
date = as.Date(DateTime),
# Remove days after end of tracking period - for Marmalade whose GPS not removed
filter(date < "2024-01-12"))
# import data from movebank
test <- readr::read_csv("movebank/marmalade.csv") %>%
clean_names() %>%
# Time in posix format
mutate(DateTime = as.POSIXct(study_local_timestamp, "%Y-%m-%d %H:%M:%S"),
date = as.Date(DateTime),
# Remove days after end of tracking period - for Marmalade whose GPS not removed
filter(date < "2024-01-12"))
# import data from movebank
test <- readr::read_csv("movebank/Marmalade01.csv") %>%
clean_names() %>%
# Time in posix format
mutate(DateTime = as.POSIXct(study_local_timestamp, "%Y-%m-%d %H:%M:%S"),
date = as.Date(DateTime),
# Remove days after end of tracking period - for Marmalade whose GPS not removed
filter(date < "2024-01-12"))
# import data from movebank
test <- readr::read_csv("movebank/Marmalade01.csv") %>%
clean_names() %>%
# Time in posix format
mutate(datetime = as.POSIXct(study_local_timestamp, "%Y-%m-%d %H:%M:%S"),
date = as.Date(datetime),
# Remove days after end of tracking period - for Marmalade whose GPS not removed
filter(date < "2024-01-12"))
# Packages
pacman::p_load(beepr, janitor, ggmap, scattermore, SDLfilter, tidyverse)
# import data from movebank
test <- readr::read_csv("movebank/Marmalade01.csv") %>%
clean_names() %>%
# Time in posix format
mutate(datetime = as.POSIXct(study_local_timestamp, "%Y-%m-%d %H:%M:%S"),
date = as.Date(datetime),
# Remove days after end of tracking period - for Marmalade whose GPS not removed
filter(date < "2024-01-12"))
# import data from movebank
test <- readr::read_csv("movebank/Marmalade01.csv") %>%
clean_names() %>%
# Time in posix format
mutate(datetime = as.POSIXct(study_local_timestamp, "%Y-%m-%d %H:%M:%S"),
date = as.Date(datetime)) %>%
# Remove days after end of tracking period - for Marmalade whose GPS not removed
filter(date < "2024-01-12")
# Google API key for ggmaps
ggmap::register_google(key = readChar("apikey_google.txt", nchars = file.info("apikey_google.txt")$size))
# Background map MR zones 1 and 2
map_z13 <- get_map(c(144.4380, -37.9000), zoom=13, maptype = "satellite")
names(test)
# plot raw data
ggmap(mapz13)+
geom_path(data=test, aes(location_long, location_lat),
colour = "black", alpha = .6)+
geom_point(data=test, aes(location_long, location_lat),
colour = "black", alpha = .6)+
theme_void()
# plot raw data
ggmap(map_z13)+
geom_path(data=test, aes(location_long, location_lat),
colour = "black", alpha = .6)+
geom_point(data=test, aes(location_long, location_lat),
colour = "black", alpha = .6)+
theme_void()
# plot raw data
ggmap(map_z13)+
geom_path(data=test, aes(location_long, location_lat),
colour = "yellow", alpha = .6)+
geom_point(data=test, aes(location_long, location_lat),
colour = "yellow", alpha = .6)+
theme_void()
# import data from movebank
test1 <- readr::read_csv("movebank/Marmalade01.csv") %>%
clean_names() %>%
# Time in posix format
mutate(datetime = as.POSIXct(study_local_timestamp, "%Y-%m-%d %H:%M:%S"),
date = as.Date(datetime)) %>%
# Remove days after end of tracking period - for Marmalade whose GPS not removed
filter(date < "2024-01-12")
# Packages
pacman::p_load(atlastools, beepr, janitor, ggmap, scattermore, SDLfilter, tidyverse)
?atl_filter_covariates
# Histogram of satellite vales
histogram(test1$gps_satellite_count)
# Histogram of satellite vales
hist(test1$gps_satellite_count)
# Histogram of hdop values
hist(test1$gps_hdop)
# Filter satellite and hdop values
test2 <- test1 %>%
filter(gps_satellite_count > 5) %>%
filter(gps_hdop >3)
# Filter satellite and hdop values
test2 <- test1 %>%
filter(gps_satellite_count > 5) %>%
filter(gps_hdop <3)
# plot filtering effect
ggmap(map_z13)+
geom_path(data=test1, aes(location_long, location_lat),
colour = "yellow", alpha = .6)+
geom_point(data=test1, aes(location_long, location_lat),
colour = "yellow", alpha = .6)+
geom_path(data=test2, aes(location_long, location_lat),
colour = "blue", alpha = .6)+
geom_point(data=test2, aes(location_long, location_lat),
colour = "blue", alpha = .6)+
theme_void()
# plot filtering effect
ggmap(map_z13)+
geom_path(data=test1, aes(location_long, location_lat),
colour = "yellow", alpha = .6)+
geom_point(data=test1, aes(location_long, location_lat),
colour = "yellow", alpha = .6)+
geom_path(data=test2, aes(location_long, location_lat),
colour = "blue", alpha = .6)+
geom_point(data=test2, aes(location_long, location_lat),
colour = "blue", alpha = .6)+
theme_void()
# Plot track, colour by satellite values
ggmap(map_z13)+
geom_path(data=test1, aes(location_long, location_lat), colour = "white")+
geom_point(data=test1, aes(location_long, location_lat, fill = gps_satellite_count))+
theme_void()
# Plot track, colour by satellite values
ggmap(map_z13)+
geom_path(data=test1, aes(location_long, location_lat), colour = "white")+
geom_point(data=test1, aes(location_long, location_lat, colour = gps_satellite_count))+
theme_void()
# Plot track, colour by satellite values
ggmap(map_z13)+
geom_path(data=test1, aes(location_long, location_lat), colour = "white")+
geom_point(data=test1, aes(location_long, location_lat, colour = gps_satellite_count))+
scale_colour_viridis_c()+
theme_void()
# Histogram of satellite vales
hist(test1$gps_satellite_count)
# Histogram of satellite vales
hist(test1$gps_hdop)
# Plot track, colour by satellite values
ggmap(map_z13)+
geom_path(data=test1, aes(location_long, location_lat), colour = "white")+
geom_point(data=test1, aes(location_long, location_lat, colour = gps_hdop))+
scale_colour_viridis_c()+
theme_void()
# Plot track, colour by altitude values
ggmap(map_z13)+
geom_path(data=test1, aes(location_long, location_lat), colour = "white")+
geom_point(data=test1, aes(location_long, location_lat, colour = height_above_msl))+
scale_colour_viridis_c()+
theme_void()
