m7 <- glmmTMB(daily_dist ~ period * (scale(date) + scale(date2))+ (1|id),
data = datam7,
na.action = "na.fail")
# model selection
dm7 <- dredge(m7)
# print best model on AICc
best7 <- get.models(dm7, delta==0)[[1]]
summary(best7)
# check model
check_model(best7)
# post-hoc comparison of means
emtrends(best7, pairwise ~ period)
# post-hoc comparison of means
emtrends(best7, pairwise ~ period, var = "period")
# post-hoc comparison of means
emtrends(best7, pairwise ~ period, type = "response")
# plot effects
plot_model(best7)
# read in data and filter to residents for reinforcement period
datam7 <- read.csv("results/daily_distance_moved.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort"))) %>%
# select only residents
filter(cohort == "Resident") %>%
# format dates as dates and numeric and a quadratic term
mutate(date = as_date(date_bird),
date1 = as.numeric(date),
date2 = date1^2) %>%
# limit to reinforcement period
filter(date %in% dates) %>%
# add column for pre or post release
mutate(period = factor(ifelse(date %in% pre_dates,
"pre-reinforcement", "post-reinforcement"),
levels  = c("pre-reinforcement", "post-reinforcement")))
View(datam7)
# test difference between the groups with interaction of time as a quadratic
m7 <- glmmTMB(daily_dist ~ period * (scale(date1) + scale(date2))+ (1|id),
data = datam7,
na.action = "na.fail")
# model selection
dm7 <- dredge(m7)
# print best model on AICc
best7 <- get.models(dm7, delta==0)[[1]]
summary(best7)
# read in data and filter to residents for reinforcement period
datam7 <- read.csv("results/daily_distance_moved.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort"))) %>%
# select only residents
filter(cohort == "Resident") %>%
# format dates as dates and numeric and a quadratic term
mutate(date = as_date(date_bird)) %>%
# limit to reinforcement period
filter(date %in% dates) %>%
# add column for pre or post release
mutate(period = factor(ifelse(date %in% pre_dates,
"pre-reinforcement", "post-reinforcement"),
levels  = c("pre-reinforcement", "post-reinforcement")))
# create social group means
sum7 <- datam7 %>%
group_by(date) %>%
summarise(dist = mean(daily_dist),
upper = dist + std.error(daily_dist),
lower = dist - std.error(daily_dist)) %>%
arrange(date)
# plot daily distance over time as social group means
ggplot(sum7, aes(date, dist, ymin = lower, ymax = upper)) +
geom_path() +
geom_ribbon(alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Daily distance moved (m)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()+
geom_vline(aes(xintercept = as_date("2023-06-07")), colour = "purple")
# test difference between the groups with interaction of time as a quadratic
m7 <- glmmTMB(daily_dist ~ period + (1|id),
data = datam7,
na.action = "na.fail")
# model selection
dm7 <- dredge(m7)
# print best model on AICc
best7 <- get.models(dm7, delta==0)[[1]]
summary(best7)
summary(m7)
# check model
check_model(m7)
# plot effects
plot_model(m7)
# marginal effects
pred7 <- predict_response(m7, terms = c("date", "period"))
# marginal effects
pred7 <- predict_response(m7, terms = c("period"))
# plot predictions
ggplot(pred7, aes(x, predicted, fill = group, ymin = conf.low, ymax = conf.high)) +
geom_line(aes(colour = group))+
geom_ribbon(alpha = 0.2)+
xlab("Days post-reinforcement") +
ylab("Predicted values of daily distance moved (m)") +
theme_minimal()+
scale_fill_viridis_d()+
scale_colour_viridis_d()
# plot predictions
ggplot(pred7, aes(x, predicted, ymin = conf.low, ymax = conf.high)) +
geom_line()+
geom_ribbon(alpha = 0.2)+
xlab("Days post-reinforcement") +
ylab("Predicted values of daily distance moved (m)") +
theme_minimal()+
scale_fill_viridis_d()+
scale_colour_viridis_d()
# plot predictions
ggplot(pred7, aes(x, predicted, ymin = conf.low, ymax = conf.high, group = group)) +
geom_line()+
geom_ribbon(alpha = 0.2)+
xlab("Days post-reinforcement") +
ylab("Predicted values of daily distance moved (m)") +
theme_minimal()+
scale_fill_viridis_d()+
scale_colour_viridis_d()
# plot predictions
ggplot(pred7, aes(x, predicted, ymin = conf.low, ymax = conf.high, group = group)) +
geom_pointrange()+
xlab(element_blank()) +
ylab("Predicted values of daily distance moved (m)") +
theme_minimal()+
scale_fill_viridis_d()+
scale_colour_viridis_d()
# plot predictions
ggplot(pred7, aes(x, predicted, ymin = conf.low, ymax = conf.high)) +
geom_pointrange()+
xlab(element_blank()) +
ylab("Predicted values of daily distance moved (m)") +
theme_minimal()+
scale_fill_viridis_d()+
scale_colour_viridis_d()
# plot daily distance over time as social group means
ggplot(sum7, aes(date, dist, ymin = lower, ymax = upper)) +
geom_path() +
geom_ribbon(alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Daily distance moved (m)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()+
geom_vline(aes(xintercept = as_date("2023-06-07")), colour = "purple")
# read in data and filter to residents for reinforcement period
datam7 <- read.csv("results/daily_distance_moved.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort"))) %>%
# select only residents
filter(cohort == "Resident") %>%
# format dates as dates and numeric and a quadratic term
mutate(date = as_date(date_bird)) %>%
# limit to reinforcement period
filter(date %in% dates) %>%
# add column for pre or post release
mutate(period = factor(ifelse(date %in% pre_dates,
"pre-reinforcement", "post-reinforcement"),
levels  = c("pre-reinforcement", "post-reinforcement"))) %>%
# without nutmeg to see what happens
filter(!id == "Nutmeg")
# create social group means
sum7 <- datam7 %>%
group_by(date) %>%
summarise(dist = mean(daily_dist),
upper = dist + std.error(daily_dist),
lower = dist - std.error(daily_dist)) %>%
arrange(date)
# plot daily distance over time as social group means
ggplot(sum7, aes(date, dist, ymin = lower, ymax = upper)) +
geom_path() +
geom_ribbon(alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Daily distance moved (m)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()+
geom_vline(aes(xintercept = as_date("2023-06-07")), colour = "purple")
# test difference pre and post reinforcement
m7 <- glmmTMB(daily_dist ~ period + (1|id),
data = datam7,
na.action = "na.fail")
summary(m7)
# read in data and filter to residents for reinforcement period
datam7 <- read.csv("results/daily_distance_moved.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort"))) %>%
# select only residents
filter(cohort == "Resident") %>%
# format dates as dates and numeric and a quadratic term
mutate(date = as_date(date_bird)) %>%
# limit to reinforcement period
filter(date %in% dates) %>%
# add column for pre or post release
mutate(period = factor(ifelse(date %in% pre_dates,
"pre-reinforcement", "post-reinforcement"),
levels  = c("pre-reinforcement", "post-reinforcement"))) %>%
# without nutmeg to see what happens
filter(!id == c("Nutmeg", "Marmalade"))
# read in data and filter to residents for reinforcement period
datam7 <- read.csv("results/daily_distance_moved.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort"))) %>%
# select only residents
filter(cohort == "Resident") %>%
# format dates as dates and numeric and a quadratic term
mutate(date = as_date(date_bird)) %>%
# limit to reinforcement period
filter(date %in% dates) %>%
# add column for pre or post release
mutate(period = factor(ifelse(date %in% pre_dates,
"pre-reinforcement", "post-reinforcement"),
levels  = c("pre-reinforcement", "post-reinforcement"))) %>%
# without nutmeg to see what happens
filter(!id %in% c("Nutmeg", "Marmalade"))
# create social group means
sum7 <- datam7 %>%
group_by(date) %>%
summarise(dist = mean(daily_dist),
upper = dist + std.error(daily_dist),
lower = dist - std.error(daily_dist)) %>%
arrange(date)
# plot daily distance over time as social group means
ggplot(sum7, aes(date, dist, ymin = lower, ymax = upper)) +
geom_path() +
geom_ribbon(alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Daily distance moved (m)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()+
geom_vline(aes(xintercept = as_date("2023-06-07")), colour = "purple")
# test difference pre and post reinforcement
m7 <- glmmTMB(daily_dist ~ period + (1|id),
data = datam7,
na.action = "na.fail")
summary(m7)
# read in data and filter to residents for reinforcement period
datam7 <- read.csv("results/daily_distance_moved.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort"))) %>%
# select only residents
filter(cohort == "Resident") %>%
# format dates as dates and numeric and a quadratic term
mutate(date = as_date(date_bird)) %>%
# limit to reinforcement period
filter(date %in% dates) %>%
# add column for pre or post release
mutate(period = factor(ifelse(date %in% pre_dates,
"pre-reinforcement", "post-reinforcement"),
levels  = c("pre-reinforcement", "post-reinforcement")))
# create social group means
sum7 <- datam7 %>%
group_by(date) %>%
summarise(dist = mean(daily_dist),
upper = dist + std.error(daily_dist),
lower = dist - std.error(daily_dist)) %>%
arrange(date)
# plot daily distance over time as social group means
ggplot(sum7, aes(date, dist, ymin = lower, ymax = upper)) +
geom_path() +
geom_ribbon(alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Daily distance moved (m)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()+
geom_vline(aes(xintercept = as_date("2023-06-07")), colour = "purple")
# social group membership
club <- c("Rowan", "Rory", "Fauna", "Zeus", "Rocky", "Sofi", "Loki", "Avery", "Maeve")
# define reinforcer date period
rein_dates <- seq.Date(from = as_date("2023-06-11"), to = as_date("2023-08-05"), by = "day")
# read in data and filter to reinforcement period
datam1 <- read.csv("results/daily_distance_moved.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort"))) %>%
# format dates as dates
mutate(date = as_date(date_bird)) %>%
# limit to reinforcement period
filter(date %in% rein_dates) %>%
# add a time elapsed post-release variable
mutate(elapsed = as.numeric(date - as_date("2023-06-10"))) %>%
# add column for membership to social group
mutate(social = ifelse(id %in% club, "Reinforcer - exclusive", ifelse(cohort == "Resident", "Resident", "Reinforcer - mixed"))) %>%
# convert group to factor and set resident as the intercept
mutate(social = factor(social, levels = c("Resident", "Reinforcer - mixed", "Reinforcer - exclusive"))) %>%
# add quadratic term for time
mutate(elapsed2 = elapsed^2)
# create social group means
sum1 <- datam1 %>%
group_by(date, social) %>%
summarise(dist = mean(daily_dist),
upper = dist + std.error(daily_dist),
lower = dist - std.error(daily_dist)) %>%
arrange(date)
# plot daily distance over time as social group means
ggplot(sum1, aes(date, dist, ymin = lower, ymax = upper)) +
geom_path(aes(colour = social)) +
geom_ribbon(aes(fill = social), alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Daily distance moved (m)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()
# distribution of movement data
hist(datam1$daily_dist)
ggqqplot(datam1$daily_dist)
# test difference between the groups with interaction of time as a quadratic
m1 <- glmmTMB(daily_dist ~ social * (scale(elapsed) + scale(elapsed2))+ (1|id),
data = datam1,
na.action = "na.fail")
# model selection
dm1 <- dredge(m1)
# print best model on AICc
best1 <- get.models(dm1, delta==0)[[1]]
summary(best1)
# check model
check_model(best1)
# post-hoc comparison of slopes
emtrends(best1, pairwise ~ social, var = "elapsed")
# plot effects
plot_model(best1)
# marginal effects
pred1 <- predict_response(best1, terms = c("elapsed", "social"))
# plot predictions
ggplot(pred1, aes(x, predicted, fill = group, ymin = conf.low, ymax = conf.high)) +
geom_line(aes(colour = group))+
geom_ribbon(alpha = 0.2)+
xlab("Days post-reinforcement") +
ylab("Predicted values of daily distance moved (m)") +
theme_minimal()+
scale_fill_viridis_d()+
scale_colour_viridis_d()
dm1
# plot daily distance over time as social group means
ggplot(sum7, aes(date, dist, ymin = lower, ymax = upper)) +
geom_path() +
geom_ribbon(alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Daily distance moved (m)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()+
geom_vline(aes(xintercept = as_date("2023-06-07")), colour = "purple")
# read in data and filter to reinforcement period
datam1 <- read.csv("results/daily_distance_moved.csv") %>%
# add metadata
left_join(dplyr::select(metadata, c("id", "cohort"))) %>%
# format dates as dates
mutate(date = as_date(date_bird)) %>%
# limit to reinforcement period
filter(date %in% rein_dates) %>%
# add a time elapsed post-release variable
mutate(elapsed = as.numeric(date - as_date("2023-06-10"))) %>%
# add column for membership to social group
mutate(social = ifelse(id %in% club, "Reinforcer - exclusive", ifelse(cohort == "Resident", "Resident", "Reinforcer - mixed"))) %>%
# convert group to factor and set resident as the intercept
mutate(social = factor(social, levels = c("Resident", "Reinforcer - mixed", "Reinforcer - exclusive"))) %>%
# add quadratic term for time
mutate(elapsed2 = elapsed^2)
# create social group means
sum1 <- datam1 %>%
group_by(date, social) %>%
summarise(dist = mean(daily_dist),
upper = dist + std.error(daily_dist),
lower = dist - std.error(daily_dist)) %>%
arrange(date)
# plot daily distance over time as social group means
ggplot(sum1, aes(date, dist, ymin = lower, ymax = upper)) +
geom_path(aes(colour = social)) +
geom_ribbon(aes(fill = social), alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Daily distance moved (m)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()
# distribution of movement data
hist(datam1$daily_dist)
ggqqplot(datam1$daily_dist)
# test difference between the groups with interaction of time as a quadratic
m1 <- glmmTMB(daily_dist ~ social * (scale(elapsed) + scale(elapsed2))+ (1|id),
data = datam1,
na.action = "na.fail")
# model selection
dm1 <- dredge(m1)
dm1
# best model on AICc
best1 <- get.models(dm1, delta==0)[[1]]
summary(best1)
# check model
check_model(best1)
# post-hoc comparison of slopes
emtrends(best1, pairwise ~ social, var = "elapsed")
# plot effects
plot_model(best1)
# marginal effects
pred1 <- predict_response(best1, terms = c("elapsed", "social"))
# plot predictions
ggplot(pred1, aes(x, predicted, fill = group, ymin = conf.low, ymax = conf.high)) +
geom_line(aes(colour = group))+
geom_ribbon(alpha = 0.2)+
xlab("Days post-reinforcement") +
ylab("Predicted values of daily distance moved (m)") +
theme_minimal()+
scale_fill_viridis_d()+
scale_colour_viridis_d()
anova(best1)
aov(best1)
summary(aov(best1))
# post-hoc comparison of means
emmeans(best1, pairwise ~ social, type = "response")
# post-hoc comparison of slopes
emtrends(best1, pairwise ~ social, var = "elapsed")
dm1
View(dm1)
# parsimonious model where delta <2 and fewest predictors
best1 <- get.models(dm1)[[24]]
# parsimonious model where delta <2 and fewest predictors
best1 <- dm1[[24]]
# model selection
dm1 <- dredge(m1) %>%
row_to_names()
# model selection
dm1 <- dredge(m1) %>%
rownames_to_column()
View(dm1)
# model selection
dm1 <- dredge(m1) %>%
rownames_to_column(var = "model")
# model selection
dm1 <- dredge(m1)
# parsimonious model where delta <2 and fewest predictors
best1 <- get.models(dm1, delta<2)
View(best1)
best1[["32"]]
best1[["24"]]
# parsimonious model where delta <2 and fewest predictors
best1 <- get.models(dm1, delta<2)[["24"]]
View(best1)
?dredge
# model selection
dm1 <- dredge(m1) %>%
get.models(dm1, delta<2)
# model selection
dm1 <- dredge(m1) %>%
get.models(delta<2)
View(dm1)
dm1
# check model
check_model(best1)
# post-hoc comparison of means
emmeans(best1, pairwise ~ social, type = "response")
best1
summary(best1)
# marginal effects
pred1 <- predict_response(best1, terms = c("elapsed", "social"))
# plot predictions
ggplot(pred1, aes(x, predicted, fill = group, ymin = conf.low, ymax = conf.high)) +
geom_line(aes(colour = group))+
geom_ribbon(alpha = 0.2)+
xlab("Days post-reinforcement") +
ylab("Predicted values of daily distance moved (m)") +
theme_minimal()+
scale_fill_viridis_d()+
scale_colour_viridis_d()
# plot daily distance over time as social group means
ggplot(sum1, aes(date, dist, ymin = lower, ymax = upper)) +
geom_path(aes(colour = social)) +
geom_ribbon(aes(fill = social), alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Daily distance moved (m)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()
# parsimonious model where delta <2 and fewest predictors
best1 <- get.models(dm1, delta<2)[["32"]]
# model selection
dm1 <- dredge(m1)
# parsimonious model where delta <2 and fewest predictors
best1 <- get.models(dm1, delta<2)[["32"]]
# marginal effects
pred1 <- predict_response(best1, terms = c("elapsed", "social"))
# plot predictions
ggplot(pred1, aes(x, predicted, fill = group, ymin = conf.low, ymax = conf.high)) +
geom_line(aes(colour = group))+
geom_ribbon(alpha = 0.2)+
xlab("Days post-reinforcement") +
ylab("Predicted values of daily distance moved (m)") +
theme_minimal()+
scale_fill_viridis_d()+
scale_colour_viridis_d()
# parsimonious model where delta <2 and fewest predictors (eyeball this)
best1 <- get.models(dm1)[["24"]]
# parsimonious model where delta <2 and fewest predictors (eyeball this)
best1 <- get.models(dm1, subset = "NA")[[24]]
# parsimonious model where delta <2 and fewest predictors (eyeball this)
best1 <- get.models(dm1, subset == "NA")[[24]]
# parsimonious model where delta <2 and fewest predictors (eyeball this)
best1 <- get.models(dm1, subset = NA)[[24]]
# parsimonious model where delta <2 and fewest predictors (eyeball this)
best1 <- get.models(dm1, subset = NA)
View(best1)
best1[["24"]]
# parsimonious model where delta <2 and fewest predictors (eyeball this)
best1 <- get.models(dm1, subset = NA)[["24"]]
# summary
summary(best1)
# post-hoc comparison of means
emmeans(best1, pairwise ~ social, type = "response")
# post-hoc comparison of slopes
emtrends(best1, pairwise ~ social, var = "elapsed")
