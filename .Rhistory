?st_distance
# calculate the distance between successive points
dist <- as.numeric(st_distance(points$geometry, points$previous, by_element = TRUE))
dist
# calculate the distance between successive points
temp <- points %>%
mutate(distance = as.numeric(st_distance(points$geometry, points$previous, by_element = TRUE)))
View(temp)
# calculate distance between successive roosts per bird
birds <- unique(roosts$id)
distance_roosts <- data.frame()
for(i in 1:length(birds)){
# subset to individual
points <- filter(roosts, id==birds[i]) %>%
# date as posix
mutate(date = as.POSIXct(date, format = "%Y-%m-%d")) %>%
#add lag column for geometry comparison
mutate(previous = lag(geometry))
# allocate the release location as the first location
release <- st_sfc(st_point(c(274423.45, 5801912.85) ), crs = 32755) %>%
st_as_sf()
points$previous[1] <- release$x
# calculate the distance between successive points
temp <- points %>%
mutate(distance = as.numeric(st_distance(points$geometry, points$previous, by_element = TRUE)))
# write out
distance_roosts <- rbind(distance_roosts, temp)
# alert me
print(paste("finished calculation for ", birds[i], sep = ""))
}
View(distance_roosts)
View(roosts)
# calculate distance between successive roosts per bird
birds <- unique(roosts$id)
distance_roosts <- data.frame()
for(i in 1:length(birds)){
# subset to individual
points <- filter(roosts, id==birds[i]) %>%
# date as posix
mutate(date = as.POSIXct(date, format = "%Y-%m-%d")) %>%
#add lag column for geometry comparison
mutate(previous = lag(geometry))
# allocate the release location as the first location
release <- st_sfc(st_point(c(274423.45, 5801912.85) ), crs = 32755) %>%
st_as_sf()
points$previous[1] <- release$x
# calculate the distance between successive points
temp <- points %>%
mutate(distance_previous = as.numeric(st_distance(points$geometry, points$previous, by_element = TRUE)))
# write out
distance_roosts <- rbind(distance_roosts, temp)
}
View(distance_roosts)
# calculate distance between successive roosts per bird
birds <- unique(roosts$id)
distance_roosts <- data.frame()
for(i in 1:length(birds)){
# subset to individual
points <- filter(roosts, id==birds[i]) %>%
# ensure arranged by date
arrange(date) %>%
# date as posix
mutate(date = as.POSIXct(date, format = "%Y-%m-%d")) %>%
#add lag column for geometry comparison
mutate(previous = lag(geometry))
# allocate the release location as the first location
release <- st_sfc(st_point(c(274423.45, 5801912.85) ), crs = 32755) %>%
st_as_sf()
points$previous[1] <- release$x
# calculate the distance between successive points
temp <- points %>%
mutate(distance_previous = as.numeric(st_distance(points$geometry, points$previous, by_element = TRUE)))
# write out
distance_roosts <- rbind(distance_roosts, temp)
}
# plot roosts with colour as distance from previous
ggplot()+
geom_sf(data = distance_roosts, aes(geometry = geometry))
# plot roosts with colour as distance from previous
ggplot()+
geom_sf(data = distance_roosts, aes(geometry = geometry, fill = distance_previous))
# plot roosts with colour as distance from previous
ggplot()+
geom_sf(data = distance_roosts, aes(geometry = geometry, colour = distance_previous))
# Google API key for ggmaps
ggmap::register_google(key = readChar("apikey_google.txt", nchars = file.info("apikey_google.txt")$size))
map_z15 <- get_map(c(144.4380, -37.9000), zoom=15, maptype = "satellite")
# plot roosts with colour as distance from previous
ggmap(map_z15)+
geom_sf(data = distance_roosts, inherit.aes = FALSE,
aes(geometry = geometry, colour = distance_previous))+
scale_colour_viridis_c()+
theme_void()
# plot roosts with colour as distance from previous
ggmap(map_z15)+
geom_sf(data = distance_roosts,
aes(geometry = geometry, colour = distance_previous))+
scale_colour_viridis_c()+
theme_void()
# plot roosts with colour as distance from previous
ggmap(map_z15)+
geom_sf(data = distance_roosts, inherit.aes = FALSE,
aes(geometry = geometry, colour = distance_previous))+
scale_colour_viridis_c()+
theme_void()
# plot roosts with colour as distance from previous
ggmap(map_z15)+
coord_sf()+
geom_sf(data = distance_roosts, inherit.aes = FALSE,
aes(geometry = geometry, colour = distance_previous))+
scale_colour_viridis_c()+
theme_void()
View(distance_roosts)
# plot roosts with colour as distance from previous
ggmap(map_z15)+
geom_sf(data = select(distance_roosts, !"previous"), inherit.aes = FALSE,
aes(colour = distance_previous))+
scale_colour_viridis_c()+
theme_void()
# plot roosts with colour as distance from previous
ggplot()+
geom_sf(data = select(distance_roosts, !"previous"), inherit.aes = FALSE,
aes(colour = distance_previous))+
scale_colour_viridis_c()+
theme_void()
# plot roosts with colour as distance from previous
ggplot()+
geom_sf(data = distance_roosts, inherit.aes = FALSE,
aes(colour = distance_previous))+
scale_colour_viridis_c()+
theme_void()
View(distance_roosts)
View(temp)
# calculate the distance between successive points
temp <- points %>%
mutate(distance_previous = as.numeric(st_distance(points$geometry, points$previous, by_element = TRUE))) %>%
# drop 'previous' geometry
select(!"previous")
View(temp)
# calculate the distance between successive points
temp <- points %>%
mutate(distance_previous = as.numeric(st_distance(points$geometry, points$previous, by_element = TRUE))) %>%
# drop 'previous' geometry
select(!"previous") %>%
# convert geometry to data frame
st_coordinates() %>%
as.data.frame() %>%
cbind(st_drop_geometry(points), .) %>%
clean_names()
View(temp)
# calculate the distance between successive points
temp <- points %>%
mutate(distance_previous = as.numeric(st_distance(points$geometry, points$previous, by_element = TRUE))) %>%
# convert geometry to data frame
st_coordinates() %>%
as.data.frame() %>%
cbind(st_drop_geometry(points), .) %>%
st_drop_geometry() %>%
clean_names()
View(temp)
View(temp)
# calculate the distance between successive points
temp <- points %>%
mutate(distance_previous = as.numeric(st_distance(points$geometry, points$previous, by_element = TRUE))) %>%
# convert geometry to data frame
st_coordinates()
View(temp)
# calculate the distance between successive points
temp <- points %>%
mutate(distance_previous = as.numeric(st_distance(points$geometry, points$previous, by_element = TRUE))) %>%
# convert geometry to data frame
cbind(st_drop_geometry(points), .) %>%
st_drop_geometry() %>%
clean_names()
View(temp)
# calculate the distance between successive points
temp <- points %>%
mutate(distance_previous =
as.numeric(st_distance(points$geometry, points$previous, by_element = TRUE)))
View(temp)
coords <- st_coordinates(temp)
# calculate the distance between successive points
temp <- points %>%
mutate(distance_previous =
as.numeric(st_distance(points$geometry, points$previous, by_element = TRUE))) %>%
select(!"previous")
View(temp)
coords <- st_coordinates(temp)
View(temp)
out <- st_drop_geometry(temp)
View(out)
out <- st_drop_geometry(temp) %>%
cbind(coords)
View(out)
out <- st_drop_geometry(temp) %>%
cbind(coords) %>%
clean_names()
View(out)
# hist
hist(distance_roosts$distance_previous)
# calculate distance between successive roosts per bird
birds <- unique(roosts$id)
distance_roosts <- data.frame()
for(i in 1:length(birds)){
# subset to individual
points <- filter(roosts, id==birds[i]) %>%
# ensure arranged by date
arrange(date) %>%
# date as posix
mutate(date = as.POSIXct(date, format = "%Y-%m-%d")) %>%
#add lag column for geometry comparison
mutate(previous = lag(geometry))
# allocate the release location as the first location
release <- st_sfc(st_point(c(274423.45, 5801912.85) ), crs = 32755) %>%
st_as_sf()
points$previous[1] <- release$x
# calculate the distance between successive points
temp <- points %>%
mutate(distance_previous =
as.numeric(st_distance(points$geometry, points$previous, by_element = TRUE))) %>%
select(!"previous")
coords <- st_coordinates(temp)
out <- st_drop_geometry(temp) %>%
cbind(coords) %>%
clean_names()
# write out
distance_roosts <- rbind(distance_roosts, out)
}
# hist
hist(distance_roosts$distance_previous)
View(distance_roosts)
# plot roosts with colour as distance from previous
ggmap(map_z15)+
geom_point(data = distance_roosts, aes(x, y, colour = distance_previous))
# calculate the distance between successive points
temp <- points %>%
mutate(distance_previous =
as.numeric(st_distance(points$geometry, points$previous, by_element = TRUE))) %>%
select(!"previous")
View(temp)
# calculate distance between successive roosts per bird
birds <- unique(roosts$id)
distance_roosts <- data.frame()
for(i in 1:length(birds)){
# subset to individual
points <- filter(roosts, id==birds[i]) %>%
# ensure arranged by date
arrange(date) %>%
# date as posix
mutate(date = as.POSIXct(date, format = "%Y-%m-%d")) %>%
#add lag column for geometry comparison
mutate(previous = lag(geometry))
# allocate the release location as the first location
release <- st_sfc(st_point(c(274423.45, 5801912.85) ), crs = 32755) %>%
st_as_sf()
points$previous[1] <- release$x
# calculate the distance between successive points
temp <- points %>%
mutate(distance_previous =
as.numeric(st_distance(points$geometry, points$previous, by_element = TRUE))) %>%
select(!"previous")
# write out
distance_roosts <- rbind(distance_roosts, out)
}
View(distance_roosts)
distance_roosts <- data.frame()
for(i in 1:length(birds)){
# subset to individual
points <- filter(roosts, id==birds[i]) %>%
# ensure arranged by date
arrange(date) %>%
# date as posix
mutate(date = as.POSIXct(date, format = "%Y-%m-%d")) %>%
#add lag column for geometry comparison
mutate(previous = lag(geometry))
# allocate the release location as the first location
release <- st_sfc(st_point(c(274423.45, 5801912.85) ), crs = 32755) %>%
st_as_sf()
points$previous[1] <- release$x
# calculate the distance between successive points
out <- points %>%
mutate(distance_previous =
as.numeric(st_distance(points$geometry, points$previous, by_element = TRUE))) %>%
select(!"previous")
# write out
distance_roosts <- rbind(distance_roosts, out)
}
View(distance_roosts)
# transform to latlon for plotting
distance_roosts_latlon <- distance_roosts %>%
vect() %>%
project("EPSG:4326") %>%
st_as_sf()
View(distance_roosts_latlon)
# plot roosts with colour as distance from previous
ggmap(map_z15)+
geom_sf(data = distance_roosts, aes(colour = distance_previous), inherit.aes = FALSE)
# plot roosts with colour as distance from previous
ggmap(map_z15)+
geom_sf(data = distance_roosts_latlon, aes(colour = distance_previous), inherit.aes = FALSE)
# plot roosts with colour as distance from previous
ggmap(map_z15)+
geom_sf(data = distance_roosts_latlon, aes(colour = distance_previous), inherit.aes = FALSE)+
scale_colour_viridis_c()
# hist
hist(distance_roosts$distance_previous)
# transform to latlon for plotting
distance_roosts_latlon <- distance_roosts %>%
vect() %>%
project("EPSG:4326") %>%
st_as_sf() %>%
# and drop the insanely far Nutmeg point outside of the sanctuary
filter(distance_previous <3000)
# plot roosts with colour as distance from previous
ggmap(map_z15)+
geom_sf(data = distance_roosts_latlon, aes(colour = distance_previous), inherit.aes = FALSE)+
scale_colour_viridis_c()
# transform to latlon for plotting
distance_roosts_latlon <- distance_roosts %>%
vect() %>%
project("EPSG:4326") %>%
st_as_sf() %>%
# and drop the insanely far points outside of the sanctuary
filter(distance_previous <2000)
# plot roosts with colour as distance from previous
ggmap(map_z15)+
geom_sf(data = distance_roosts_latlon, aes(colour = distance_previous), inherit.aes = FALSE)+
scale_colour_viridis_c()
# transform to latlon for plotting
distance_roosts_latlon <- distance_roosts %>%
vect() %>%
project("EPSG:4326") %>%
st_as_sf()
# plot roosts with colour as distance from previous
ggplot()+
geom_sf(data = distance_roosts_latlon, aes(colour = distance_previous))+
scale_colour_viridis_c()
# plot roosts with colour as distance from previous
ggplot()+
geom_sf(data = distance_roosts_latlon, aes(colour = distance_previous))+
scale_colour_viridis_c()+
theme_void()+
facet_wrap(~id)
# plot roosts with colour as distance from previous
ggplot()+
geom_sf(data = distance_roosts_latlon, aes(colour = distance_previous))+
scale_colour_viridis_c()+
theme_void()
# transform to latlon for plotting
distance_roosts_latlon <- distance_roosts %>%
vect() %>%
project("EPSG:4326") %>%
st_as_sf() %>%
# drop the very far nutmeg outlier roost
filter(distance_previous <300-)
# transform to latlon for plotting
distance_roosts_latlon <- distance_roosts %>%
vect() %>%
project("EPSG:4326") %>%
st_as_sf() %>%
# drop the very far nutmeg outlier roost
filter(distance_previous <3000)
# plot roosts with colour as distance from previous
ggplot()+
geom_sf(data = distance_roosts_latlon, aes(colour = distance_previous))+
scale_colour_viridis_c()+
theme_void()
# transform to latlon for plotting
distance_roosts_latlon <- distance_roosts %>%
vect() %>%
project("EPSG:4326") %>%
st_as_sf() %>%
# drop the very far nutmeg outlier roost
filter(distance_previous <2000)
# plot roosts with colour as distance from previous
ggplot()+
geom_sf(data = distance_roosts_latlon, aes(colour = distance_previous))+
scale_colour_viridis_c()+
theme_void()
View(distance_roosts_latlon)
View(distance_roosts)
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# select only Nutmeg
filter(id == "Nutmeg") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC")) %>%
# Add date
mutate(date = as_date(time_local, tz = "Australia/Melbourne"))
# Read in cleaned data
nutmeg <- read.csv("data/data_cleaned.csv") %>%
# select only Nutmeg
filter(id == "Nutmeg") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC")) %>%
# Add date
mutate(date = as_date(time_local, tz = "Australia/Melbourne"))
View(data)
# Plot
ggplot()+
geom_point(nutmeg, aes(lat, lon))
# Plot
ggplot()+
geom_point(data=nutmeg, aes(lat, lon))
View(nutmeg)
# Plot
ggplot()+
geom_point(data=nutmeg, aes(longitude, latitude))
# Background map MR zones 1 and 2
map_z13 <- get_map(c(144.4380, -37.9000), zoom=13, maptype = "satellite")
# Plot
ggmap(map_z13)+
geom_point(data=nutmeg, aes(longitude, latitude))+
geom_path(data=nutmeg, aes(longitude, latitude))
# Plot
ggmap(map_z13)+
geom_point(data=nutmeg, aes(longitude, latitude, colour = date))+
geom_path(data=nutmeg, aes(longitude, latitude))
# Plot
ggmap(map_z13)+
geom_point(data=nutmeg, aes(longitude, latitude, colour = date), alpha = 0.8)+
scale_colour_viridis_c()+
geom_path(data=nutmeg, aes(longitude, latitude, colour = "white"), alpha = 0.4)+
theme_void()
# Plot
ggmap(map_z13)+
geom_point(data=nutmeg, aes(longitude, latitude, colour = date), alpha = 0.8)+
scale_colour_viridis_c()+
geom_path(data=nutmeg, aes(longitude, latitude), colour = "white", alpha = 0.4)+
theme_void()
View(nutmeg)
View(nutmeg)
# plot roosts with colour as distance from previous
ggplot()+
geom_sf(data = distance_roosts_latlon, aes(colour = distance_previous))+
scale_colour_viridis_c()+
theme_void()
# plot on map
ggmap(map_z15)+
geom_sf(data = distance_roosts_latlon, aes(colour = distance_previous), inherit.aes = FALSE)+
scale_colour_viridis_c()
View(distance_roosts_latlon)
View(distance_roosts_latlon)
View(distance_roosts)
View(distance_roosts_latlon)
# read in day data
data_day <- read.csv("data/data_clean_day.csv")
View(data_day)
# plot density to get an idea of roost locations
ggplot()+
geom_density_2d(data = data_day, aes(longtidue, latitude, colour = id))
# Packages
pacman::p_load(amt, atlastools, beepr, ggfortify, ggmap, ggnewscale, ggpubr, ggridges, janitor, lme4, lmerTest, move, scattermore, sf, spThin, suncalc, survival, survminer, terra, tidyterra, tidyverse)
# plot density to get an idea of roost locations
ggplot()+
geom_density_2d(data = data_day, aes(longtidue, latitude, colour = id))
# plot density to get an idea of roost locations
ggplot()+
geom_density_2d(data = data_day, aes(longitude, latitude, colour = id))
warnings()
# read in day data
data_day <- read.csv("data/data_clean_day.csv") %>%
filter(id == "Nutmeg")
# plot density to get an idea of roost locations
ggplot()+
geom_density_2d(data = data_day, aes(longitude, latitude, colour = date))
# plot density to get an idea of roost locations
ggplot()+
geom_density_2d(data = data_day, aes(longitude, latitude, colour = as.Date(date)))+
theme_void()
# plot density to get an idea of roost locations
ggplot()+
geom_density_2d(data = data_day, aes(longitude, latitude, group = as.Date(date), colour = as.Date(date)))+
theme_void()
# Google API key for ggmaps
ggmap::register_google(key = readChar("apikey_google.txt", nchars = file.info("apikey_google.txt")$size))
# Background map MR zones 1 and 2
map_z13 <- get_map(c(144.4380, -37.9000), zoom=13, maptype = "satellite")
# plot density to get an idea of roost locations
ggmap(map_z13)+
geom_density_2d(data = data_day,
aes(longitude, latitude, group = as.Date(date), colour = as.Date(date)))+
theme_void()
# plot density to get an idea of roost locations
ggmap(map_z13)+
geom_density_2d(data = data_day,
aes(longitude, latitude, group = as.Date(date), colour = as.Date(date)))+
scale_colour_viridis_c()+
theme_void()
map_z14 <- get_map(c(144.4380, -37.9000), zoom=14, maptype = "satellite")
map_z15 <- get_map(c(144.4380, -37.9000), zoom=15, maptype = "satellite")
# plot density to get an idea of roost locations
ggmap(map_z13)+
geom_density_2d_filled(data = data_day,
aes(longitude, latitude, group = as.Date(date), colour = as.Date(date)))+
scale_colour_viridis_c()+
theme_void()
# read in day data
data_day <- read.csv("data/data_clean_day.csv") %>%
filter(id == "Aurora")
# plot density to get an idea of roost locations
ggmap(map_z15)+
geom_density_2d(data = data_day,
aes(longitude, latitude, group = as.Date(date), colour = as.Date(date)))+
scale_colour_viridis_c()+
theme_void()
