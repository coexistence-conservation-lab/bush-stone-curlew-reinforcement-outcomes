c(-37.905958, 144.430140), # Z1 southern boundary bend 3
c(-37.905486, 144.429479), # Z1 southern boundary bend 4
c(-37.904649, 144.427566), # Z1 SW corner
c(-37.897319, 144.429048)  # S end of NW diagonal
) %>%  vect(type = "polygons", crs = "EPSG:4326") %>% t() %>%
# add a buffer for GPS accuracy of 30m
buffer(40)
# Convert df to points
points <- data_smooth %>%
filter(id=="Fauna") %>%
vect(geom = c("location_long", "location_lat"), crs = "EPSG:4326")
# Find points outside polygons
outside <- points[!relate(points, mtr, "intersects")] %>%
as.data.frame(geom = "XY")
# Plot points outside polygon
ggmap(map_z15)+
geom_point(data=outside, aes(x, y, colour = speed_out), size = 2)+
geom_spatvector(data=mtr, inherit.aes = FALSE, colour = "white", fill = NA)+
scale_colour_viridis_c()+
theme_void()
# Plot points outside polygon
ggmap(map_z15)+
geom_point(data=outside, aes(x, y, colour = speed_out), size = 3)+
geom_spatvector(data=mtr, inherit.aes = FALSE, colour = "white", fill = NA)+
scale_colour_viridis_c()+
theme_void()
# Define fence polygons (zones 1 and 2)
mtr <- rbind(
## zone 1
c(-37.897319, 144.429048), # S end of NW diagonal
c(-37.894066, 144.432334), # N end of NW diagonal, i.e. NW corner
c(-37.894749, 144.438305), # bend at main gate
c(-37.894693, 144.438324), # main gate
c(-37.894803, 144.439214), # bend before N Z1/2 gate
c(-37.894718, 144.439337), # N Z1/2 gate, i.e. NE corner
## zone 2
c(-37.892433, 144.440236), # N boundary internal aviary/Z2 i.e. NW corner
c(-37.892803, 144.443374), # Z2 northern boundary bend 1
c(-37.893634, 144.444076), # Z2 northern boundary bend 2
c(-37.894585, 144.447739), # N end of Z2/Z3 boundary, i.e. NE corner
c(-37.896515, 144.446789), # Z2/Z3 boundary bend 1
c(-37.896726, 144.446099), # Z2/Z3 boundary bend 2
c(-37.897964, 144.445706), # Z2/Z3 boundary bend 3
c(-37.899960, 144.444517), # S end of Z2/Z3 boundary, i.e. SE corner
c(-37.899908, 144.444288), # Z2/btrw NE corner
c(-37.898280, 144.440662), # Z1/btrw pen NW corner
## zone 1
c(-37.900692, 144.440368), # Z1/btrw SW corner
c(-37.902610, 144.443002), # Z1/btrw SE corner
c(-37.909538, 144.439648), # Z1 SE corner
c(-37.908999, 144.434965), # Z1 southern boundary bend 1
c(-37.907537, 144.433359), # Z1 southern boundary bend 2
c(-37.905958, 144.430140), # Z1 southern boundary bend 3
c(-37.905486, 144.429479), # Z1 southern boundary bend 4
c(-37.904649, 144.427566), # Z1 SW corner
c(-37.897319, 144.429048)  # S end of NW diagonal
) %>%  vect(type = "polygons", crs = "EPSG:4326") %>% t() %>%
# add a buffer for GPS accuracy of 30m
buffer(30)
# Find points outside polygons
outside <- points[!relate(points, mtr, "intersects")] %>%
as.data.frame(geom = "XY")
# Plot points outside polygon
ggmap(map_z15)+
geom_point(data=outside, aes(x, y, colour = speed_out), size = 3)+
geom_spatvector(data=mtr, inherit.aes = FALSE, colour = "white", fill = NA)+
scale_colour_viridis_c()+
theme_void()
# Plot points outside polygon
ggmap(map_z15)+
geom_point(data=outside, aes(x, y), colour = "yellow", size = 3)+
geom_spatvector(data=mtr, inherit.aes = FALSE, colour = "white", fill = NA)+
scale_colour_viridis_c()+
theme_void()
# Plot points outside polygon
ggmap(map_z15)+
geom_point(data=outside, aes(x, y), colour = "yellow", alpha = 0.7, size = 3)+
geom_spatvector(data=mtr, inherit.aes = FALSE, colour = "white", fill = NA)+
scale_colour_viridis_c()+
theme_void()
# Import data from movebank
data_raw <- readr::read_csv(fs::dir_ls(path = "Input/movebank")) %>%
clean_names() %>%
# Time in posix format
mutate(datetime = as.POSIXct(study_local_timestamp, "%Y-%m-%d %H:%M:%S"),
date = as.Date(datetime)) %>%
# Remove days after end of tracking period - for Marmalade whose GPS not removed
filter(date < "2024-01-12") %>%
rename(id = individual_local_identifier)
# Import data from movebank
data_raw <- readr::read_csv(fs::dir_ls(path = "movebank")) %>%
clean_names() %>%
# Time in posix format
mutate(datetime = as.POSIXct(study_local_timestamp, "%Y-%m-%d %H:%M:%S"),
date = as.Date(datetime)) %>%
# Remove days after end of tracking period - for Marmalade whose GPS not removed
filter(date < "2024-01-12") %>%
rename(id = individual_local_identifier)
# Background map MR zones 1 and 2
map_z13 <- get_map(c(144.4380, -37.9000), zoom=13, maptype = "satellite")
map_z14 <- get_map(c(144.4380, -37.9000), zoom=14, maptype = "satellite")
map_z15 <- get_map(c(144.4380, -37.9000), zoom=15, maptype = "satellite")
# read in FABDEM
fabdem <- rast("S38E144_FABDEM_V1-0.tif")
# convert data to spatial points
coords <- data_raw %>%
vect(geom = c("location_long", "location_lat"), crs = "EPSG:4326")
# Extract dem and add to dataframe
data_alt <- data_raw %>%
mutate(terra::extract(fabdem, coords, ID = FALSE)) %>%
rename(elevation = "S38E144_FABDEM_V1-0") %>%
# calculate flight height
mutate(altitude = height_above_msl - elevation)
# Apply quality covariate filters
data_qfilt <- data_alt %>%
filter(gps_satellite_count >= 4) %>%
filter(gps_hdop <=2) %>%
filter(altitude < 60 & altitude >-10)
length(data_raw)
nrow(data_row)
# Filtering effect
print("% original data removed:", (nrow(data_raw)-)nrow(data_qfilt)/nrow(data_raw))
# Filtering effect
print("% original data removed:", (nrow(data_raw)-nrow(data_qfilt)/nrow(data_raw))
)
nrow(data_raw)-nrow(data_qfilt)/nrow(data_raw)
nrow(data_raw)-nrow(data_qfilt
)
nrow(data_raw)-nrow(data_qfilt)
nrow(data_raw)-nrow(data_qfilt) / nrow(data_raw)
(nrow(data_raw)-nrow(data_qfilt)) / nrow(data_raw)
((nrow(data_raw)-nrow(data_qfilt)) / nrow(data_raw))*100
# Filtering effect
print(paste("% original data removed:", ((nrow(data_raw)-nrow(data_qfilt)) / nrow(data_raw))*100))
# Filtering effect
print(paste("% original data removed:", sprintf(((nrow(data_raw)-nrow(data_qfilt)) / nrow(data_raw))*100)))
# Filtering effect
print(paste("% original data removed:", round2((nrow(data_raw)-nrow(data_qfilt)) / nrow(data_raw))*100))
# Filtering effect
print(paste("% original data removed:", round((nrow(data_raw)-nrow(data_qfilt)) / nrow(data_raw))*100))
# Filtering effect
print(paste("% original data removed:", round(((nrow(data_raw)-nrow(data_qfilt)) / nrow(data_raw))*100)))
# Filtering effect
print(paste("Percentage original data removed:", round(((nrow(data_raw)-nrow(data_qfilt)) / nrow(data_raw))*100), "%"))
# Filtering effect
print(paste("Percentage original data removed: ", round(((nrow(data_raw)-nrow(data_qfilt)) / nrow(data_raw))*100), "%", sep = ""))
# Apply quality covariate filters
data_qfilt <- data_alt %>%
filter(gps_satellite_count >= 4) %>%
filter(gps_hdop <=2) %>%
filter(altitude < 60) %>%
filter(altitude >-10)
# Append turning angle, incoming/outgoing/delta speeds to data frame per bird
birds <- unique(data_raw$id)
data_speed <- data.frame()
for(i in 1:length(birds)){
subset <- filter(data_qfilt, id == birds[i])
temp <- subset %>%
mutate(speed_in  = atl_get_speed(
data = subset, x = "utm_easting", y = "utm_northing", time = "datetime", type = c("in")),
speed_out = atl_get_speed(
data = subset, x = "utm_easting", y = "utm_northing", time = "datetime", type = c("out")),
angle = atl_turning_angle(
data = subset, x = "utm_easting", y = "utm_northing", time = "datetime"),
speed_delta = abs(speed_in - speed_out)
)
data_speed <- rbind(data_speed, temp)
}
# Apply turning angle and speed filtering
data_sfilt <- data_speed %>%
filter(speed_in < 2) %>%
filter(speed_delta < 0.4) %>%
filter(!(speed_out >0.5 & angle <90))
# Filtering effect
print(paste("Percentage original data removed: ", round(((nrow(data_qfilt)-nrow(data_sfilt)) / nrow(data_qfilt))*100), "%", sep = ""))
# Apply median smooth by bird
data_smooth <- data.frame()
for(i in 1:length(birds)){
subset <- filter(data_sfilt, id == birds[i])
temp <- atl_median_smooth(data = subset, x = "location_lat", y = "location_long",
time = "datetime", moving_window = 3)
data_smooth <- rbind(data_smooth, temp)
}
# Plot smoothed data
ggmap(map_z13)+
geom_path(data=data_smooth, aes(location_long, location_lat, colour = id), alpha = .7)+
scale_colour_viridis_c()+
theme_void()
# Plot smoothed data
ggmap(map_z13)+
geom_path(data=data_smooth, aes(location_long, location_lat, colour = id), alpha = .7)+
scale_colour_viridis_d()+
theme_void()
# Plot smoothed data
ggmap(map_z14)+
geom_path(data=data_smooth, aes(location_long, location_lat, colour = id), alpha = .7)+
scale_colour_viridis_d()+
theme_void()
names(data_smooth)
data <- data_smooth() %>%
select(c("location_long", "location_long"))
data <- data_smooth %>%
select(c("location_long", "location_long"))
data <- data_smooth %>%
select(c("location_long", "location_lat"))
View(data)
data <- data_smooth %>%
select(c("id", "datetime","location_long", "location_lat", "utm_easting", "utm_northing", "utm_zone", "acceleration_raw_x", "acceleration_raw_y", "acceleration_raw_z", "external_temperature", "altitude"))
write.csv(data, "data/data_cleaned.csv", row.names = FALSE)
View(data)
View(data_smooth)
data <- data_smooth %>%
select(c("id", "datetime", "timestamp", "location_long", "location_lat", "utm_easting", "utm_northing", "utm_zone", "acceleration_raw_x", "acceleration_raw_y", "acceleration_raw_z", "external_temperature", "altitude")) %>%
rename(longitude = location_long,
latitude = location_lat,
time_local = datetime,
time_utc = timestamp)
View(data)
write.csv(data, "data/data_cleaned.csv", row.names = FALSE)
test <- read.csv("data/data_cleaned.csv")
View(test)
data <- read.csv("data/data_cleaned.csv")
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, "%Y-%m-%d %H:%M:%S"),
time_utc = as.POSIXct(time_utc, "%Y-%m-%d %H:%M:%S"))
View(data)
?as.POSIXct
data <- read.csv("data/data_cleaned.csv")
temp <- data %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local),
time_utc = as.POSIXct(time_utc))
View(temp)
View(data)
temp <- data %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC"))
View(temp)
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC"))
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC"))
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC"),
date = as.Date(time_local))
# Summary statistic: number of tracked days
length(unique(data$date))
# Summary statistic: total number of tracked days per bird
summary <- data %>%
group_by(id) %>%
summarise(unique(date))
View(summary)
# Summary statistic: total number of tracked days per bird
summary <- data %>%
group_by(id) %>%
summarise(length(unique(date)))
# Summary statistic: total number of tracked days per bird
data %>%
group_by(id) %>%
summarise(length(unique(date)))
# Summary statistic: total number of tracked days per bird
print(n=35)
# Summary statistic: total number of tracked days per bird
print(data %>%
group_by(id) %>%
summarise(length(unique(date))), n=35)
View(summary)
sum())
summarise(length(unique(date)
summarise(length(unique(date))
summarise(length(unique(date))
temp <- data %>%
temp <- data %>%
group_by(id) %>%
summarise(length(unique(date)))
View(temp)
temp <- data %>%
group_by(id) %>%
summarise(length(unique(date))) %>%
sum(2)
names(temp)
temp <- data %>%
group_by(id) %>%
summarise(length(unique(date))) %>%
sum(length(unique(date)))
temp <- data %>%
group_by(id) %>%
summarise(days = length(unique(date))) %>%
summarise()
View(temp)
temp <- data %>%
group_by(id) %>%
summarise(days = length(unique(date))) %>%
summarise(birddays = sum(days))
View(temp)
print(data %>%
group_by(id) %>%
summarise(days = length(unique(date))) %>%
summarise(birddays = sum(days)))
# Summary statistic: total number of tracked days per bird
print(data %>%
group_by(id) %>%
summarise(length(unique(date))), n=35)
View(data)
# Packages
pacman::p_load(amt, atlastools, beepr, janitor, ggmap, sf, terra, tidyterra, tidyverse)
# Make amt format tracks
track <- data %>%
make_track(x_ = utm_easting, y_ = utm_northing, t_ = time_local, id = id)
# Make amt format tracks
track <- data %>%
make_track(.x = utm_easting, .y = utm_northing, .t = time_local, id = id)
# Make amt format tracks
track <- data %>%
na.rm()
# Make amt format tracks
track <- data %>%
na.omit()
# Make amt format tracks
track <- data %>%
na.omit() %>%
make_track(.x = utm_easting, .y = utm_northing, .t = time_local, id = id)
summarize_sampling_rate(track)
View(track)
View(track)
# Make amt format tracks
track <- data %>%
na.omit() %>%
make_track(.x = utm_easting, .y = utm_northing, .t = time_local, id = id) %>%
# add step length
mutate(step = step_lengths())
# Make amt format tracks
track <- data %>%
na.omit() %>%
make_track(.x = utm_easting, .y = utm_northing, .t = time_local, id = id) %>%
# add step length
mutate(step = step_lengths(track))
View(track)
# Make amt format tracks
test <- data %>%
na.omit() %>%
make_track(.x = utm_easting, .y = utm_northing, .t = time_local, id = id) %>%
# add step length
mutate(step = step_lengths(test))
# Step length density
ggplot() +
geom_density(aes(step, fill = factor(id)), alpha = 0.4)+
scale_colour_viridis_d()+
theme_bw()
# Step length density
ggplot() +
geom_density(aes(step, fill = factor(id)), alpha = 0.4)+
scale_colour_viridis_d()+
theme_bw()
# Step length density
ggplot() +
geom_density(aes(step, fill = id), alpha = 0.4)+
scale_colour_viridis_d()+
theme_bw()
# Step length density
ggplot(track) +
geom_density(aes(step, fill = id), alpha = 0.4)+
scale_colour_viridis_d()+
theme_bw()
map_z15 <- get_map(c(144.4380, -37.9000), zoom=15, maptype = "satellite")
map_z14 <- get_map(c(144.4380, -37.9000), zoom=14, maptype = "satellite")
# plot step length on map to see if it makes sense - testing with Marmalade
ggmap(map_z14)+
geom_path(data = filter(data, id == "Marmalade", aes(latitude, longitude)))
View(track)
# plot step length on map to see if it makes sense - testing with Marmalade
ggmap(map_z14)+
geom_path(data = filter(track, id == "Marmalade", aes(x_, y_)))
# plot step length on map to see if it makes sense - testing with Marmalade
ggmap(map_z14)+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_))
# plot step length on map to see if it makes sense - testing with Marmalade
ggplot()+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_))
# Make amt format tracks
track <- data %>%
na.omit() %>%
make_track(.x = utm_easting, .y = utm_northing, .t = time_local, id = id)
# add step length
track <- track %>%
mutate(step = step_lengths(test))
# plot step length on map to see if it makes sense - testing with Marmalade
ggplot()+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_, colour = step))
# plot step length on map to see if it makes sense - testing with Marmalade
ggplot()+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_),colour = step))
# plot step length on map to see if it makes sense - testing with Marmalade
ggplot()+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_),colour = step)+
scale_colour_viridis_d()+
theme_void()
# plot step length on map to see if it makes sense - testing with Marmalade
ggplot()+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_),colour = step)+
scale_colour_viridis_d()+
theme_void()
# add step length
track <- track %>%
mutate(step = step_lengths(test))
# add step length
track <- track %>%
mutate(step = step_lengths(track))
View(track)
# plot step length on map to see if it makes sense - testing with Marmalade
ggplot()+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_), colour = step)+
scale_colour_viridis_d()+
theme_void()
# plot step length on map to see if it makes sense - testing with Marmalade
ggplot()+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_, colour = step))+
scale_colour_viridis_d()+
theme_void()
# plot step length on map to see if it makes sense - testing with Marmalade
ggplot()+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_, colour = step))+
scale_colour_viridis_c()+
theme_void()
# plot step length on map to see if it makes sense - testing with Marmalade
ggplot()+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_, colour = step))+
scale_colour_viridis_c()+
coord_sf()+
theme_void()
# Calculate daily distance moved
move <- track %>%
group_by(id, date) %>%
summarise(distance = sum(step))
date = as.Date(t_)
# add step length and date
track <- track %>%
mutate(step = step_lengths(track),
date = as.Date(t_))
View(track)
# Calculate daily distance moved
move <- track %>%
group_by(id, date) %>%
summarise(distance = sum(step))
View(move)
# Calculate daily distance moved
move <- track %>%
group_by(id, date) %>%
summarise(distance = sum(step)/1000)
View(move)
# Packages
pacman::p_load(atlastools, beepr, janitor, ggmap, move, sf, terra, tidyterra, tidyverse)
ggplot(move)+
geom_density(aes(distance, id) fill = id, alpha = 0.6)
ggplot(move)+
geom_density(aes(distance, id), fill = id, alpha = 0.6)
View(move)
ggplot(move)+
geom_density(aes(distance, id, fill = id), alpha = 0.6)
ggplot(move)+
geom_density(aes(distance, fill = id), alpha = 0.6)
# format for use with move package
move <- move(x = data$longitude,
y = data$latitude,
time = data$time_local,
prof = crs(4236),
data = data,
animal = data$id)
# format for use with move package
track <- data %>%
na.omit() %>%
move(x =longitude, y = latitude, time = time_local, animal = id)
# format for use with move package
track <- data %>%
na.omit() %>%
move(x =data$longitude, y = data$latitude, time = data$time_local, animal = data$id)
# format for use with move package
movestack <- data %>%
na.omit() %>%
move(x =data$longitude, y = data$latitude, time = data$time_local, animal = data$id)
# format for use with move package
data <- data %>%
na.omit()
movestack<- move(data = data, x = data$longitude, y = data$latitude, time = data$time_local, animal = data$id)
temp <- distance(movestack)
View(temp)
temp[["Athena"]]
data$distance <- unlist(lapply(distance(movestack), c, NA))
View(movestack)
movestack@data
names(movestack@data)
View(data)
movestack<- move(data = data, x = data$longitude, y = data$latitude, time = data$time_local, animal = data$id, proj = crs(EPSG:32755))
movestack<- move(data = data, x = data$longitude, y = data$latitude, time = data$time_local, animal = data$id, proj = crs("EPSG:32755"))
movestack<- move(data = data, x = data$utm_easting, y = data$utm_northing, time = data$time_local, animal = data$id, proj = crs("EPSG:32755"))
