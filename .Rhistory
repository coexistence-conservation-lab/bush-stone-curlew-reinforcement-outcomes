id = birds[i],
hr_level = "50")
# Append to respective dataframes
hr90_daily <- rbind.data.frame(hr90_daily, kud90_df_utm)
hr50_daily <- rbind.data.frame(hr50_daily, kud50_df_utm)
# Print progress
print(paste("Completed:", birds[i], "on", days[j]))
}
}
# Create empty dataframes for both 50% and 90% KUDs
hr50_daily <- data.frame()
hr90_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points) < 5){
next
}
# Calculate KUD once
kud <- kernelUD(points[,1], h="href", grid=200, extent = 4)
# Get both 50% and 90% contours from the same KUD object
kud90 <- getverticeshr(kud, percent = 90)
kud50 <- getverticeshr(kud, percent = 50)
# Set projection for both
proj4string(kud90) <- CRS("EPSG:32754")
proj4string(kud50) <- CRS("EPSG:32754")
# Convert to sf and add date
kud90_df_utm <- st_as_sf(kud90) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "90")
kud50_df_utm <- st_as_sf(kud50) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "50")
# Append to respective dataframes
hr90_daily <- rbind.data.frame(hr90_daily, kud90_df_utm)
hr50_daily <- rbind.data.frame(hr50_daily, kud50_df_utm)
# Print progress
print(paste("Completed:", birds[i], "on", days[j]))
}
}
# Create empty dataframes for both 50% and 90% KUDs
hr50_daily <- data.frame()
hr90_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points) < 5){
next
}
# Calculate KUD once
kud <- kernelUD(points[,1], h="href", grid=300, extent = 6)
# Get both 50% and 90% contours from the same KUD object
kud90 <- getverticeshr(kud, percent = 90)
kud50 <- getverticeshr(kud, percent = 50)
# Set projection for both
proj4string(kud90) <- CRS("EPSG:32754")
proj4string(kud50) <- CRS("EPSG:32754")
# Convert to sf and add date
kud90_df_utm <- st_as_sf(kud90) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "90")
kud50_df_utm <- st_as_sf(kud50) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "50")
# Append to respective dataframes
hr90_daily <- rbind.data.frame(hr90_daily, kud90_df_utm)
hr50_daily <- rbind.data.frame(hr50_daily, kud50_df_utm)
# Print progress
print(paste("Completed:", birds[i], "on", days[j]))
}
}
# Create empty dataframes for both 50% and 90% KUDs
hr50_daily <- data.frame()
hr90_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points) < 5){
next
}
# Calculate KUD once
kud <- kernelUD(points[,1], h="href", grid=250, extent = 6)
# Get both 50% and 90% contours from the same KUD object
kud90 <- getverticeshr(kud, percent = 90)
kud50 <- getverticeshr(kud, percent = 50)
# Set projection for both
proj4string(kud90) <- CRS("EPSG:32754")
proj4string(kud50) <- CRS("EPSG:32754")
# Convert to sf and add date
kud90_df_utm <- st_as_sf(kud90) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "90")
kud50_df_utm <- st_as_sf(kud50) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "50")
# Append to respective dataframes
hr90_daily <- rbind.data.frame(hr90_daily, kud90_df_utm)
hr50_daily <- rbind.data.frame(hr50_daily, kud50_df_utm)
# Print progress
print(paste("Completed:", birds[i], "on", days[j]))
}
}
# Packages
pacman::p_load(adehabitatHR, amt, atlastools, beepr, cowplot, effects, emmeans, flextable, ggeffects, ggfortify, ggmap, ggnewscale, ggforce, ggpubr, ggraph, ggridges, ggspatial, glmmTMB, gtools, igraph, janitor, jtools, lme4, lmerTest, move2, momentuHMM, MuMIn, ozmaps, patchwork, performance, plotrix, readxl, scales, scattermore, sf, showtext, sjPlot, sp, suncalc, survival, survminer, terra, tidygraph, tidyterra, tidyverse, tmap, viridis, wildlifeDI)
# Packages
pacman::p_load(adehabitatHR, amt, atlastools, beepr, cowplot, effects, emmeans, flextable, ggeffects, ggfortify, ggmap, ggnewscale, ggforce, ggpubr, ggraph, ggridges, ggspatial, glmmTMB, gtools, igraph, janitor, jtools, lme4, lmerTest, move2, momentuHMM, MuMIn, ozmaps, patchwork, performance, plotrix, readxl, scales, scattermore, sf, showtext, sjPlot, sp, suncalc, survival, survminer, terra, tidygraph, tidyterra, tidyverse, tmap, viridis, wildlifeDI)
# Packages
pacman::p_load(adehabitatHR, amt, atlastools, beepr, cowplot, effects, emmeans, flextable, ggeffects, ggfortify, ggmap, ggnewscale, ggforce, ggpubr, ggraph, ggridges, ggspatial, glmmTMB, gtools, igraph, janitor, jtools, lme4, lmerTest, move2, momentuHMM, MuMIn, ozmaps, patchwork, performance, plotrix, readxl, scales, scattermore, sf, showtext, sjPlot, sp, suncalc, survival, survminer, terra, tidygraph, tidyterra, tidyverse, tmap, viridis, wildlifeDI)
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC")) %>%
# Add date
mutate(date = as_date(time_local, tz = "Australia/Melbourne"))%>%
filter(!id %in% c("Wobbles", "Star"))
# set up data in spatial points dataframe
locs <- SpatialPointsDataFrame(coordinates(
cbind(data$easting, data$northing)), data = data)
# home range polygon per bird per day 🐢 1 hour
birds <- as.character(unique(data$id))
days <- unique(locs[["date"]])
# Create empty dataframes for both 50% and 90% KUDs
hr50_daily <- data.frame()
hr90_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points) < 5){
next
}
# Calculate KUD once
kud <- kernelUD(points[,1], h="href", grid=250, extent = 6)
# Get both 50% and 90% contours from the same KUD object
kud90 <- getverticeshr(kud, percent = 90)
kud50 <- getverticeshr(kud, percent = 50)
# Set projection for both
proj4string(kud90) <- CRS("EPSG:32754")
proj4string(kud50) <- CRS("EPSG:32754")
# Convert to sf and add date
kud90_df_utm <- st_as_sf(kud90) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "90")
kud50_df_utm <- st_as_sf(kud50) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "50")
# Append to respective dataframes
hr90_daily <- rbind.data.frame(hr90_daily, kud90_df_utm)
hr50_daily <- rbind.data.frame(hr50_daily, kud50_df_utm)
# Print progress
print(paste("Completed:", birds[i], "on", days[j]))
}
}
# Create empty dataframes for both 50% and 90% KUDs
hr50_daily <- data.frame()
hr90_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points) < 5){
next
}
# Calculate KUD once - with error handling
kud <- try(kernelUD(points[,1], h="href", grid=200, extent=4), silent=TRUE)
if(inherits(kud, "try-error")) {
print(paste("Skipping bird", birds[i], "day", days[j], "- error:", kud[1]))
next
}
# Get both 50% and 90% contours from the same KUD object
kud90 <- getverticeshr(kud, percent = 90)
kud50 <- getverticeshr(kud, percent = 50)
# Set projection for both
proj4string(kud90) <- CRS("EPSG:32754")
proj4string(kud50) <- CRS("EPSG:32754")
# Convert to sf and add date
kud90_df_utm <- st_as_sf(kud90) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "90")
kud50_df_utm <- st_as_sf(kud50) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "50")
# Append to respective dataframes
hr90_daily <- rbind.data.frame(hr90_daily, kud90_df_utm)
hr50_daily <- rbind.data.frame(hr50_daily, kud50_df_utm)
# Print progress
print(paste("Completed:", birds[i], "on", days[j]))
}
}
# Create empty dataframes for both 50% and 90% KUDs
hr50_daily <- data.frame()
hr90_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points) < 5){
next
}
# Calculate KUD once
kud <- kernelUD(points[,1], h="href", grid = 200, extent = 6)
# Get both 50% and 90% contours from the same KUD object
kud90 <- getverticeshr(kud, percent = 90)
kud50 <- getverticeshr(kud, percent = 50)
# Set projection for both
proj4string(kud90) <- CRS("EPSG:32754")
proj4string(kud50) <- CRS("EPSG:32754")
# Convert to sf and add date
kud90_df_utm <- st_as_sf(kud90) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "90")
kud50_df_utm <- st_as_sf(kud50) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "50")
# Append to respective dataframes
hr90_daily <- rbind.data.frame(hr90_daily, kud90_df_utm)
hr50_daily <- rbind.data.frame(hr50_daily, kud50_df_utm)
# Print progress
print(paste("Completed:", birds[i], "on", days[j]))
}
}
# Create empty dataframes for both 50% and 90% KUDs
hr50_daily <- data.frame()
hr90_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points) < 5){
next
}
# Calculate KUD once
kud <- kernelUD(points[,1], h="href", grid = 300, extent = 6)
# Get both 50% and 90% contours from the same KUD object
kud90 <- getverticeshr(kud, percent = 90)
kud50 <- getverticeshr(kud, percent = 50)
# Set projection for both
proj4string(kud90) <- CRS("EPSG:32754")
proj4string(kud50) <- CRS("EPSG:32754")
# Convert to sf and add date
kud90_df_utm <- st_as_sf(kud90) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "90")
kud50_df_utm <- st_as_sf(kud50) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "50")
# Append to respective dataframes
hr90_daily <- rbind.data.frame(hr90_daily, kud90_df_utm)
hr50_daily <- rbind.data.frame(hr50_daily, kud50_df_utm)
# Print progress
print(paste("Completed:", birds[i], "on", days[j]))
}
}
# Create empty dataframes for both 50% and 90% KUDs
hr50_daily <- data.frame()
hr90_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points) < 5){
next
}
# Calculate KUD once
kud <- kernelUD(points[,1], h="href", grid = 300, extent = 5)
# Get both 50% and 90% contours from the same KUD object
kud90 <- getverticeshr(kud, percent = 90)
kud50 <- getverticeshr(kud, percent = 50)
# Set projection for both
proj4string(kud90) <- CRS("EPSG:32754")
proj4string(kud50) <- CRS("EPSG:32754")
# Convert to sf and add date
kud90_df_utm <- st_as_sf(kud90) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "90")
kud50_df_utm <- st_as_sf(kud50) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "50")
# Append to respective dataframes
hr90_daily <- rbind.data.frame(hr90_daily, kud90_df_utm)
hr50_daily <- rbind.data.frame(hr50_daily, kud50_df_utm)
# Print progress
print(paste("Completed:", birds[i], "on", days[j]))
}
}
# plot home range map
ggmap(map_z15)+
geom_sf(data = hr90_daily, aes(colour = id), inherit.aes = FALSE)+
scale_colour_viridis_c()+
theme_void()
map_z15 <- get_map(c(144.4380, -37.9000), zoom=15, maptype = "satellite")
# Google and STadia API key for ggmaps
ggmap::register_google(key = readChar("apikey_google.txt", nchars = file.info("apikey_google.txt")$size))
map_z15 <- get_map(c(144.4380, -37.9000), zoom=15, maptype = "satellite")
# plot home range map
ggmap(map_z15)+
geom_sf(data = hr90_daily, aes(colour = id), inherit.aes = FALSE)+
scale_colour_viridis_c()+
theme_void()
# plot home range map
ggmap(map_z15)+
geom_sf(data = hr90_daily, aes(colour = id), inherit.aes = FALSE)+
scale_colour_viridis_d()+
theme_void()
View(hr50_daily)
# convert to lat lon for plotting
hr90_daily_ll <- st_transform(hr90_daily, "EPSG:4326")
# plot home range map
ggmap(map_z15)+
geom_sf(data = hr90_daily_ll, aes(colour = id), inherit.aes = FALSE)+
scale_colour_viridis_d()+
theme_void()
View(hr90_daily_ll)
# Create empty dataframes for both 50% and 90% KUDs
hr50_daily <- data.frame()
hr90_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points) < 5){
next
}
# Calculate KUD once
kud <- kernelUD(points[,1], h="href", grid = 300, extent = 5)
# Get both 50% and 90% contours from the same KUD object
kud90 <- getverticeshr(kud, percent = 90)
kud50 <- getverticeshr(kud, percent = 50)
# Set projection for both
proj4string(kud90) <- CRS("EPSG:32755")
proj4string(kud50) <- CRS("EPSG:32755")
# Convert to sf and add date
kud90_df_utm <- st_as_sf(kud90) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "90")
kud50_df_utm <- st_as_sf(kud50) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "50")
# Append to respective dataframes
hr90_daily <- rbind.data.frame(hr90_daily, kud90_df_utm)
hr50_daily <- rbind.data.frame(hr50_daily, kud50_df_utm)
# Print progress
print(paste("Completed:", birds[i], "on", days[j]))
}
}
# convert to lat lon for plotting
hr90_daily_ll <- st_transform(hr90_daily, "EPSG:4326")
# plot home range map
ggmap(map_z15)+
geom_sf(data = hr90_daily_ll, aes(colour = id), inherit.aes = FALSE)+
scale_colour_viridis_d()+
theme_void()
# plot home range map
ggmap(map_z15)+
geom_sf(data = hr90_daily_ll, aes(fill = id), alpha = 0.2, inherit.aes = FALSE)+
scale_colour_viridis_d()+
theme_void()
hr50_daily_ll <- st_transform(hr50_daily, "EPSG:4326")
# plot core range map
ggmap(map_z15)+
geom_sf(data = hr50_daily_ll, aes(fill = id), alpha = 0.2, inherit.aes = FALSE)+
scale_colour_viridis_d()+
theme_void()
# save  shapefiles
st_write(hr90_daily_ll, "shapefiles/hr_90.shp", append = FALSE)
# save  shapefiles
st_write(hr90_daily_ll, "shapefiles/hr_90.shp")
st_write(hr50_daily_ll, "shapefiles/hr_50.shp", append = FALSE)
# extract area per day i.e. drop geometry
hr_area <- st_drop_geometry(hr90_daily) %>%
rbind(st_drop_geometry(hr50_daily)) %>%
pivot_wider(names_from = hr_level, values_from = area) %>%
rename(kud90 = "90",
kud50 = "50")
View(hr_area)
# save to file
write.csv(hr_area, "results/daily_hr.csv", row.names = FALSE)
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne")) %>%
# Add date
mutate(date = as_date(time_local, tz = "Australia/Melbourne")) %>%
# drop birds excluded from analyses
filter(!id %in% c("Wobbles", "Star")) %>%
# drop NAs
na.omit()
# summarise sampling rate to decide on temporal interaction threshold
steps <- data %>%
make_track(.x = easting, .y = northing, .t = time_local, id = id) %>%
nest(data = -"id")
sampling_rates <- steps %>%
transmute(id, summary = map(data, summarize_sampling_rate)) %>%
unnest(summary)
mean(sampling_rates$mean)*60
mean(sampling_rates$sd)*60
mean(sampling_rates$mean)
mean(sampling_rates$sd)
# format track data as move2 object
move <- mt_as_move2(data, coords = c("easting", "northing"), time_column = "time_local", track_id_column = "id") %>%
# add crs
sf::st_set_crs("EPSG:32755") %>%
# needed to omit NAs for wildlifeDI to work
na.omit()
# one week subset
temp <- seq.Date(from = as_date("2023-06-01"), to = as_date("2023-06-07"), by = "day")
move_subset <- filter(move, date %in% temp)
# plot distribution of paired fixes by distance
dcPlot(move_subset,tc=3*60,dmax=500)
dcPlot(move_subset,tc=3*60,dmax=100)
# define resident only date period
res_dates <- seq.Date(from = as_date("2023-01-16"), to = as_date("2023-06-06"), by = "day")
# subset to dates
data_resident <- move %>%
filter(date %in% res_dates)
# Test for a single dyad
dyad <- filter(data_resident, id %in% c("Aurora", "Briar"))
checkTO(dyad)
Sys.time()
test <- Ca(dyad, tc=4*60, dc=30);Sys.time()
78*109
8502/60
141/60
# list of residents
residents <- unique(data_resident$id)
# All bird combinations
list <-combinations(n = 13, r = 2, v = residents, repeats.allowed = FALSE)
list1 <- list[,1]
list2 <- list[,2]
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_resident, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(Prox(dyad, tc=4*60, dc=30)) %>%
clean_names()
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 78", sep = " "))
interact <- rbind(interact, temp)
}
View(interact)
# tidy up the output
interact2 <- interact %>%
# remove unneeded columns
select(id1, id2, prox) %>%
# format prox numeric to 4 decimal places
mutate(prox = as.numeric(format(round(prox, 4), nsmall = 4)))
View(interact2)
# save to disk
write.csv(interact, "results/proximity_residents.csv", row.names = FALSE)
# summary statistics prox values
hist(interact2$prox)
summary(interact2$prox)
# define reinforcer date period
rein_dates <- seq.Date(from = as_date("2023-06-11"), to = as_date("2023-08-05"), by = "day")
# subset to dates
data_reinforce <- move %>%
filter(date %in% rein_dates)
# list of founders
founders <- unique(data_reinforce$id)
# All bird combinations
list <-combinations(n = 28, r = 2, v = founders, repeats.allowed = FALSE)
list1 <- list[,1]
list2 <- list[,2]
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_reinforce, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(Prox(dyad, tc=4*60, dc=30)) %>%
clean_names()
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 378", sep = " "))
interact <- rbind(interact, temp)
}
View(interact)
# tidy up the output
interact2 <- interact %>%
# remove unneeded columns
select(id1, id2, prox) %>%
# format prox numeric to 4 decimal places
mutate(prox = as.numeric(format(round(prox, 4), nsmall = 4)))
# summary statistics prox values
hist(interact2$prox)
summary(interact2$prox)
# save to disk
write.csv(interact2, "results/proximity_reinforcers.csv", row.names = FALSE)
