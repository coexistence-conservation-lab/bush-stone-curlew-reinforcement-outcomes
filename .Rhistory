axis.title.x = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
)
}
# list of plots
g6 <- ggplot(pred6, aes(date, predicted, ymin = lower, ymax = upper)) +
ylab("Daily distance moved (m)")+
theme()
g7 <- ggplot(pred7, aes(date, predicted, ymin = lower, ymax = upper)) +
ylab("Roost displacement (m)")+
theme()
g8 <- ggplot(pred8, aes(date, predicted, ymin = lower, ymax = upper)) +
ylab("Distance from release (m)")+
theme()
g9 <- ggplot(pred9, aes(date, predicted, ymin = lower, ymax = upper)) +
ylab("Home range area (ha)")+
theme()
# multi plot 3x2
combined_plot <- (g6 + g7)  / (g8 + g9) +
plot_annotation(tag_levels = 'A')
combined_plot
# save
ggsave("plots/resident_outcomes.png", dpi = 400, bg = 'white',
width = 20, height = 16, units = "cm")
# post hoc tests
e1 <- emmeans(best1, pairwise ~ social, type = "response")
View(e1)
# post hoc tests
e1 <- as.data.frame(emmeans(best1, pairwise ~ social, type = "response"))
# post hoc tests
e1 <- emmeans(best1, pairwise ~ social, type = "response")
e1
# post hoc tests
e1 <- as.data.frame(emmeans(best1, pairwise ~ social, type = "response"))
?emmeans
e1b <- as.data.frame(emtrends(best1, pairwise ~ social, var = "elapsed"))
View(e1b)
# post hoc tests
e1a <- mutate(as.data.frame(emmeans(best1, pairwise ~ social, type = "response")),
model = "distance daily"))
# post hoc tests
e1a <- mutate(as.data.frame(emmeans(best1, pairwise ~ social, type = "response")),
model = "distance daily")
View(e1a)
# post hoc tests
emm <- mutate(as.data.frame(emmeans(best1, pairwise ~ social, type = "response")),
model = "distance daily") %>%
rbind(mutate(as.data.frame(emtrends(best1, pairwise ~ social, var = "elapsed"))))
# post hoc tests
emm <- mutate(as.data.frame(emmeans(best1, pairwise ~ social, type = "response")),
model = "distance daily") %>%
rbind(mutate(as.data.frame(emtrends(best1, pairwise ~ social, var = "elapsed"))),
model = "distance daily")
# post hoc tests
as.data.frame(emmeans(best1, pairwise ~ social, type = "response")
# post hoc tests
as.data.frame(emmeans(best1, pairwise ~ social, type = "response"))
# post hoc tests
as.data.frame(emmeans(best1, pairwise ~ social, type = "response"))
# post hoc tests
means <-mutate(as.data.frame(emmeans(best1, pairwise ~ social, type = "response")),
model = "distance daily")
slopes <- mutate(as.data.frame(emtrends(best1, pairwise ~ social, var = "elapsed")),
model = "distance daily")
View(slopes)
View(means)
# post hoc tests
means <-mutate(as.data.frame(emmeans(best1, pairwise ~ social, type = "response")),
model = "distance daily") %>%
rbind(mutate(as.data.frame(emmeans(best2, pairwise ~ social, type = "response")),
model = "roost displacement"))
View(means)
temp <- (mutate(as.data.frame(emmeans(best2, pairwise ~ social, type = "response")),
model = "roost displacement"))
View(temp)
# post hoc tests
emmeans(best1, pairwise ~ social, type = "response")
emtrends(best1, pairwise ~ social, var = "elapsed")
# post hoc tests
temp <- emmeans(best1, pairwise ~ social, type = "response")
temp$contrasts
temp2 <- temp$contrasts
View(temp2)
temp2 <- temp$contrasts %>%
as.data.frame()
temp3 <- emtrends(best1, pairwise ~ social, var = "elapsed")
View(temp3)
temp4 <- temp3$contrasts %>%
as.data.frame()
View(temp4)
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = best1$call)
best1$modelInfo
best1$modelInfo$respCol
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = best1$modelInfo$respCol)
View(temp2)
# post hoc tests
names <- c("distance daily", "roost displacement", "release fidelity", "home range")
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = names[1])
View(temp2)
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = names[1],
type = means)
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = names[1],
type = "means")
View(temp2)
# post hoc tests
models <- c(best1, best2, best3, best4)
models[1]
out <- rbind(temp2, temp4)
temp4 <- temp3$contrasts %>%
as.data.frame() %>%
mutate(model = names[i],
type = "slopes")
out <- rbind(temp2, temp4)
temp4 <- temp3$contrasts %>%
as.data.frame() %>%
mutate(model = names[1],
type = "slopes")
out <- rbind(temp2, temp4)
View(out)
table <- data.frame()
# post hoc tests
models <- c(best1, best2, best3, best4)
names <- c("distance daily", "roost displacement", "release fidelity", "home range")
table <- data.frame()
for (i in 1:4){
temp <- emmeans(models[i], pairwise ~ social, type = "response")
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = names[i],
type = "means")
temp3 <- emtrends(best1, pairwise ~ social, var = "elapsed")
temp4 <- temp3$contrasts %>%
as.data.frame() %>%
mutate(model = names[i],
type = "slopes")
out <- rbind(temp2, temp4)
table <- rbind(table, out)
}
# post hoc tests
temp <- emmeans(best1, pairwise ~ social, type = "response")
temp <- emmeans(best1, pairwise ~ social, type = "response")
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = names[1],
type = "means")
temp3 <- emtrends(best1, pairwise ~ social, var = "elapsed")
temp4 <- temp3$contrasts %>%
as.data.frame() %>%
mutate(model = names[1],
type = "slopes")
out <- rbind(temp2, temp4)
View(out)
models[[1]]
models$obj
temp <- emmeans(best2, pairwise ~ social, type = "response")
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = names[2],
type = "means")
temp3 <- emtrends(best2, pairwise ~ social, var = "elapsed")
temp4 <- temp3$contrasts %>%
as.data.frame() %>%
mutate(model = names[2],
type = "slopes")
out <- rbind(temp2, temp4)
temp <- emmeans(best3, pairwise ~ social, type = "response")
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = names[3],
type = "means")
temp3 <- emtrends(best3, pairwise ~ social, var = "elapsed")
temp4 <- temp3$contrasts %>%
as.data.frame() %>%
mutate(model = names[3],
type = "slopes")
out <- rbind(temp2, temp4)
temp <- emmeans(best4, pairwise ~ social, type = "response")
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = names[4],
type = "means")
temp3 <- emtrends(best4, pairwise ~ social, var = "elapsed")
temp4 <- temp3$contrasts %>%
as.data.frame() %>%
mutate(model = names[4],
type = "slopes")
out <- rbind(temp2, temp4)
best1
summary(best1)
# best models
tab_model(best1, best2, best3, best4, m5, show.est = TRUE, show.se = TRUE, show.ci = FALSE,
file = "results/m1-5_effects.xls")
summary(best3)
summary(best6)
summary(best7)
summary(best8)
summary(best9)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# remove columns not needed
dplyr::select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
# Packages
pacman::p_load(adehabitatHR, amt, atlastools, beepr, cowplot, effects, emmeans, flextable, ggeffects, ggfortify, ggmap, ggnewscale, ggforce, ggpubr, ggraph, ggridges, ggspatial, glmmTMB, gtools, igraph, janitor, jtools, lme4, lmerTest, move2, momentuHMM, MuMIn, ozmaps, patchwork, performance, plotrix, readxl, scales, scattermore, sf, showtext, sjPlot, sp, suncalc, survival, survminer, terra, tidygraph, tidyterra, tidyverse, tmap, viridis, wildlifeDI)
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity,
mortality = mortality_or_capture) %>%
mutate(start_date = as_date(dmy(start_date)),
end_date = as_date(dmy(end_date)),
mortality = as_date(dmy(mortality)))
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity,
mortality = mortality_or_capture) %>%
mutate(start_date = as_date(dmy(start_date)),
end_date = as_date(dmy(end_date)),
mortality = as_date(dmy(mortality)))
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity,
mortality = mortality_or_capture) %>%
mutate(start_date = as_date(dmy(start_date)),
mortality = as_date(dmy(mortality)))
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity) %>%
mutate(start_date = as_date(dmy(start_date)),
mortality = as_date(dmy(mortality)))
str(metadata)
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity) %>%
mutate(start_date = as_date(dmy(start_date)),
mortality = as_date(dmy(mortality)))
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv")
str(metadata)
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names()
str(metadata)
rename(id = identity) %>%
mutate(start_date = as_date(dmy(start_date)),
mortality_date = as_date(dmy(mortality_date)))
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity) %>%
mutate(start_date = as_date(dmy(start_date)),
mortality_date = as_date(dmy(mortality_date)))
View(metadata)
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity,
mortality = mortality_or_capture) %>%
mutate(start_date = as_date(dmy(start_date)),
end_date = as_date(dmy(end_date)),
mortality = as_date(dmy(mortality)))
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names %>%
# add survival time (persistence) - right censored data
mutate(time = as_date(end_date) - as_date(start_date)) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names %>%
# add survival time (persistence) - right censored data
mutate(time = as.date(end_date) - as.date(start_date)) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names %>%
# add survival time (persistence) - right censored data
mutate(time = as.Date(end_date) - as.Date(start_date)) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names %>%
# add survival time (persistence) - right censored data
mutate(time = as_Date(end_date) - as_Date(start_date)) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names %>%
# add survival time (persistence) - right censored data
mutate(time = as_date(end_date) - as_date(start_date)) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
?as_date
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names %>%
# add survival time (persistence) - right censored data
mutate(time = as_date(end_date, format = "%Y-%m-%d") - as_date(start_date, format = "%Y-%m-%d")) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names %>%
# convert to dates
mutate(start_date = as.Date(start_date))
View(surv_data)
?as.Date
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names %>%
# convert to dates
mutate(start_date = as.Date(start_date, format = "%d/%m/%Y"))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names %>%
# convert to dates
mutate(start_date = as.Date(start_date, format = "%d/%m/%Y"),
mortality = as.Date(mortality, format = "%d/%m/%Y"),)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names %>%
# convert to dates
mutate(start_date = as.Date(start_date, format = "%d/%m/%Y"),
end_date = as.Date(end_date, format = "%d/%m/%Y"),)
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names %>%
# convert to dates
mutate(start_date = as.Date(start_date, format = "%d/%m/%Y"),
end_date = as.Date(end_date, format = "%d/%m/%Y"),) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date)) %>%
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names %>%
# convert to dates
mutate(start_date = as.Date(start_date, format = "%d/%m/%Y"),
end_date = as.Date(end_date, format = "%d/%m/%Y"),) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date)
View(surv_data)
# add status - whether death occurs (including euthanased)
mutate(status = ifelse(grepl(c("Dead", "Euthanased"), status_at_end_date,1,0))
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names %>%
# convert to dates
mutate(start_date = as.Date(start_date, format = "%d/%m/%Y"),
end_date = as.Date(end_date, format = "%d/%m/%Y"),) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs (including euthanased)
mutate(status = ifelse(grepl(c("Dead", "Euthanased"),
status_at_end_date, 1, 0)))
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names %>%
# convert to dates
mutate(start_date = as.Date(start_date, format = "%d/%m/%Y"),
end_date = as.Date(end_date, format = "%d/%m/%Y"),) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs (including euthanased)
mutate(status = ifelse(grepl(c("Dead", "Euthanased"),
status_at_end_date), 1, 0))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names
View(surv_data)
km <- with(surv_data, Surv(time, status))
km <- with(surv_data, Surv(time, status))
# Fit a basic survival model
kmfit <- survfit(Surv(time, status) ~ 1, data = surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names
km <- with(surv_data, Surv(time, status))
# Fit a basic survival model
kmfit <- survfit(Surv(time, status) ~ 1, data = surv_data)
# Estimated survival probabilities
summary(kmfit, times = c(1, 10, 30, 55, 100, 365))
# plot
autoplot(kmfit)
# Estimated survival probabilities
summary(kmfit, times = c(1, 10, 30, 55, 60, 100, 365))
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names
km <- with(surv_data, Surv(time, status))
# Fit a basic survival model
kmfit <- survfit(Surv(time, status) ~ 1, data = surv_data)
# Estimated survival probabilities
summary(kmfit, times = c(1, 10, 30, 55, 60, 100, 365))
View(m6)
# Estimated survival probabilities
summary(kmfit, times = c(1, 10, 30, 55, 60, 100, 365))
# Fit a survival model by cohort
kmfit_cohort <- survfit(Surv(time, status) ~ cohort, data = surv_data)
summary(kmfit_cohort, times = c(1,30,55))
summary(kmfit_cohort, times = c(1,30,55,60))
# Fit a survival model by cohort
kmfit_cohort <- survfit(Surv(time, status) ~ cohort, data = surv_data)
summary(kmfit_cohort, times = c(1,30,55,60))
# Fit Cox Model
cox <- coxph(Surv(time, status) ~ cohort, data = surv_data)
summary(cox)
# social group membership
club <- c("Rowan", "Rory", "Fauna", "Zeus", "Rocky", "Sofi", "Loki", "Avery", "Maeve")
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- surv_data %>%
# add column for membership to social group
mutate(social = ifelse(id %in% club, "exclusive", "mixed")) %>%
# select only reinforcers
filter(cohort == "Reinforcing")
# social group membership
club <- c("Rowan", "Rory", "Fauna", "Zeus", "Rocky", "Sofi", "Loki", "Avery", "Maeve")
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- surv_data %>%
# add column for membership to social group
mutate(social = ifelse(id %in% club, "exclusive", "mixed")) %>%
# select only reinforcers
filter(cohort == "Reinforcing")
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- surv_data %>%
# add column for membership to social group
mutate(social = ifelse(identity %in% club, "exclusive", "mixed")) %>%
# select only reinforcers
filter(cohort == "Reinforcing")
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read.csv("data/survival.csv") %>%
clean_names
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data2 <- surv_data %>%
# add column for membership to social group
mutate(social = ifelse(identity %in% club, "exclusive", "mixed")) %>%
# select only reinforcers
filter(cohort == "Reinforcing")
View(surv_data2)
# Fit a survival model by social group
kmfit_social <- survfit(Surv(time, status) ~ social, data = surv_data)
summary(kmfit_social, times = c(1,30,55,60))
# Fit Cox Model
cox <- coxph(Surv(time, status) ~ social, data = surv_data)
# Fit a survival model by social group
kmfit_social <- survfit(Surv(time, status) ~ social, data = surv_data2)
summary(kmfit_social, times = c(1,30,55,60))
# Fit Cox Model
cox <- coxph(Surv(time, status) ~ social, data = surv_data2)
summary(cox)
write.csv(surv_data, "data/temp.csv")
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- read_xlsx("data/survival.xlsx", sheet = 1) %>%
clean_names
View(surv_data)
# Fit a survival model by cohort
kmfit_cohort <- survfit(Surv(time, status) ~ cohort, data = surv_data)
summary(kmfit_cohort, times = c(1,30,55))
# Fit Cox Model
cox <- coxph(Surv(time, status) ~ cohort, data = surv_data)
summary(cox)
