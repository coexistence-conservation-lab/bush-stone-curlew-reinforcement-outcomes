dyad
checkTO(dyad)
test <- data.frame(
prox = Prox(dyad, tc=4*60, dc=30),
di = DI(dyad, tc=4*60))
test <- prox = Prox(dyad, tc=4*60, dc=30)
test <- prox = Prox(dyad, tc=4*60, dc=30)
test <- Prox(dyad, tc=4*60, dc=30)
test
# Packages
pacman::p_load(adehabitatHR, amt, asnipe, atlastools, beepr, emmeans, ggfortify, ggmap, ggnewscale, ggraph, ggpubr, ggridges, glmmTMB, gtools, igraph, janitor, jtools, lme4, lmerTest, move2, momentuHMM, readxl, scattermore, sf, sp, STRAND, suncalc, survival, survminer, terra, tidygraph, tidyterra, tidyverse, wildlifeDI)
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne")) %>%
# Add date
mutate(date = as_date(time_local, tz = "Australia/Melbourne")) %>%
# drop birds excluded from analyses
filter(!id %in% c("Wobbles", "Star")) %>%
# drop NAs
na.omit()
# format track data as move2 object
move <- mt_as_move2(data, coords = c("easting", "northing"), time_column = "time_local", track_id_column = "id") %>%
# add crs
sf::st_set_crs("EPSG:32755") %>%
# needed to omit NAs for wildlifeDI to work
na.omit()
# define resident only date period
res_dates <- seq.Date(from = as_date("2023-01-16"), to = as_date("2023-06-06"), by = "day")
# subset to dates
data_resident <- move %>%
filter(date %in% res_dates)
# list of residents
residents <- unique(data_resident$id)
# All bird combinations
list <-combinations(n = 13, r = 2, v = residents, repeats.allowed = FALSE)
list1 <- list[,1]
list2 <- list[,2]
# Test for a single dyad
dyad <- filter(move, id %in% c("Aurora", "Briar"))
checkTO(dyad)
test <- Prox(dyad, tc=4*60, dc=30)
time
test <- Sys.time();Ca(dyad, tc=4*60, dc=30);Sys.time()
Sys.time()
test <- Ca(dyad, tc=4*60, dc=30);Sys.time()
# list of residents
residents <- unique(data_resident$id)
# All bird combinations
list <-combinations(n = 13, r = 2, v = residents, repeats.allowed = FALSE)
list1 <- list[,1]
list2 <- list[,2]
# Test for a single dyad
dyad <- data_resident(move, id %in% c("Aurora", "Briar"))
# Test for a single dyad
dyad <- filter(data_resident, id %in% c("Aurora", "Briar"))
checkTO(dyad)
Sys.time()
test <- Ca(dyad, tc=4*60, dc=30);Sys.time()
51-4
47*78/60
dyad <- filter(data_resident, id %in% c(list1[i], list2[i]))
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_resident, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(
ca(dyad, tc=4*60, dc=30),
bird1 = list1[i],
bird2 = list2[i])
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 78", sep = " "))
interact <- rbind(interact, temp)
}
View(interact)
dyad <- filter(data_resident, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(
ca = ca(dyad, tc=4*60, dc=30),
bird1 = list1[i],
bird2 = list2[i])
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
View(temp)
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_resident, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
temp <- data.frame(
ca = ca(dyad, tc=4*60, dc=30),
bird1 = list1[i],
bird2 = list2[i])
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 78", sep = " "))
interact <- rbind(interact, temp)
}
View(interact)
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_resident, id %in% c(list1[i], list2[i]))
temp <- data.frame(
ca = ca(dyad, tc=4*60, dc=30),
bird1 = list1[i],
bird2 = list2[i])
print(paste("Finished", list1[i], "&", list2[i], i, "of 78", sep = " "))
interact <- rbind(interact, temp)
}
temp <- data.frame(
ca = Ca(dyad, tc=4*60, dc=30),
bird1 = list1[i],
bird2 = list2[i])
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_resident, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(
ca = Ca(dyad, tc=4*60, dc=30),
bird1 = list1[i],
bird2 = list2[i])
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 78", sep = " "))
interact <- rbind(interact, temp)
}
View(interact)
?Ca()
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_resident, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(Ca(dyad, tc=4*60, dc=30))
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 78", sep = " "))
interact <- rbind(interact, temp)
}
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_resident, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(Ca(dyad, tc=4*60, dc=30))
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 78", sep = " "))
interact <- rbind(interact, temp)
}
# list of founders
founders <- unique(data_reinforce$id)
# define reinforcer date period
rein_dates <- seq.Date(from = as_date("2023-06-11"), to = as_date("2024-01-10"), by = "day")
# subset to dates
data_reinforce <- move %>%
filter(date %in% rein_dates)
# list of founders
founders <- unique(data_reinforce$id)
# All bird combinations
list <-combinations(n = 28, r = 2, v = founders, repeats.allowed = FALSE)
list1 <- list[,1]
list2 <- list[,2]
View(list)
# All bird combinations
list <-combinations(n = 13, r = 2, v = residents, repeats.allowed = FALSE)
list1 <- list[,1]
list2 <- list[,2]
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_resident, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(Ca(dyad, tc=4*60, dc=30))
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 78", sep = " "))
interact <- rbind(interact, temp)
}
View(interact)
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_resident, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(Ca(dyad, tc=4*60, dc=30))
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 78", sep = " "))
interact <- rbind(interact, temp)
}
View(interact)
# save to disk
write.csv(interact, "results/association_residents.csv", row.names = FALSE)
# tidy output
interact2 <- interact %>%
clean_names() %>%
mutate(Ca = as.numeric(Ca))
# tidy output
interact2 <- interact %>%
clean_names()
# tidy output
interact2 <- interact %>%
clean_names() %>%
mutate(Ca = as.numeric(Ca))
# tidy output
interact2 <- interact %>%
clean_names() %>%
mutate(ca = as.numeric(Ca))
# define reinforcer date period
rein_dates <- seq.Date(from = as_date("2023-06-11"), to = as_date("2024-01-10"), by = "day")
# subset to dates
data_reinforce <- move %>%
filter(date %in% rein_dates)
# list of founders
founders <- unique(data_reinforce$id)
# All bird combinations
list <-combinations(n = 28, r = 2, v = founders, repeats.allowed = FALSE)
list1 <- list[,1]
list2 <- list[,2]
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
print(paste("Finished", list1[i], "&", list2[i], i, "of 378", sep = " "))
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_resident, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(Ca(dyad, tc=4*60, dc=30))
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 378", sep = " "))
interact <- rbind(interact, temp)
}
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_reinforce, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(Ca(dyad, tc=4*60, dc=30))
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 378", sep = " "))
interact <- rbind(interact, temp)
}
View(interact)
hist(interact$Ca)
hist(interact2$Ca)
# save to disk
write.csv(interact, "results/association_reinforcers.csv", row.names = FALSE)
# list of residents
residents <- unique(data_resident$id)
# All bird combinations
list <-combinations(n = 13, r = 2, v = residents, repeats.allowed = FALSE)
list1 <- list[,1]
list2 <- list[,2]
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_resident, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(Prox(dyad, tc=4*60, dc=30)) %>%
clean_names()
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 78", sep = " "))
interact <- rbind(interact, temp)
}
View(interact)
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_resident, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(Prox(dyad, tc=4*60, dc=30)) %>%
clean_names()
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 78", sep = " "))
interact <- rbind(interact, temp)
}
View(interact)
hist(interact$prox)
# save to disk
write.csv(interact, "results/prox_reinforcers.csv", row.names = FALSE)
# save to disk
write.csv(interact, "results/association_residents.csv", row.names = FALSE)
# define reinforcer date period
rein_dates <- seq.Date(from = as_date("2023-06-11"), to = as_date("2024-01-10"), by = "day")
# subset to dates
data_reinforce <- move %>%
filter(date %in% rein_dates)
# list of founders
founders <- unique(data_reinforce$id)
# All bird combinations
list <-combinations(n = 28, r = 2, v = founders, repeats.allowed = FALSE)
list1 <- list[,1]
list2 <- list[,2]
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_reinforce, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(Ca(dyad, tc=4*60, dc=30)) %>%
clean_names()
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 378", sep = " "))
interact <- rbind(interact, temp)
}
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_reinforce, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(Prox(dyad, tc=4*60, dc=30)) %>%
clean_names()
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 378", sep = " "))
interact <- rbind(interact, temp)
}
View(interact)
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_resident, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(Prox(dyad, tc=4*60, dc=30)) %>%
clean_names()
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 78", sep = " "))
interact <- rbind(interact, temp)
}
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_reinforce, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(Prox(dyad, tc=4*60, dc=30)) %>%
clean_names()
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 378", sep = " "))
interact <- rbind(interact, temp)
}
# define reinforcer date period
rein_dates <- seq.Date(from = as_date("2023-06-11"), to = as_date("2023-08-05"), by = "day")
# subset to dates
data_reinforce <- move %>%
filter(date %in% rein_dates)
# list of founders
founders <- unique(data_reinforce$id)
# All bird combinations
list <-combinations(n = 28, r = 2, v = founders, repeats.allowed = FALSE)
list1 <- list[,1]
list2 <- list[,2]
founders
# All bird combinations
list <-combinations(n = 28, r = 2, v = founders, repeats.allowed = FALSE)
list1 <- list[,1]
list2 <- list[,2]
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_reinforce, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(Prox(dyad, tc=4*60, dc=30)) %>%
clean_names()
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 378", sep = " "))
interact <- rbind(interact, temp)
}
# Packages
pacman::p_load(adehabitatHR, amt, asnipe, atlastools, beepr, emmeans, ggfortify, ggmap, ggnewscale, ggraph, ggpubr, ggridges, glmmTMB, gtools, igraph, janitor, jtools, lme4, lmerTest, move2, momentuHMM, readxl, scattermore, sf, sp, STRAND, suncalc, survival, survminer, terra, tidygraph, tidyterra, tidyverse, wildlifeDI)
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity,
mortality = mortality_or_capture) %>%
mutate(start_date = as_date(dmy(start_date)),
end_date = as_date(dmy(end_date)),
mortality = as_date(dmy(mortality)))
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# remove columns not needed
dplyr::select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
km <- with(surv_data, Surv(time, status))
# Fit a basic survival model
kmfit <- survfit(Surv(time, status) ~ 1, data = surv_data)
# Estimated survival probabilities
summary(kmfit, times = c(1, 10, 30, 54, 100, 365))
# plot
autoplot(kmfit)
# Estimated survival probabilities
summary(kmfit, times = c(1, 10, 30, 50, 100, 150))
# plot
autoplot(kmfit)
# Estimated survival probabilities
summary(kmfit, times = c(1, 10, 30, 50, 100, 365))
# Estimated survival probabilities
summary(kmfit, times = c(1, 10, 30, 55, 100, 365))
# Fit a survival model by cohort
kmfit_cohort <- survfit(Surv(time, status) ~ cohort, data = surv_data)
summary(kmfit_cohort, times = c(1,30,55))
# plot
autoplot(kmfit_cohort)
# Fit Cox Model
cox <- coxph(Surv(time, status) ~ cohort, data = surv_data)
summary(cox)
# Packages
pacman::p_load(adehabitatHR, amt, asnipe, atlastools, beepr, emmeans, ggfortify, ggmap, ggnewscale, ggraph, ggpubr, ggridges, glmmTMB, gtools, igraph, janitor, jtools, lme4, lmerTest, move2, momentuHMM, readxl, scattermore, sf, sp, STRAND, suncalc, survival, survminer, terra, tidygraph, tidyterra, tidyverse, wildlifeDI)
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity,
mortality = mortality_or_capture) %>%
mutate(start_date = as_date(dmy(start_date)),
end_date = as_date(dmy(end_date)),
mortality = as_date(dmy(mortality)))
prox <- read.csv("results/proximity_residents.csv")
prox <- read.csv("results/prox_residents.csv")
View(prox)
?as.numeric()
?as.numeric
# read in dyad proximity scores
prox <- read.csv("results/prox_residents.csv") %>%
# select id and prox columns
select(id1, id2, prox)
View(prox)
# read in dyad proximity scores
prox <- read.csv("results/prox_residents.csv") %>%
# select id and prox columns
select(id1, id2, prox) %>%
# format prox numeric
mutate(prox = as.numeric(prox))
View(prox)
# read in dyad proximity scores
prox <- read.csv("results/prox_residents.csv") %>%
# select id and prox columns
select(id1, id2, prox) %>%
# format prox numeric to 3 dec places
mutate(prox = format(round(prox, 3), nsmall = 3))
View(prox)
# summary statistics prox values
hist(prox$prox)
# read in dyad proximity scores
prox <- read.csv("results/prox_residents.csv") %>%
# select id and prox columns
select(id1, id2, prox) %>%
# format prox numeric to 3 dec places
mutate(prox = as.numeric(format(round(prox, 3), nsmall = 3)))
# summary statistics prox values
hist(prox$prox)
summary(prox$prox)
# read in dyad proximity scores
prox <- read.csv("results/prox_residents.csv") %>%
# select id and prox columns
select(id1, id2, prox) %>%
# format prox numeric to 3 dec places
mutate(prox = as.numeric(format(round(prox, 4), nsmall = 4)))
View(prox)
View(prox)
# save to disk
write.csv(prox, "results/prox_reinforcers.csv", row.names = FALSE)
# define reinforcer date period
rein_dates <- seq.Date(from = as_date("2023-06-11"), to = as_date("2023-08-05"), by = "day")
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne")) %>%
# Add date
mutate(date = as_date(time_local, tz = "Australia/Melbourne")) %>%
# drop birds excluded from analyses
filter(!id %in% c("Wobbles", "Star")) %>%
# drop NAs
na.omit()
# format track data as move2 object
move <- mt_as_move2(data, coords = c("easting", "northing"), time_column = "time_local", track_id_column = "id") %>%
# add crs
sf::st_set_crs("EPSG:32755") %>%
# needed to omit NAs for wildlifeDI to work
na.omit()
# subset to dates
data_reinforce <- move %>%
filter(date %in% rein_dates)
# list of founders
founders <- unique(data_reinforce$id)
# All bird combinations
list <-combinations(n = 28, r = 2, v = founders, repeats.allowed = FALSE)
list1 <- list[,1]
list2 <- list[,2]
# Calculate interactions between all birds 🐢🐢
interact <- data.frame()
for(i in 1:length(list1)) {
dyad <- filter(data_reinforce, id %in% c(list1[i], list2[i]))
temp <- tryCatch({
data.frame(Prox(dyad, tc=4*60, dc=30)) %>%
clean_names()
}, error = function(e) data.frame(ca = NA, bird1 = NA, bird2 = NA))
print(paste("Finished", list1[i], "&", list2[i], i, "of 378", sep = " "))
interact <- rbind(interact, temp)
}
# tidy up the output
interact2 <- interact %>%
# remove unneeded columns
select(id1, id2, prox) %>%
# format prox numeric to 4 decimal places
mutate(prox = as.numeric(format(round(prox, 4), nsmall = 4)))
# summary statistics prox values
hist(interact2$prox)
summary(interact2$prox)
# save to disk
write.csv(interact2, "results/proximity_reinforcers.csv", row.names = FALSE)
View(interact2)
