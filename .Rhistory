width = 20, height = 16, units = "cm")
# plot daily distance over time as period means
ggplot(sum6, aes(date, dist, ymin = lower, ymax = upper)) +
geom_path() +
geom_ribbon(alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Daily distance moved (m)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()+
geom_vline(aes(xintercept = as_date("2023-06-07")), colour = "purple")
# plot daily distance over time as period means
ggplot(sum7, aes(date, dist, ymin = lower, ymax = upper)) +
geom_path() +
geom_ribbon(alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Distance between consecutive roosts (m)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()+
geom_vline(aes(xintercept = as_date("2023-06-07")), colour = "purple")
# plot daily distance over time as period means
ggplot(sum8, aes(date, dist, ymin = lower, ymax = upper)) +
geom_path() +
geom_ribbon(alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Distance from release site (m)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()+
geom_vline(aes(xintercept = as_date("2023-06-07")), colour = "purple")
# plot daily distance over time as period means
ggplot(sum9, aes(date, dist, ymin = lower, ymax = upper)) +
geom_path() +
geom_ribbon(alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Home range (90% KUD) area (ha)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()+
geom_vline(aes(xintercept = as_date("2023-06-07")), colour = "purple")
# Packages
pacman::p_load(adehabitatHR, amt, atlastools, beepr, cowplot, effects, emmeans, ggeffects, ggfortify, ggmap, ggnewscale, ggforce, ggpubr, ggraph, ggridges, ggspatial, glmmTMB, gtools, igraph, janitor, jtools, lme4, lmerTest, move2, momentuHMM, MuMIn, ozmaps, patchwork, performance, plotrix, readxl, scales, scattermore, sf, showtext, sjPlot, sp, suncalc, survival, survminer, terra, tidygraph, tidyterra, tidyverse, tmap, viridis, wildlifeDI)
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity,
mortality = mortality_or_capture) %>%
mutate(start_date = as_date(dmy(start_date)),
end_date = as_date(dmy(end_date)),
mortality = as_date(dmy(mortality)))
# Packages
pacman::p_load(adehabitatHR, amt, atlastools, beepr, cowplot, effects, emmeans, flextable, ggeffects, ggfortify, ggmap, ggnewscale, ggforce, ggpubr, ggraph, ggridges, ggspatial, glmmTMB, gtools, igraph, janitor, jtools, lme4, lmerTest, move2, momentuHMM, MuMIn, ozmaps, patchwork, performance, plotrix, readxl, scales, scattermore, sf, showtext, sjPlot, sp, suncalc, survival, survminer, terra, tidygraph, tidyterra, tidyverse, tmap, viridis, wildlifeDI)
t1 <- flextable(m1)
t1 <- flextable(summary(m1))
summary(m1)
t1 <- tab_model(m1)
View(t1)
t1
t1 <- tab_model(m1, m2)
t1
tab_model(m1, m2, m3, m4, m5)
tab_model(m1, m2, m3, m4, m5, file = "results/m1-5_effects.xlsx")
tab_model(m1, m2, m3, m4, m5, file = "results/m1-5_effects.xls")
# model selection table
tab_model(dm1)
View(dm1)
# model selection table
ms <- mutate(dm1, model = "distance daily")
View(ms)
# model selection table
ms <- mutate(dm1, model = "distance daily") %>%
rbind(mutate(dm2, model = "roost displacement"))
View(dm1)
View(dm2)
# model selection table
ms <- rbind(dm1, dm2)
# model selection table
ms <- mutate(as.data.frame(dm1), model = "distance daily") %>%
rbind(mutate(as.data.frame(dm2), model = "roost displacement"))
View(ms)
# model selection table
ms <- mutate(as.data.frame(dm1), model = "distance daily") %>%
rbind(mutate(as.data.frame(dm2), model = "roost displacement")) %>%
rbind(mutate(as.data.frame(dm3), model = "release fidelity")) %>%
rbind(mutate(as.data.frame(dm4), model = "home range"))
write.csv(ms, "results/m1-4_modelselection.csv", row.names = FALSE)
best1
dm1
?tab_model
m1
summary(m1)
# best models
tab_model(m1, m2, m3, m4, m5, show.est = TRUE, show.se = TRUE, show.ci = FALSE)
# best models
tab_model(m1, m2, m3, m4, m5, show.est = TRUE, show.se = TRUE, show.ci = FALSE,
file = "results/m1-5_effects.csv")
# best models
tab_model(m1, m2, m3, m4, m5, show.est = TRUE, show.se = TRUE, show.ci = FALSE,
file = "results/m1-5_effects.cxls")
# best models
tab_model(m1, m2, m3, m4, m5, show.est = TRUE, show.se = TRUE, show.ci = FALSE,
file = "results/m1-5_effects.xls")
# plot predictions
ggplot(pred6, aes(date, predicted, ymin = lower, ymax = upper)) +
geom_line()+
geom_ribbon(alpha = 0.2)+
xlab(element_blank()) +
ylab("Predicted values of daily distance moved (m)") +
theme_minimal()+
facet_wrap(~period, scales = "free_x")
# summary
summary(best6)
# summary
summary(best7)
# plot predictions
ggplot(pred7, aes(date, predicted, ymin = lower, ymax = upper)) +
geom_line()+
geom_ribbon(alpha = 0.2)+
xlab(element_blank()) +
ylab("Predicted values of roost fidelity (m)") +
theme_minimal()+
facet_wrap(~period, scales = "free_x")
expm1(0.84193)
dm1
dm2
# summary
summary(best2)
# best models
tab_model(best1, best2, best3, best4, best5, show.est = TRUE, show.se = TRUE, show.ci = FALSE,
file = "results/m1-5_effects.xls")
# best models
tab_model(best1, best2, best3, best4, m5, show.est = TRUE, show.se = TRUE, show.ci = FALSE,
file = "results/m1-5_effects.xls")
# distribution of movement data
hist(datam1$daily_dist)
ggqqplot(datam1$daily_dist)
# distribution of movement data
hist(log(datam1$daily_dist))
# distribution of movement data
hist(sqrt(datam1$daily_dist))
ggqqplot(sqrt(datam1$daily_dist))
ggqqplot(datam1$daily_dist)
# summary
summary(best6)
# summary
summary(best7)
expm1(0.84193)
# summary
summary(best8)
# plot predictions
ggplot(pred8, aes(date, predicted, ymin = lower, ymax = upper)) +
geom_line()+
geom_ribbon(alpha = 0.2)+
xlab(element_blank()) +
ylab("Predicted values of roost fidelity (m)") +
theme_minimal()+
facet_wrap(~period, scales = "free_x")
# plot predictions
ggplot(pred8, aes(date, predicted, ymin = lower, ymax = upper)) +
geom_line()+
geom_ribbon(alpha = 0.2)+
xlab(element_blank()) +
ylab("Predicted values of release fidelity (m)") +
theme_minimal()+
facet_wrap(~period, scales = "free_x")
# summary
summary(best9)
# plot predictions
ggplot(pred9, aes(date, predicted, ymin = lower, ymax = upper)) +
geom_line()+
geom_ribbon(alpha = 0.2)+
xlab(element_blank()) +
ylab("Predicted values of home range size (ha)") +
theme_minimal()+
facet_wrap(~period, scales = "free_x")
# plot daily distance over time as period means
ggplot(sum9, aes(date, dist, ymin = lower, ymax = upper)) +
geom_path() +
geom_ribbon(alpha = 0.2) +
xlab("Days post-reinforcement") +
ylab("Home range (90% KUD) area (ha)") +
theme_minimal() +
scale_fill_viridis_d()+
scale_colour_viridis_d()+
geom_vline(aes(xintercept = as_date("2023-06-07")), colour = "purple")
dm9
View(dm9)
# parsimonious model where delta <2 and fewest predictors
# in this case only one model (top ranked) had delta AICc <2
best9 <- get.models(dm9, delta<2)[[2]]
# summary
summary(best9)
# parsimonious model where delta <2 and fewest predictors
# in this case two models had delta AICc <2 but the top ranked had fewer terms
best9 <- get.models(dm9, delta<2)[[1]]
# summary
summary(best9)
# best models
tab_model(best6, best7, best8, best9, show.est = TRUE, show.se = TRUE, show.ci = FALSE,
file = "results/m6-9_effects.xls")
write.csv(ms2, "results/m6-9_modelselection.csv", row.names = FALSE)
# model selection table
ms2 <- mutate(as.data.frame(dm6), model = "distance daily") %>%
rbind(mutate(as.data.frame(dm7), model = "roost displacement")) %>%
rbind(mutate(as.data.frame(dm8), model = "release fidelity")) %>%
rbind(mutate(as.data.frame(dm9), model = "home range"))
View(ms2)
write.csv(ms2, "results/m6-9_modelselection.csv", row.names = FALSE)
# social group membership
club <- c("Rowan", "Rory", "Fauna", "Zeus", "Rocky", "Sofi", "Loki", "Avery", "Maeve")
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# remove columns not needed
dplyr::select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1)) %>%
# add column for membership to social group
mutate(social = ifelse(id %in% club, "exclusive", "mixed")) %>%
# select only reinforcers
filter(cohort == "Reinforcing")
# Fit a survival model by social group
kmfit_social <- survfit(Surv(time, status) ~ social, data = surv_data)
summary(kmfit_social, times = c(1,30,54))
# plot
autoplot(kmfit_social)
# Fit Cox Model
cox <- coxph(Surv(time, status) ~ social, data = surv_data)
summary(cox)
# post-hoc comparison of slopes
emtrends(best1, pairwise ~ social, var = "elapsed")
# summary
summary(best1)
# post-hoc comparison of slopes
emtrends(best1, pairwise ~ social, var = "elapsed")
# plot predictions
ggplot(pred1, aes(x, predicted, fill = group, ymin = conf.low, ymax = conf.high)) +
geom_line(aes(colour = group))+
geom_ribbon(alpha = 0.2)+
xlab("Days post-reinforcement") +
ylab("Predicted values of daily distance moved (m)") +
theme_minimal()+
scale_fill_viridis_d()+
scale_colour_viridis_d()
# summary
summary(best2)
# plot predictions
ggplot(pred2, aes(x, predicted, fill = group, ymin = conf.low, ymax = conf.high)) +
geom_line(aes(colour = group))+
geom_ribbon(alpha = 0.2)+
xlab("Days post-reinforcement") +
ylab("Predicted values of roost displacement (m)") +
theme_minimal()+
scale_fill_viridis_d()+
scale_colour_viridis_d()
# summary
summary(best3)
# plot predictions
ggplot(pred3, aes(x, predicted, fill = group, ymin = conf.low, ymax = conf.high)) +
geom_line(aes(colour = group))+
geom_ribbon(alpha = 0.2)+
xlab("Days post-reinforcement") +
ylab("Predicted values of distance from release site (m)") +
theme_minimal()+
scale_fill_viridis_d()+
scale_colour_viridis_d()
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# remove columns not needed
dplyr::select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
km <- with(surv_data, Surv(time, status))
# Fit a basic survival model
kmfit <- survfit(Surv(time, status) ~ 1, data = surv_data)
# Estimated survival probabilities
summary(kmfit, times = c(1, 10, 30, 55, 100, 365))
# plot
autoplot(kmfit)
# Fit a survival model by cohort
kmfit_cohort <- survfit(Surv(time, status) ~ cohort, data = surv_data)
summary(kmfit_cohort, times = c(1,30,55))
# plot
autoplot(kmfit_cohort)
# Fit Cox Model
cox <- coxph(Surv(time, status) ~ cohort, data = surv_data)
summary(cox)
# set default theme options for all plots
labels <- c(`pre-reinforcement` = "Pre reinforcement",
`post-reinforcement` = "Post reinforcement")
theme <- function(){
list(
geom_line(),
geom_ribbon(alpha = 0.2),
xlab(element_blank()),
theme_bw(),
facet_wrap(~period, scales = "free_x",
labeller = as_labeller(labels)),
scale_x_date(date_breaks = "1 month", date_labels =  "%b"),
ggplot2::theme(axis.title.y = element_text(hjust = 0.5, size = 10),
axis.title.x = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
)
}
# list of plots
g6 <- ggplot(pred6, aes(date, predicted, ymin = lower, ymax = upper)) +
ylab("Daily distance moved (m)")+
theme()
g7 <- ggplot(pred7, aes(date, predicted, ymin = lower, ymax = upper)) +
ylab("Roost displacement (m)")+
theme()
g8 <- ggplot(pred8, aes(date, predicted, ymin = lower, ymax = upper)) +
ylab("Distance from release (m)")+
theme()
g9 <- ggplot(pred9, aes(date, predicted, ymin = lower, ymax = upper)) +
ylab("Home range area (ha)")+
theme()
# multi plot 3x2
combined_plot <- (g6 + g7)  / (g8 + g9) +
plot_annotation(tag_levels = 'A')
combined_plot
# save
ggsave("plots/resident_outcomes.png", dpi = 400, bg = 'white',
width = 20, height = 16, units = "cm")
# post hoc tests
e1 <- emmeans(best1, pairwise ~ social, type = "response")
View(e1)
# post hoc tests
e1 <- as.data.frame(emmeans(best1, pairwise ~ social, type = "response"))
# post hoc tests
e1 <- emmeans(best1, pairwise ~ social, type = "response")
e1
# post hoc tests
e1 <- as.data.frame(emmeans(best1, pairwise ~ social, type = "response"))
?emmeans
e1b <- as.data.frame(emtrends(best1, pairwise ~ social, var = "elapsed"))
View(e1b)
# post hoc tests
e1a <- mutate(as.data.frame(emmeans(best1, pairwise ~ social, type = "response")),
model = "distance daily"))
# post hoc tests
e1a <- mutate(as.data.frame(emmeans(best1, pairwise ~ social, type = "response")),
model = "distance daily")
View(e1a)
# post hoc tests
emm <- mutate(as.data.frame(emmeans(best1, pairwise ~ social, type = "response")),
model = "distance daily") %>%
rbind(mutate(as.data.frame(emtrends(best1, pairwise ~ social, var = "elapsed"))))
# post hoc tests
emm <- mutate(as.data.frame(emmeans(best1, pairwise ~ social, type = "response")),
model = "distance daily") %>%
rbind(mutate(as.data.frame(emtrends(best1, pairwise ~ social, var = "elapsed"))),
model = "distance daily")
# post hoc tests
as.data.frame(emmeans(best1, pairwise ~ social, type = "response")
# post hoc tests
as.data.frame(emmeans(best1, pairwise ~ social, type = "response"))
# post hoc tests
as.data.frame(emmeans(best1, pairwise ~ social, type = "response"))
# post hoc tests
means <-mutate(as.data.frame(emmeans(best1, pairwise ~ social, type = "response")),
model = "distance daily")
slopes <- mutate(as.data.frame(emtrends(best1, pairwise ~ social, var = "elapsed")),
model = "distance daily")
View(slopes)
View(means)
# post hoc tests
means <-mutate(as.data.frame(emmeans(best1, pairwise ~ social, type = "response")),
model = "distance daily") %>%
rbind(mutate(as.data.frame(emmeans(best2, pairwise ~ social, type = "response")),
model = "roost displacement"))
View(means)
temp <- (mutate(as.data.frame(emmeans(best2, pairwise ~ social, type = "response")),
model = "roost displacement"))
View(temp)
# post hoc tests
emmeans(best1, pairwise ~ social, type = "response")
emtrends(best1, pairwise ~ social, var = "elapsed")
# post hoc tests
temp <- emmeans(best1, pairwise ~ social, type = "response")
temp$contrasts
temp2 <- temp$contrasts
View(temp2)
temp2 <- temp$contrasts %>%
as.data.frame()
temp3 <- emtrends(best1, pairwise ~ social, var = "elapsed")
View(temp3)
temp4 <- temp3$contrasts %>%
as.data.frame()
View(temp4)
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = best1$call)
best1$modelInfo
best1$modelInfo$respCol
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = best1$modelInfo$respCol)
View(temp2)
# post hoc tests
names <- c("distance daily", "roost displacement", "release fidelity", "home range")
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = names[1])
View(temp2)
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = names[1],
type = means)
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = names[1],
type = "means")
View(temp2)
# post hoc tests
models <- c(best1, best2, best3, best4)
models[1]
out <- rbind(temp2, temp4)
temp4 <- temp3$contrasts %>%
as.data.frame() %>%
mutate(model = names[i],
type = "slopes")
out <- rbind(temp2, temp4)
temp4 <- temp3$contrasts %>%
as.data.frame() %>%
mutate(model = names[1],
type = "slopes")
out <- rbind(temp2, temp4)
View(out)
table <- data.frame()
# post hoc tests
models <- c(best1, best2, best3, best4)
names <- c("distance daily", "roost displacement", "release fidelity", "home range")
table <- data.frame()
for (i in 1:4){
temp <- emmeans(models[i], pairwise ~ social, type = "response")
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = names[i],
type = "means")
temp3 <- emtrends(best1, pairwise ~ social, var = "elapsed")
temp4 <- temp3$contrasts %>%
as.data.frame() %>%
mutate(model = names[i],
type = "slopes")
out <- rbind(temp2, temp4)
table <- rbind(table, out)
}
# post hoc tests
temp <- emmeans(best1, pairwise ~ social, type = "response")
temp <- emmeans(best1, pairwise ~ social, type = "response")
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = names[1],
type = "means")
temp3 <- emtrends(best1, pairwise ~ social, var = "elapsed")
temp4 <- temp3$contrasts %>%
as.data.frame() %>%
mutate(model = names[1],
type = "slopes")
out <- rbind(temp2, temp4)
View(out)
models[[1]]
models$obj
temp <- emmeans(best2, pairwise ~ social, type = "response")
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = names[2],
type = "means")
temp3 <- emtrends(best2, pairwise ~ social, var = "elapsed")
temp4 <- temp3$contrasts %>%
as.data.frame() %>%
mutate(model = names[2],
type = "slopes")
out <- rbind(temp2, temp4)
temp <- emmeans(best3, pairwise ~ social, type = "response")
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = names[3],
type = "means")
temp3 <- emtrends(best3, pairwise ~ social, var = "elapsed")
temp4 <- temp3$contrasts %>%
as.data.frame() %>%
mutate(model = names[3],
type = "slopes")
out <- rbind(temp2, temp4)
temp <- emmeans(best4, pairwise ~ social, type = "response")
temp2 <- temp$contrasts %>%
as.data.frame() %>%
mutate(model = names[4],
type = "means")
temp3 <- emtrends(best4, pairwise ~ social, var = "elapsed")
temp4 <- temp3$contrasts %>%
as.data.frame() %>%
mutate(model = names[4],
type = "slopes")
out <- rbind(temp2, temp4)
best1
summary(best1)
# best models
tab_model(best1, best2, best3, best4, m5, show.est = TRUE, show.se = TRUE, show.ci = FALSE,
file = "results/m1-5_effects.xls")
summary(best3)
summary(best6)
summary(best7)
summary(best8)
summary(best9)
