}
# characteristics of cluster data
hist(roosts$npoints)
summary(roosts$npoints)
# plot roosts by number of points
ggplot(roosts)+
geom_point(aes(easting, northing, size = npoints, colour = id))+
geom_path(aes(easting, northing, group = id), alpha = 0.3)+
coord_sf()+
scale_colour_viridis_d()+
theme_bw()
# plot for a single bird with date as colour
ggplot(data = filter(roosts, id == "Marmalade"))+
geom_point(aes(easting, northing, size = npoints, colour = as.Date(date)))+
geom_path(aes(easting, northing, group = id), alpha = 0.3)+
coord_sf()+
scale_colour_viridis_c()+
theme_bw()+
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
# save daily roost locations
write.csv(roosts, "results/daily_roost_location.csv", row.names = FALSE)
# read in roost locations, format as spatial
roosts <- read.csv("data/daily_roost_location.csv") %>%
dplyr::select(!"npoints") %>%
vect(geom = c("easting", "northing"), crs = "EPSG:32755") %>%
st_as_sf()
# read in day data
data_day <- read.csv("data/data_clean_day.csv")
# filter to test bird
test <- data_day %>%
filter(id == "Aurora")
# read in roost locations, format as spatial
roosts <- read.csv("results/daily_roost_location.csv") %>%
dplyr::select(!"npoints") %>%
vect(geom = c("easting", "northing"), crs = "EPSG:32755") %>%
st_as_sf()
# calculate distance between successive roosts per bird
birds <- unique(roosts$id)
distance_roosts <- data.frame()
for(i in 1:length(birds)){
# subset to individual
points <- filter(roosts, id==birds[i]) %>%
# date as posix
mutate(date = as.POSIXct(date, format = "%Y-%m-%d")) %>%
# ensure arranged by date
arrange(date) %>%
#add lag column for geometry comparison
mutate(previous = lag(geometry))
# allocate the release location as the first location
release <- st_sfc(st_point(c(274423.45, 5801912.85) ), crs = 32755) %>%
st_as_sf()
points$previous[1] <- release$x
# calculate the distance between successive points
out <- points %>%
mutate(distance_previous =
as.numeric(st_distance(points$geometry, points$previous, by_element = TRUE))) %>%
dplyr::select(!"previous")
# write out
distance_roosts <- rbind(distance_roosts, out)
}
# hist
hist(distance_roosts$distance_previous)
# transform to latlon
distance_roosts_latlon <- distance_roosts %>%
vect() %>%
project("EPSG:4326") %>%
st_as_sf() %>%
mutate(date = as_date(date))
# plot roosts with colour as distance from previous
ggplot()+
geom_sf(data = distance_roosts_latlon, aes(colour = distance_previous))+
scale_colour_viridis_c()+
theme_void()
map_z15 <- get_map(c(144.4380, -37.9000), zoom=15, maptype = "satellite")
# Google and STadia API key for ggmaps
ggmap::register_google(key = readChar("apikey_google.txt", nchars = file.info("apikey_google.txt")$size))
map_z15 <- get_map(c(144.4380, -37.9000), zoom=15, maptype = "satellite")
# plot roosts with colour as distance from previous
ggplot()+
geom_sf(data = distance_roosts_latlon, aes(colour = distance_previous))+
scale_colour_viridis_c()+
theme_void()
# plot roosts with colour as date
ggmap(map_z15)+
geom_sf(data = distance_roosts_latlon, aes(colour = date), inherit.aes = FALSE)+
scale_colour_viridis_c(trans = "date")+
theme_void()
# Convert df to points
points <- vect(distance_roosts_latlon)
# Define fence polygons (zones 1 and 2)
mtr <- rbind(
## zone 1
c(-37.897319, 144.429048), # S end of NW diagonal
c(-37.894066, 144.432334), # N end of NW diagonal, i.e. NW corner
c(-37.894749, 144.438305), # bend at main gate
c(-37.894693, 144.438324), # main gate
c(-37.894803, 144.439214), # bend before N Z1/2 gate
c(-37.894718, 144.439337), # N Z1/2 gate, i.e. NE corner
## zone 2
c(-37.892433, 144.440236), # N boundary internal aviary/Z2 i.e. NW corner
c(-37.892803, 144.443374), # Z2 northern boundary bend 1
c(-37.893634, 144.444076), # Z2 northern boundary bend 2
c(-37.894585, 144.447739), # N end of Z2/Z3 boundary, i.e. NE corner
c(-37.896515, 144.446789), # Z2/Z3 boundary bend 1
c(-37.896726, 144.446099), # Z2/Z3 boundary bend 2
c(-37.897964, 144.445706), # Z2/Z3 boundary bend 3
c(-37.899960, 144.444517), # S end of Z2/Z3 boundary, i.e. SE corner
# hashed lines are to remove the gap of the rock wallaby pen
#c(-37.899908, 144.444288), # Z2/btrw NE corner
#c(-37.898280, 144.440662), # Z1/btrw pen NW corner
## zone 1
#c(-37.900692, 144.440368), # Z1/btrw SW corner
#c(-37.902610, 144.443002), # Z1/btrw SE corner
c(-37.909538, 144.439648), # Z1 SE corner
c(-37.908999, 144.434965), # Z1 southern boundary bend 1
c(-37.907537, 144.433359), # Z1 southern boundary bend 2
c(-37.905958, 144.430140), # Z1 southern boundary bend 3
c(-37.905486, 144.429479), # Z1 southern boundary bend 4
c(-37.904649, 144.427566), # Z1 SW corner
c(-37.897319, 144.429048)  # S end of NW diagonal
) %>%  vect(type = "polygons", crs = "EPSG:4326") %>%
# transpose
t()
# Find points outside polygons
outside <- points[!relate(points, mtr, "intersects")] %>%
as.data.frame(geom = "XY")
# Plot points outside polygon
ggmap(map_z15)+
geom_point(data=outside, aes(x, y, colour = id), alpha = 0.7, size = 3)+
geom_spatvector(data=mtr, inherit.aes = FALSE, colour = "white", fill = NA)+
scale_colour_viridis_d()+
theme_void()
# convert geometry to regular columns to save to disk
distance_roosts2 <- distance_roosts_latlon %>%
st_drop_geometry() %>%
mutate(longitude = st_coordinates(distance_roosts_latlon$geometry)[,1],
latitude = st_coordinates(distance_roosts_latlon$geometry)[,2])
# plot on map without the far nutmeg point
ggmap(map_z15)+
geom_path(data = filter(distance_roosts2, distance_previous<2000),
aes(longitude, latitude, group = id), colour = "white", alpha = 0.6, inherit.aes = FALSE)+
geom_point(data = filter(distance_roosts2, distance_previous<2000),
aes(longitude, latitude, colour = distance_previous), inherit.aes = FALSE)+
scale_colour_viridis_c()+
theme_void()
# write to file
write.csv(distance_roosts2, "results/daily_distance_between_roosts.csv", row.names = FALSE)
# release coords as spatial
release  <- st_sfc(st_point(c(274423.45, 5801912.85) ), crs = 32755)
# calculate distance between roosts and release site
dist <- roosts %>%
mutate(dist_release = as.numeric(st_distance(release, roosts))) %>%
# keep max distance per day
group_by(date, id) %>%
filter(dist_release == max(dist_release)) %>%
ungroup() %>%
# add cohort information
left_join(dplyr::select(metadata, c("cohort", "id"))) %>%
# format date as a date
mutate(date = as_date(date)) %>%
# arrange by date
arrange(date) %>%
# drop geometry
st_drop_geometry()
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity)
# calculate distance between roosts and release site
dist <- roosts %>%
mutate(dist_release = as.numeric(st_distance(release, roosts))) %>%
# keep max distance per day
group_by(date, id) %>%
filter(dist_release == max(dist_release)) %>%
ungroup() %>%
# format date as a date
mutate(date = as_date(date)) %>%
# arrange by date
arrange(date) %>%
# drop geometry
st_drop_geometry()
View(dist)
# plot roosts with colour as distance from release
ggmap(map_z15)+
geom_sf(data = dist, aes(colour = dist_release), inherit.aes = FALSE)+
scale_colour_viridis_c(trans = "date")+
theme_void()
# plot roosts with colour as distance from release
ggmap(map_z15)+
geom_sf(data = dist, aes(colour = dist_release), inherit.aes = FALSE)+
scale_colour_viridis_c()+
theme_void()
# calculate distance between roosts and release site
dist <- roosts %>%
mutate(dist_release = as.numeric(st_distance(release, roosts))) %>%
# keep max distance per day
group_by(date, id) %>%
filter(dist_release == max(dist_release)) %>%
ungroup() %>%
# format date as a date
mutate(date = as_date(date)) %>%
# arrange by date
arrange(date)
# plot roosts with colour as distance from release
ggmap(map_z15)+
geom_sf(data = dist, aes(colour = dist_release), inherit.aes = FALSE)+
scale_colour_viridis_c()+
theme_void()
# calculate distance between roosts and release site
dist <- roosts %>%
mutate(dist_release = as.numeric(st_distance(release, roosts))) %>%
# keep max distance per day
group_by(date, id) %>%
filter(dist_release == max(dist_release)) %>%
ungroup() %>%
# format date as a date
mutate(date = as_date(date)) %>%
# arrange by date
arrange(date) %>%
# transform to lat lon
project("EPSG:4326")
# calculate distance between roosts and release site
dist <- roosts %>%
mutate(dist_release = as.numeric(st_distance(release, roosts))) %>%
# keep max distance per day
group_by(date, id) %>%
filter(dist_release == max(dist_release)) %>%
ungroup() %>%
# format date as a date
mutate(date = as_date(date)) %>%
# arrange by date
arrange(date) %>%
# transform to lat lon
vect() %>%
project("EPSG:4326")
# plot roosts with colour as distance from release
ggmap(map_z15)+
geom_sf(data = dist, aes(colour = dist_release), inherit.aes = FALSE)+
scale_colour_viridis_c()+
theme_void()
# format as data frame
dist <- st_as_sf(dist)
View(dist)
# format as data frame
dist <- st_as_sf(dist) %>%
st_drop_geometry()
View(dist)
# save to file
write.csv(dist, "results/daily_roost_distance_from_release.csv", row.names = FALSE)
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC")) %>%
# Add date
mutate(date = as_date(time_local, tz = "Australia/Melbourne"))%>%
filter(!id %in% c("Wobbles", "Star"))
# set up data in spatial points dataframe
locs <- SpatialPointsDataFrame(coordinates(
cbind(data$easting, data$northing)), data = data)
# home range polygon per bird per day 🐢 15 minutes
birds <- as.character(unique(data$id))
days <- unique(locs[["date"]])
# Create empty dataframes for both 50% and 90% KUDs
hr50_daily <- data.frame()
hr90_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points) < 5){
next
}
# Calculate KUD once
kud <- kernelUD(points[,1], h="href", grid=200, extent = 4)
# Get both 50% and 90% contours from the same KUD object
kud90 <- getverticeshr(kud, percent = 90)
kud50 <- getverticeshr(kud, percent = 50)
# Set projection for both
proj4string(kud90) <- CRS("EPSG:32754")
proj4string(kud50) <- CRS("EPSG:32754")
# Convert to sf and add date
kud90_df_utm <- st_as_sf(kud90) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "90")
kud50_df_utm <- st_as_sf(kud50) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "50")
# Append to respective dataframes
hr90_daily <- rbind.data.frame(hr90_daily, kud90_df_utm)
hr50_daily <- rbind.data.frame(hr50_daily, kud50_df_utm)
# Print progress
print(paste("Completed:", birds[i], "on", days[j]))
}
}
# Create empty dataframes for both 50% and 90% KUDs
hr50_daily <- data.frame()
hr90_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points) < 5){
next
}
# Calculate KUD once
kud <- kernelUD(points[,1], h="href", grid=200, extent = 5)
# Get both 50% and 90% contours from the same KUD object
kud90 <- getverticeshr(kud, percent = 90)
kud50 <- getverticeshr(kud, percent = 50)
# Set projection for both
proj4string(kud90) <- CRS("EPSG:32754")
proj4string(kud50) <- CRS("EPSG:32754")
# Convert to sf and add date
kud90_df_utm <- st_as_sf(kud90) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "90")
kud50_df_utm <- st_as_sf(kud50) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "50")
# Append to respective dataframes
hr90_daily <- rbind.data.frame(hr90_daily, kud90_df_utm)
hr50_daily <- rbind.data.frame(hr50_daily, kud50_df_utm)
# Print progress
print(paste("Completed:", birds[i], "on", days[j]))
}
}
# Create empty dataframes for both 50% and 90% KUDs
hr50_daily <- data.frame()
hr90_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points) < 5){
next
}
# Calculate KUD once
kud <- kernelUD(points[,1], h="href", grid=100, extent = 2.5)
# Get both 50% and 90% contours from the same KUD object
kud90 <- getverticeshr(kud, percent = 90)
kud50 <- getverticeshr(kud, percent = 50)
# Set projection for both
proj4string(kud90) <- CRS("EPSG:32754")
proj4string(kud50) <- CRS("EPSG:32754")
# Convert to sf and add date
kud90_df_utm <- st_as_sf(kud90) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "90")
kud50_df_utm <- st_as_sf(kud50) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "50")
# Append to respective dataframes
hr90_daily <- rbind.data.frame(hr90_daily, kud90_df_utm)
hr50_daily <- rbind.data.frame(hr50_daily, kud50_df_utm)
# Print progress
print(paste("Completed:", birds[i], "on", days[j]))
}
}
# Create empty dataframes for both 50% and 90% KUDs
hr50_daily <- data.frame()
hr90_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points) < 5){
next
}
# Calculate KUD once
kud <- kernelUD(points[,1], h="href", grid=100, extent = 3)
# Get both 50% and 90% contours from the same KUD object
kud90 <- getverticeshr(kud, percent = 90)
kud50 <- getverticeshr(kud, percent = 50)
# Set projection for both
proj4string(kud90) <- CRS("EPSG:32754")
proj4string(kud50) <- CRS("EPSG:32754")
# Convert to sf and add date
kud90_df_utm <- st_as_sf(kud90) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "90")
kud50_df_utm <- st_as_sf(kud50) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "50")
# Append to respective dataframes
hr90_daily <- rbind.data.frame(hr90_daily, kud90_df_utm)
hr50_daily <- rbind.data.frame(hr50_daily, kud50_df_utm)
# Print progress
print(paste("Completed:", birds[i], "on", days[j]))
}
}
# Create empty dataframes for both 50% and 90% KUDs
hr50_daily <- data.frame()
hr90_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points) < 5){
next
}
# Calculate KUD once
kud <- kernelUD(points[,1], h="href", grid=200, extent = 4)
# Get both 50% and 90% contours from the same KUD object
kud90 <- getverticeshr(kud, percent = 90)
kud50 <- getverticeshr(kud, percent = 50)
# Set projection for both
proj4string(kud90) <- CRS("EPSG:32754")
proj4string(kud50) <- CRS("EPSG:32754")
# Convert to sf and add date
kud90_df_utm <- st_as_sf(kud90) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "90")
kud50_df_utm <- st_as_sf(kud50) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "50")
# Append to respective dataframes
hr90_daily <- rbind.data.frame(hr90_daily, kud90_df_utm)
hr50_daily <- rbind.data.frame(hr50_daily, kud50_df_utm)
# Print progress
print(paste("Completed:", birds[i], "on", days[j]))
}
}
# Create empty dataframes for both 50% and 90% KUDs
hr50_daily <- data.frame()
hr90_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points) < 5){
next
}
# Calculate KUD once
kud <- kernelUD(points[,1], h="href", grid=300, extent = 6)
# Get both 50% and 90% contours from the same KUD object
kud90 <- getverticeshr(kud, percent = 90)
kud50 <- getverticeshr(kud, percent = 50)
# Set projection for both
proj4string(kud90) <- CRS("EPSG:32754")
proj4string(kud50) <- CRS("EPSG:32754")
# Convert to sf and add date
kud90_df_utm <- st_as_sf(kud90) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "90")
kud50_df_utm <- st_as_sf(kud50) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "50")
# Append to respective dataframes
hr90_daily <- rbind.data.frame(hr90_daily, kud90_df_utm)
hr50_daily <- rbind.data.frame(hr50_daily, kud50_df_utm)
# Print progress
print(paste("Completed:", birds[i], "on", days[j]))
}
}
# Create empty dataframes for both 50% and 90% KUDs
hr50_daily <- data.frame()
hr90_daily <- data.frame()
for (i in 1:length(birds)){
for (j in 1:length(days)){
points <- subset(locs, id == birds[i] & date == days[j],
select = id)
if (length(points) < 5){
next
}
# Calculate KUD once
kud <- kernelUD(points[,1], h="href", grid=250, extent = 6)
# Get both 50% and 90% contours from the same KUD object
kud90 <- getverticeshr(kud, percent = 90)
kud50 <- getverticeshr(kud, percent = 50)
# Set projection for both
proj4string(kud90) <- CRS("EPSG:32754")
proj4string(kud50) <- CRS("EPSG:32754")
# Convert to sf and add date
kud90_df_utm <- st_as_sf(kud90) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "90")
kud50_df_utm <- st_as_sf(kud50) %>%
mutate(date = days[j],
id = birds[i],
hr_level = "50")
# Append to respective dataframes
hr90_daily <- rbind.data.frame(hr90_daily, kud90_df_utm)
hr50_daily <- rbind.data.frame(hr50_daily, kud50_df_utm)
# Print progress
print(paste("Completed:", birds[i], "on", days[j]))
}
}
# Packages
pacman::p_load(adehabitatHR, amt, atlastools, beepr, cowplot, effects, emmeans, flextable, ggeffects, ggfortify, ggmap, ggnewscale, ggforce, ggpubr, ggraph, ggridges, ggspatial, glmmTMB, gtools, igraph, janitor, jtools, lme4, lmerTest, move2, momentuHMM, MuMIn, ozmaps, patchwork, performance, plotrix, readxl, scales, scattermore, sf, showtext, sjPlot, sp, suncalc, survival, survminer, terra, tidygraph, tidyterra, tidyverse, tmap, viridis, wildlifeDI)
# Packages
pacman::p_load(adehabitatHR, amt, atlastools, beepr, cowplot, effects, emmeans, flextable, ggeffects, ggfortify, ggmap, ggnewscale, ggforce, ggpubr, ggraph, ggridges, ggspatial, glmmTMB, gtools, igraph, janitor, jtools, lme4, lmerTest, move2, momentuHMM, MuMIn, ozmaps, patchwork, performance, plotrix, readxl, scales, scattermore, sf, showtext, sjPlot, sp, suncalc, survival, survminer, terra, tidygraph, tidyterra, tidyverse, tmap, viridis, wildlifeDI)
