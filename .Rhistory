contacts <- conProcess(move,dc=30,tc=80)
# read in night data
data <- read.csv("data/data_cleaned.csv") %>%
# format time as posixct
mutate(time_local = as.POSIXct(time_local),
date = as_date(date))
# drop birds excluded from analyses
filter(!id %in% c("Wobbles", "Star"))
# read in night data
data <- read.csv("data/data_cleaned.csv") %>%
# format time as posixct
mutate(time_local = as.POSIXct(time_local)) %>%
# Add date
mutate(date = as_date(time_local, tz = "Australia/Melbourne")) %>%
# drop birds excluded from analyses
filter(!id %in% c("Wobbles", "Star"))
# read in night data
data <- read.csv("data/data_cleaned.csv") %>%
# format time as posixct
mutate(time_local = as.POSIXct(time_local)) %>%
# Add date
mutate(date = as_date(time_local, tz = "Australia/Melbourne")) %>%
# drop birds excluded from analyses
filter(!id %in% c("Wobbles", "Star"))
# summarise sampling rate to decide on temporal interaction threshold
steps <- data %>%
# format as amt track - add columns as needed
make_track(.x = easting, .y = northing, .t = time_local, id = id, date_bird = date_bird)
# summarise sampling rate to decide on temporal interaction threshold
steps <- data %>%
# format as amt track - add columns as needed
make_track(.x = easting, .y = northing, .t = time_local, id = id)
summarize_sampling_rate(steps)
str(data)
# summarise sampling rate to decide on temporal interaction threshold
steps <- data %>%
# format as amt track - add columns as needed
make_track(.x = easting, .y = northing, .t = time_local, id = id) %>%
arrange(id)
summarize_sampling_rate(steps)
# summarise sampling rate to decide on temporal interaction threshold
steps <- data %>%
# format as amt track - add columns as needed
make_track(.x = easting, .y = northing, .t = time_local, id = id) %>%
nest(data = -"id")
steps
summarize_sampling_rate(steps)
steps
map(summarize_sampling_rate(steps))
summarize_sampling_rate_many(steps)
summarize_sampling_rate_many(steps, c("id"))
summarize_sampling_rate(steps, c("id"))
summarize_sampling_rate(steps)
map(steps, function(x)
summarize_sampling_rate())
map(steps, function(x)
x %>% summarize_sampling_rate())
x <- trk1$data[[1]]
x <- steps$data[[1]]
map(steps, function(x)
x %>% summarize_sampling_rate())
summarize_sampling_rate(steps)
sampling_rates <- steps %>%
transmute(id, summary = map(data, summarize_sampling_rate)) %>%
unnest(summary)
View(sampling_rates)
mean(sampling_rates$mean)
mean(sampling_rates$mean)/60
View(steps)
View(data)
# format track data as move2 object
move <- mt_as_move2(data, coords = c("easting", "northing"), time_column = "time_local", track_id_column = "id") %>%
# add crs
sf::st_set_crs("EPSG:32755") %>%
# needed to omit NAs for conProcess to work
na.omit()
# one month subset
temp <- seq.Date(from = as_date("2023-08-01"), to = as_date("2023-09-01"), by = "day")
move_subset <- subset(move, date %in% temp)
# one month subset
temp <- seq.Date(from = as_date("2023-08-01"), to = as_date("2023-08-08"), by = "day")
move_subset <- subset(move, date %in% temp)
# one week subset
temp <- seq.Date(from = as_date("2023-08-01"), to = as_date("2023-08-07"), by = "day")
move_subset <- subset(move, date %in% temp)
move_subset <- filter(move, date %in% temp)
View(move_subset)
View(data)
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne")) %>%
# Add date
mutate(date = as_date(time_local, tz = "Australia/Melbourne"))
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne")) %>%
# Add date
mutate(date = as_date(time_local, tz = "Australia/Melbourne")) %>%
# drop birds excluded from analyses
filter(!id %in% c("Wobbles", "Star"))
str(data)
# summarise sampling rate to decide on temporal interaction threshold
steps <- data %>%
make_track(.x = easting, .y = northing, .t = time_local, id = id) %>%
nest(data = -"id")
View(data)
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne")) %>%
# Add date
mutate(date = as_date(time_local, tz = "Australia/Melbourne")) %>%
# drop birds excluded from analyses
filter(!id %in% c("Wobbles", "Star")) %>%
# drop NAs
na.omit()
# summarise sampling rate to decide on temporal interaction threshold
steps <- data %>%
make_track(.x = easting, .y = northing, .t = time_local, id = id) %>%
nest(data = -"id")
sampling_rates <- steps %>%
transmute(id, summary = map(data, summarize_sampling_rate)) %>%
unnest(summary)
View(sampling_rates)
mean(sampling_rates$mean)/60
mean(sampling_rates$mean)
View(sampling_rates)
# format track data as move2 object
move <- mt_as_move2(data, coords = c("easting", "northing"), time_column = "time_local", track_id_column = "id") %>%
# add crs
sf::st_set_crs("EPSG:32755") %>%
# needed to omit NAs for conProcess to work
na.omit()
# one week subset
temp <- seq.Date(from = as_date("2023-08-01"), to = as_date("2023-08-07"), by = "day")
move_subset <- filter(move, date %in% temp)
View(move_subset)
# one week subset
temp <- seq.Date(from = as_date("2023-06-01"), to = as_date("2023-06-07"), by = "day")
move_subset <- filter(move, date %in% temp)
# plot distribution of paired fixes by distance
dcPlot(move_subset,tc=80,dmax=500)
# plot distribution of paired fixes by distance
dcPlot(move_subset,tc=8*60,dmax=500)
dcPlot(move_subset,tc=8*60,dmax=100)
dcPlot(move_subset,tc=600,dmax=100)
# calculate proximity contact events
contacts <- conProcess(move,dc=30,tc=600)
# plot distribution of paired fixes by distance
dcPlot(move_subset,tc=4*60,dmax=500)
dcPlot(move_subset,tc=4*60,dmax=100)
# format track data as move2 object
move <- mt_as_move2(data, coords = c("easting", "northing"), time_column = "time_local", track_id_column = "id") %>%
# add crs
sf::st_set_crs("EPSG:32755") %>%
# needed to omit NAs for conProcess to work
na.omit()
# calculate proximity contact events
contacts <- conProcess(move,dc=30,tc=4*60)
# save output
write.csv(contacts, "data/contact_events.csv", row.names = FALSE)
View(contacts)
# ratio of contact to non-contact events
table(contacts$contact)
349409/743105
# find periods of continous interaction, defined as within 1 hour
contact_period <- conPhase(contacts, pc=60*60)
View(contact_period)
# calculate summary statistics about interaction durations
contact_summary <- contact_period %>%
st_drop_geometry() %>%
filter(!is.na(contact_pha)) %>%
group_by(contact_pha) %>%
summarise(nfix = n(),
t1 = min(date),
t2 = max(date),
duration = max(date)-min(date),
avg_d = mean(contact_d,na.rm=T),
min_d = min(contact_d,na.rm=T),
max_d = max(contact_d,na.rm=T))
??st_drop_geometry
# calculate summary statistics about interaction durations
contact_summary <- contact_period %>%
sf::st_drop_geometry() %>%
filter(!is.na(contact_pha)) %>%
group_by(contact_pha) %>%
summarise(nfix = n(),
t1 = min(date),
t2 = max(date),
duration = max(date)-min(date),
avg_d = mean(contact_d,na.rm=T),
min_d = min(contact_d,na.rm=T),
max_d = max(contact_d,na.rm=T))
View(contact_summary)
View(contact_period)
# calculate summary statistics about interaction durations
contact_summary <- contact_period %>%
sf::st_drop_geometry() %>%
filter(!is.na(contact_pha)) %>%
group_by(contact_pha) %>%
summarise(nfix = n(),
t1 = min(time_local),
t2 = max(time_local),
duration = max(time_local)-min(time_local),
avg_d = mean(contact_d,na.rm=T),
min_d = min(contact_d,na.rm=T),
max_d = max(contact_d,na.rm=T))
View(contact_summary)
# histogram contact distances
hist(contact_summary$avg_d)
252736/60
252736/60/60
# histogram contact durations
hist(contact_summary$duration)
# histogram contact durations
hist(as.numeric(contact_summary$duration))
# calculate summary statistics about interaction durations
contact_summary <- contact_period %>%
sf::st_drop_geometry() %>%
filter(!is.na(contact_pha)) %>%
group_by(contact_pha) %>%
summarise(nfix = n(),
t1 = min(time_local),
t2 = max(time_local),
duration = difftime(max(time_local), min(time_local), units = "mins"),
avg_d = mean(contact_d,na.rm=T),
min_d = min(contact_d,na.rm=T),
max_d = max(contact_d,na.rm=T))
View(contact_summary)
# calculate summary statistics about interaction durations
contact_summary <- contact_period %>%
sf::st_drop_geometry() %>%
filter(!is.na(contact_pha)) %>%
group_by(contact_pha) %>%
summarise(nfix = n(),
t1 = min(time_local),
t2 = max(time_local),
duration = difftime(max(time_local), min(time_local), units = "secs"),
avg_d = mean(contact_d,na.rm=T),
min_d = min(contact_d,na.rm=T),
max_d = max(contact_d,na.rm=T))
View(contact_summary)
# calculate summary statistics about interaction durations
contact_summary <- contact_period %>%
sf::st_drop_geometry() %>%
filter(!is.na(contact_pha)) %>%
group_by(contact_pha) %>%
summarise(nfix = n(),
t1 = min(time_local),
t2 = max(time_local),
duration = as.numeric(
difftime(max(time_local), min(time_local), units = "secs")),
avg_d = mean(contact_d,na.rm=T),
min_d = min(contact_d,na.rm=T),
max_d = max(contact_d,na.rm=T))
View(contact_summary)
# histogram contact durations
hist(contact_summary$duration)
# calculate summary statistics about interaction durations
contact_summary <- contact_period %>%
sf::st_drop_geometry() %>%
filter(!is.na(contact_pha)) %>%
group_by(contact_pha) %>%
summarise(nfix = n(),
t1 = min(time_local),
t2 = max(time_local),
duration = as.numeric(
difftime(max(time_local), min(time_local), units = "mins")),
avg_d = mean(contact_d,na.rm=T),
min_d = min(contact_d,na.rm=T),
max_d = max(contact_d,na.rm=T))
# calculate summary statistics about interaction durations
contact_summary <- contact_period %>%
sf::st_drop_geometry() %>%
filter(!is.na(contact_pha)) %>%
group_by(contact_pha) %>%
summarise(nfix = n(),
t1 = min(time_local),
t2 = max(time_local),
duration = as.numeric(
difftime(max(time_local), min(time_local), units = "secs")/60),
avg_d = mean(contact_d,na.rm=T),
min_d = min(contact_d,na.rm=T),
max_d = max(contact_d,na.rm=T))
# calculate summary statistics about interaction durations
contact_summary <- contact_period %>%
sf::st_drop_geometry() %>%
filter(!is.na(contact_pha)) %>%
group_by(contact_pha) %>%
summarise(nfix = n(),
t1 = min(time_local),
t2 = max(time_local),
duration = as.numeric(
difftime(max(time_local), min(time_local), units = "secs"))/60,
avg_d = mean(contact_d,na.rm=T),
min_d = min(contact_d,na.rm=T),
max_d = max(contact_d,na.rm=T))
View(contact_summary)
# histogram contact durations
hist(contact_summary$duration)
# calculate summary statistics about interaction durations
contact_summary <- contact_period %>%
sf::st_drop_geometry() %>%
filter(!is.na(contact_pha)) %>%
group_by(contact_pha) %>%
summarise(nfix = n(),
t1 = min(time_local),
t2 = max(time_local),
duration = as.numeric(
difftime(max(time_local), min(time_local), units = "mins")),
avg_d = mean(contact_d,na.rm=T),
min_d = min(contact_d,na.rm=T),
max_d = max(contact_d,na.rm=T))
500/60
# save output
write.csv(contact_period, "data/contact_events.csv", row.names = FALSE)
# geometry to columns
contact2 <- contact_period %>%
mutate(easting = sf::st_coordinates(.)[,1],
northing = sf::st_coordinates(.)[,2])
View(contact2)
# geometry to columns
contact2 <- contact_period %>%
mutate(easting = sf::st_coordinates(.)[,1],
northing = sf::st_coordinates(.)[,2]) %>%
# drop geometry
sf::st_drop_geometry()
# save output
write.csv(contact2, "data/contact_events.csv", row.names = FALSE)
# geometry to columns
contact2 <- contact_period %>%
mutate(easting = sf::st_coordinates(.)[,1],
northing = sf::st_coordinates(.)[,2]) %>%
# drop geometry
sf::st_drop_geometry() %>%
# as data frame
as_data_frame()
# geometry to columns
contact2 <- contact_period %>%
mutate(easting = sf::st_coordinates(.)[,1],
northing = sf::st_coordinates(.)[,2]) %>%
# drop geometry
sf::st_drop_geometry() %>%
# as data frame
as.data.frame()
View(contact2)
# save output
write.csv(contact2, "data/contact_events.csv", row.names = FALSE)
install_github("ctross/STRAND")
devtools::install_github("ctross/STRAND")
# Packages
pacman::p_load(adehabitatHR, amt, atlastools, beepr, CmdStanR, ggfortify, ggmap, ggnewscale, ggpubr, ggridges, janitor, lme4, lmerTest, move2, momentuHMM, scattermore, sf, Stan, suncalc, survival, survminer, terra, tidyterra, tidyverse, wildlifeDI)
remotes::install_github("stan-dev/cmdstanr")
install_cmdstan()
cmdstanr::install_cmdstan()
install.packages("Rtools44")
# Extra packages for STRAND - do this once only
cmdstanr::check_cmdstan_toolchain()
install.Rtools(check = TRUE, check_r_update = TRUE, GUI = TRUE)
installr::install.Rtools(check = TRUE, check_r_update = TRUE, GUI = TRUE)
install.packages("installr")
# Extra packages for STRAND - do this once only
installr::install.Rtools(check = TRUE, check_r_update = TRUE, GUI = TRUE)
# Extra packages for STRAND - do this once only
installr::install.Rtools(check = TRUE, check_r_update = TRUE)
# Extra packages for STRAND - do this once only
installr::install.Rtools()
library(installr)
# Extra packages for STRAND - do this once only
installr::install.Rtools()
cmdstanr::check_cmdstan_toolchain()
cmdstanr::install_cmdstan()
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
remotes::install_github("ctross/STRAND")
# Packages
pacman::p_load(adehabitatHR, amt, atlastools, beepr, ggfortify, ggmap, ggnewscale, ggpubr, ggridges, janitor, lme4, lmerTest, move2, momentuHMM, scattermore, sf, STRAND, suncalc, survival, survminer, terra, tidyterra, tidyverse, wildlifeDI)
load("C:/Users/shosh/Downloads/Baboon_Data.RData")
View(Baboon_Data)
Baboon_Data[["Exposure"]]
cons <- conProcess(move, dc=30, tc=4*60, return='contacts')
View(contact2)
View(contacts)
Baboon_Data[["Grooming"]]
# read in contact data
data <- read.csv("data/contact_events.csv")
# read in contact data
data <- read.csv("data/contact_events.csv")
View(data)
str(data)
# find periods of continous interaction, defined as within 1 hour
contact_period <- conPhase(data, pc=60*60)
contacts <- mt_as_move2(data)
# interaction list
interact <- data %>%
select(c(id, contact_id, contact))
View(interact)
# interaction list
interact <- data %>%
select(c(id, contact_id, contact)) %>%
# pivot wider
pivot_wider(
names_from = contact_id,
values_from = contact,
values_fill = 0
)
# interaction list
interact <- data %>%
select(c(id, contact_id, contact)) %>%
group_by(id, contact_id) %>%
summarise(contact)
View(interact)
# interaction list
interact <- data %>%
select(c(id, contact_id, contact)) %>%
group_by(id, contact_id) %>%
reframe(contact)
View(interact)
# read in contact data
data <- read.csv("data/contact_events.csv")
# interaction list
interact <- data %>%
select(c(id, contact_id, contact)) %>%
group_by(id, contact_id) %>%
summarise(contacts = sum(contact))
View(interact)
View(interact)
# interaction list
interact <- data %>%
select(c(id, contact_id, contact)) %>%
group_by(id, contact_id) %>%
summarise(contacts = sum(contact)) %>%
na.omit()
# interaction list
interact <- data %>%
select(c(id, contact_id, contact)) %>%
summarise(contacts = sum(contact)) %>%
na.omit()
# interaction list
interact <- data %>%
select(c(id, contact_id, contact)) %>%
group_by(id, contact_id) %>%
summarise(contacts = sum(contact)) %>%
na.omit()
View(interact)
# interaction list
interact <- data %>%
select(c(id, contact_id, contact)) %>%
group_by(id, contact_id) %>%
summarise(contacts = sum(contact)) %>%
na.omit() %>%
pivot_wider(names_from = contact_id)
# interaction list
interact <- data %>%
select(c(id, contact_id, contact)) %>%
group_by(id, contact_id) %>%
summarise(contacts = sum(contact)) %>%
na.omit() %>%
pivot_wider(names_from = contact_id, values_from = contacts)
View(interact)
# interaction list
interact <- data %>%
select(c(id, contact_id, contact)) %>%
group_by(id, contact_id) %>%
summarise(contacts = sum(contact)) %>%
na.omit() %>%
pivot_wider(names_from = contact_id, values_from = contacts) %>%
replace_na(0)
# interaction list
interact <- data %>%
select(c(id, contact_id, contact)) %>%
group_by(id, contact_id) %>%
summarise(contacts = sum(contact)) %>%
na.omit() %>%
pivot_wider(names_from = contact_id, values_from = contacts) %>%
replace_na(c(0))
# interaction list
interact <- data %>%
select(c(id, contact_id, contact)) %>%
group_by(id, contact_id) %>%
summarise(contacts = sum(contact)) %>%
na.omit() %>%
pivot_wider(names_from = contact_id, values_from = contacts, values_fill = 0)
View(interact)
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity,
mortality = mortality_or_capture) %>%
mutate(start_date = as_date(dmy(start_date)),
end_date = as_date(dmy(end_date)),
mortality = as_date(dmy(mortality)))
View(metadata)
res_dates <- seq.Date(from = as_date("2023-01-16"), to = as_date("2023-06-06"), by = "day")
str(data)
# read in contact data
data <- read.csv("data/contact_events.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne")) %>%
# Add date
mutate(date = as_date(time_local, tz = "Australia/Melbourne"))
# subset to dates
data_resident <- data %>%
filter(dat %in% res_dates)
# subset to dates
data_resident <- data %>%
filter(date %in% res_dates)
