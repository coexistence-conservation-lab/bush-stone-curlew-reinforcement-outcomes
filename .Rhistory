temp <- data %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local),
time_utc = as.POSIXct(time_utc))
View(temp)
View(data)
temp <- data %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC"))
View(temp)
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC"))
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC"))
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC"),
date = as.Date(time_local))
# Summary statistic: number of tracked days
length(unique(data$date))
# Summary statistic: total number of tracked days per bird
summary <- data %>%
group_by(id) %>%
summarise(unique(date))
View(summary)
# Summary statistic: total number of tracked days per bird
summary <- data %>%
group_by(id) %>%
summarise(length(unique(date)))
# Summary statistic: total number of tracked days per bird
data %>%
group_by(id) %>%
summarise(length(unique(date)))
# Summary statistic: total number of tracked days per bird
print(n=35)
# Summary statistic: total number of tracked days per bird
print(data %>%
group_by(id) %>%
summarise(length(unique(date))), n=35)
View(summary)
sum())
summarise(length(unique(date)
summarise(length(unique(date))
summarise(length(unique(date))
temp <- data %>%
temp <- data %>%
group_by(id) %>%
summarise(length(unique(date)))
View(temp)
temp <- data %>%
group_by(id) %>%
summarise(length(unique(date))) %>%
sum(2)
names(temp)
temp <- data %>%
group_by(id) %>%
summarise(length(unique(date))) %>%
sum(length(unique(date)))
temp <- data %>%
group_by(id) %>%
summarise(days = length(unique(date))) %>%
summarise()
View(temp)
temp <- data %>%
group_by(id) %>%
summarise(days = length(unique(date))) %>%
summarise(birddays = sum(days))
View(temp)
print(data %>%
group_by(id) %>%
summarise(days = length(unique(date))) %>%
summarise(birddays = sum(days)))
# Summary statistic: total number of tracked days per bird
print(data %>%
group_by(id) %>%
summarise(length(unique(date))), n=35)
View(data)
# Packages
pacman::p_load(amt, atlastools, beepr, janitor, ggmap, sf, terra, tidyterra, tidyverse)
# Make amt format tracks
track <- data %>%
make_track(x_ = utm_easting, y_ = utm_northing, t_ = time_local, id = id)
# Make amt format tracks
track <- data %>%
make_track(.x = utm_easting, .y = utm_northing, .t = time_local, id = id)
# Make amt format tracks
track <- data %>%
na.rm()
# Make amt format tracks
track <- data %>%
na.omit()
# Make amt format tracks
track <- data %>%
na.omit() %>%
make_track(.x = utm_easting, .y = utm_northing, .t = time_local, id = id)
summarize_sampling_rate(track)
View(track)
View(track)
# Make amt format tracks
track <- data %>%
na.omit() %>%
make_track(.x = utm_easting, .y = utm_northing, .t = time_local, id = id) %>%
# add step length
mutate(step = step_lengths())
# Make amt format tracks
track <- data %>%
na.omit() %>%
make_track(.x = utm_easting, .y = utm_northing, .t = time_local, id = id) %>%
# add step length
mutate(step = step_lengths(track))
View(track)
# Make amt format tracks
test <- data %>%
na.omit() %>%
make_track(.x = utm_easting, .y = utm_northing, .t = time_local, id = id) %>%
# add step length
mutate(step = step_lengths(test))
# Step length density
ggplot() +
geom_density(aes(step, fill = factor(id)), alpha = 0.4)+
scale_colour_viridis_d()+
theme_bw()
# Step length density
ggplot() +
geom_density(aes(step, fill = factor(id)), alpha = 0.4)+
scale_colour_viridis_d()+
theme_bw()
# Step length density
ggplot() +
geom_density(aes(step, fill = id), alpha = 0.4)+
scale_colour_viridis_d()+
theme_bw()
# Step length density
ggplot(track) +
geom_density(aes(step, fill = id), alpha = 0.4)+
scale_colour_viridis_d()+
theme_bw()
map_z15 <- get_map(c(144.4380, -37.9000), zoom=15, maptype = "satellite")
map_z14 <- get_map(c(144.4380, -37.9000), zoom=14, maptype = "satellite")
# plot step length on map to see if it makes sense - testing with Marmalade
ggmap(map_z14)+
geom_path(data = filter(data, id == "Marmalade", aes(latitude, longitude)))
View(track)
# plot step length on map to see if it makes sense - testing with Marmalade
ggmap(map_z14)+
geom_path(data = filter(track, id == "Marmalade", aes(x_, y_)))
# plot step length on map to see if it makes sense - testing with Marmalade
ggmap(map_z14)+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_))
# plot step length on map to see if it makes sense - testing with Marmalade
ggplot()+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_))
# Make amt format tracks
track <- data %>%
na.omit() %>%
make_track(.x = utm_easting, .y = utm_northing, .t = time_local, id = id)
# add step length
track <- track %>%
mutate(step = step_lengths(test))
# plot step length on map to see if it makes sense - testing with Marmalade
ggplot()+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_, colour = step))
# plot step length on map to see if it makes sense - testing with Marmalade
ggplot()+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_),colour = step))
# plot step length on map to see if it makes sense - testing with Marmalade
ggplot()+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_),colour = step)+
scale_colour_viridis_d()+
theme_void()
# plot step length on map to see if it makes sense - testing with Marmalade
ggplot()+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_),colour = step)+
scale_colour_viridis_d()+
theme_void()
# add step length
track <- track %>%
mutate(step = step_lengths(test))
# add step length
track <- track %>%
mutate(step = step_lengths(track))
View(track)
# plot step length on map to see if it makes sense - testing with Marmalade
ggplot()+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_), colour = step)+
scale_colour_viridis_d()+
theme_void()
# plot step length on map to see if it makes sense - testing with Marmalade
ggplot()+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_, colour = step))+
scale_colour_viridis_d()+
theme_void()
# plot step length on map to see if it makes sense - testing with Marmalade
ggplot()+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_, colour = step))+
scale_colour_viridis_c()+
theme_void()
# plot step length on map to see if it makes sense - testing with Marmalade
ggplot()+
geom_path(data = filter(track, id == "Marmalade"), aes(x_, y_, colour = step))+
scale_colour_viridis_c()+
coord_sf()+
theme_void()
# Calculate daily distance moved
move <- track %>%
group_by(id, date) %>%
summarise(distance = sum(step))
date = as.Date(t_)
# add step length and date
track <- track %>%
mutate(step = step_lengths(track),
date = as.Date(t_))
View(track)
# Calculate daily distance moved
move <- track %>%
group_by(id, date) %>%
summarise(distance = sum(step))
View(move)
# Calculate daily distance moved
move <- track %>%
group_by(id, date) %>%
summarise(distance = sum(step)/1000)
View(move)
# Packages
pacman::p_load(atlastools, beepr, janitor, ggmap, move, sf, terra, tidyterra, tidyverse)
ggplot(move)+
geom_density(aes(distance, id) fill = id, alpha = 0.6)
ggplot(move)+
geom_density(aes(distance, id), fill = id, alpha = 0.6)
View(move)
ggplot(move)+
geom_density(aes(distance, id, fill = id), alpha = 0.6)
ggplot(move)+
geom_density(aes(distance, fill = id), alpha = 0.6)
# format for use with move package
move <- move(x = data$longitude,
y = data$latitude,
time = data$time_local,
prof = crs(4236),
data = data,
animal = data$id)
# format for use with move package
track <- data %>%
na.omit() %>%
move(x =longitude, y = latitude, time = time_local, animal = id)
# format for use with move package
track <- data %>%
na.omit() %>%
move(x =data$longitude, y = data$latitude, time = data$time_local, animal = data$id)
# format for use with move package
movestack <- data %>%
na.omit() %>%
move(x =data$longitude, y = data$latitude, time = data$time_local, animal = data$id)
# format for use with move package
data <- data %>%
na.omit()
movestack<- move(data = data, x = data$longitude, y = data$latitude, time = data$time_local, animal = data$id)
temp <- distance(movestack)
View(temp)
temp[["Athena"]]
data$distance <- unlist(lapply(distance(movestack), c, NA))
View(movestack)
movestack@data
names(movestack@data)
View(data)
movestack<- move(data = data, x = data$longitude, y = data$latitude, time = data$time_local, animal = data$id, proj = crs(EPSG:32755))
movestack<- move(data = data, x = data$longitude, y = data$latitude, time = data$time_local, animal = data$id, proj = crs("EPSG:32755"))
movestack<- move(data = data, x = data$utm_easting, y = data$utm_northing, time = data$time_local, animal = data$id, proj = crs("EPSG:32755"))
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC"),
date = as.Date(time_local))
# Packages
pacman::p_load(atlastools, beepr, janitor, ggmap, move, sf, suncalc, terra, tidyterra, tidyverse)
# Calculate if time is pre/post dawn/dusk
suntime <- getSunlightTimes(date = unique(data$date),
lat = -37.90,
lon = 144.43,
keep = c("sunrise", "sunset"),
tz = "Australia/Melbourne") %>%
subset(select = -c(lat, lon))
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC"),
date = as.Date(time_local))
# Calculate if time is pre/post dawn/dusk
suntime <- getSunlightTimes(date = unique(data$date),
lat = -37.90,
lon = 144.43,
keep = c("sunrise", "sunset"),
tz = "Australia/Melbourne") %>%
subset(select = -c(lat, lon))
# Append to data frame
data_sun <- left_join(data, suntime) %>%
mutate(tod = ifelse(DateTime>sunrise & DateTime<sunset, "day", "night")) %>%
relocate(DateTime, .after = tod) %>%
na.omit()
View(suntime)
# Append to data frame
data_sun <- left_join(data, suntime) %>%
mutate(tod = ifelse(time_local>sunrise & time_local<sunset, "day", "night")) %>%
relocate(time_local, .after = tod) %>%
na.omit()
View(data_sun)
# Plot to check
ggplot(data_sun)+
geom_point(aes(lon, lat, colour = tod))
# Plot to check
ggplot(data_sun)+
geom_point(aes(utm_easting, utm_northing, colour = tod))+
coord_sf()+
theme_void()
# Plot to check
ggplot(data_sun)+
geom_point(aes(utm_easting, utm_northing, colour = tod))+
coord_sf()+
theme_void()
# Packages
pacman::p_load(atlastools, beepr, janitor, ggmap, move, scattermore, sf, suncalc, terra, tidyterra, tidyverse)
# Plot to check - using scattermore to speed up display
ggplot(data_sun)+
geom_scattermore(aes(utm_easting, utm_northing, colour = tod), alpha = 0.6)+
coord_sf()+
theme_void()
View(data_sun)
# Add "bird date"
temp <- data_sun %>%
mutate(day = local_time - sunset)
str(data_sun)
# Add "bird date"
temp <- data_sun %>%
mutate(day = time_local - sunset)
View(temp)
# Add "bird date"
temp <- data_sun %>%
mutate(day = hms(time_local - sunset))
View(temp)
str(temp)
# Add "bird date"
temp <- data_sun %>%
mutate(day = (time_local - sunset))
str(temp)
# Add "bird date"
temp <- data_sun %>%
mutate(day = difftime(time_local, sunset, units="days"))
View(suntime)
View(temp)
# Add "bird date"
temp <- data_sun %>%
mutate(bird_day = ifelse(tod == "night", date, date+1))
View(temp)
# Add "bird date"
temp <- data_sun %>%
mutate(bird_day = ifelse(tod == "night", date, as.date(date+1)))
# Add "bird date"
temp <- data_sun %>%
mutate(bird_day = ifelse(tod == "night", date, as_date(date+1)))
View(temp)
# Add "bird date"
temp <- data_sun %>%
mutate(bird_day = ifelse(tod == "night", date, as_date(date-1)))
View(suntime)
View(data_sun)
# Add "bird date"
temp <- data_sun %>%
mutate(bird_day = ifelse(tod == "night", as_date(date), as_date(date-1)))
View(temp)
?as_date
# Add "bird date"
temp <- data_sun %>%
mutate(bird_day = ifelse(tod == "night", ymd(date), ymd(date-1)))
View(temp)
# Add "bird date"
temp <- data_sun %>%
mutate(bird_day = ifelse(tod == "night", date, date-1))
View(temp)
# Add "bird date"
temp <- data_sun %>%
mutate(bird_day = as_date(ifelse(tod == "night", date, date-1)))
View(temp)
View(temp)
View(data_sun)
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC"),
date = ymd(time_local))
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC"),
date = as_date(time_local))
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC")) %>%
mutate(date = ymd(time_local))
# Summary statistic: number of tracked days
length(unique(data$date))
# Summary statistic: total number of tracked days per bird
print(data %>%
group_by(id) %>%
summarise(length(unique(date))), n=35)
print(data %>%
group_by(id) %>%
summarise(days = length(unique(date))) %>%
summarise(birddays = sum(days)))
View(data)
mutate(date = as_date(time_local, tx = "Australia/Melbourne")
)
temp <- data %>%
mutate(date = as_date(time_local, tx = "Australia/Melbourne"))
temp <- data %>%
mutate(date = as_date(time_local, tz = "Australia/Melbourne"))
View(temp)
temp <- data %>%
mutate(date = as_date(time_local, tz = "Australia/Melbourne")) %>%
relocate(time_local, .after = tod)
temp <- data %>%
mutate(date = as_date(time_local, tz = "Australia/Melbourne")) %>%
relocate(date, .after = time_local)
View(temp)
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC")) %>%
mutate(date = as_date(time_local, tz = "Australia/Melbourne")) %>%
relocate(date, .after = time_local)
# Append to data frame
data_sun <- left_join(data, suntime) %>%
mutate(tod = ifelse(time_local>sunrise & time_local<sunset, "day", "night")) %>%
relocate(time_local, .after = tod) %>%
na.omit()
View(data_sun)
View(data_sun)
# Add "bird date"
temp <- data_sun %>%
mutate(suntime = difftime(time_local - hms(sunset)))
hms(sunset)
hms(data$sunset)
# Add "bird date"
temp <- data_sun %>%
mutate(suntime = difftime(time_local - format(sunset, format = "%H:%M:%S")))
format(data$sunset, format = "%H:%M:%S"))
format(data$sunset, format = "%H:%M:%S")
View(data_sun)
str(data_sun)
mutate(suntime = difftime(time_local - as_hms(sunset))
)
# Add "bird date"
temp <- data_sun %>%
mutate(suntime = difftime(time_local - as_hms(sunset)))
# Packages
pacman::p_load(atlastools, beepr, janitor, ggmap, hms, move, scattermore, sf, suncalc, terra, tidyterra, tidyverse)
# Add "bird date"
temp <- data_sun %>%
mutate(suntime = difftime(time_local - as_hms(sunset)))
mutate(suntime = difftime(time_local - as.POSIXct(sunset, format="%H:%M:%S"))
)
# Add "bird date"
temp <- data_sun %>%
mutate(suntime = difftime(time_local - as.POSIXct(sunset, format="%H:%M:%S")))
# Add "bird date"
temp <- data_sun %>%
mutate(suntime = difftime(time_local, as.POSIXct(sunset, format="%H:%M:%S")))
View(temp)
?difftime
# Add "bird date"
temp <- data_sun %>%
mutate(suntime = difftime(time_local, as.POSIXct(sunset, format="%H:%M:%S")),
units = "hours")
View(temp)
# Add "bird date"
temp <- data_sun %>%
mutate(suntime = difftime(time_local, as.POSIXct(sunset, format="%H:%M:%S"),
units = "hours"))
View(temp)
