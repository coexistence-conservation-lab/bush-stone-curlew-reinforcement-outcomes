ylab("Daily distance moved (m)")
# another way to visualise (group means)
ggplot(cohort_establishment,
aes(elapsed, daily_dist, color = cohort, group = interaction(cohort, id))) +
geom_line(alpha = 0.5) +
stat_summary(fun = mean, geom = "line", aes(group = cohort), linewidth = 1.2) +
theme_minimal() +
xlab("Days post-release") +
ylab("Daily distance moved (m)")
# Packages
pacman::p_load(amt, atlastools, beepr, ggmap, ggpubr, ggridges, janitor, lme4, lmerTest, move, scattermore, sf, suncalc, terra, tidyterra, tidyverse)
# test whether establishment differs between the groups
m1 <- lmer(dist_sqrt ~ cohort * elapsed + (1|id), data = cohort_establishment)
summary(m1)
anova(m1)
# plot movement
ggplot(cohort_establishment)+
geom_smooth(aes(elapsed, daily_dist, color = cohort))+
theme_minimal() +
xlab("Days post-release") +
ylab("Daily distance moved (m)")
# plot movement
ggplot(cohort_establishment)+
geom_smooth(aes(elapsed, daily_dist, color = cohort), method = "lm")+
theme_minimal() +
xlab("Days post-release") +
ylab("Daily distance moved (m)")
# Packages
pacman::p_load(amt, atlastools, beepr, ggmap, ggpubr, ggridges, janitor, lme4, lmerTest, move, scattermore, sf, suncalc, survival, terra, tidyterra, tidyverse)
View(metadata)
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity) %>%
mutate(start_date = as_date(dmy(start_date)),
end_date = as_date(dmy(end_date)))
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity,
mortality = mortality_or_capture) %>%
mutate(start_date = as_date(dmy(start_date)),
end_date = as_date(dmy(end_date)),
mortality = as_date(dmy(mortality)))
View(metadata)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
km <- metadata %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(mortality > 0, 1, 0))
View(km)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
km <- metadata %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year))
View(km)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
km <- metadata %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(mortality > 0, 1, 0))
View(km)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
km <- metadata %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
View(km)
# Fit a survival model
survival <- survfit(Surv(time, status) ~ 1, km)
View(survival)
# Estimated survival probabilities
summary(survival, times = c(1, 10, 30, 100))
# Estimated survival probabilities
summary(survival, times = c(1, 10, 30, 100, 365))
survival[["n.censor"]]
View(km)
print(survival)
# Fit a survival model
survival <- survfit(Surv(time, status) ~ 1, km)
survival
# Estimated survival probabilities
summary(survival, times = c(1, 10, 30, 100, 365))
# Fit a basic survival model
kmfit <- survfit(Surv(time, status) ~ 1, km)
# Estimated survival probabilities
summary(kmfit, times = c(1, 10, 30, 100, 365))
# basic plot
autoplot(kmfit)
# Kaplan Meyer Plot
ggsurvplot(kmfit, data = km, risk.table = FALSE,
gtheme = theme_bw(),
censor = FALSE,
xlab = "Days post-release",
ylab = "Survival",
xlim = c(0,360),
palette = "grey20",
conf.int = FALSE)
# Packages
pacman::p_load(amt, atlastools, beepr, ggmap, ggpubr, ggridges, janitor, lme4, lmerTest, move, scattermore, sf, suncalc, survival, survminer, terra, tidyterra, tidyverse)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
km <- with(surv_data, Surv(time, status))
km
# Fit a basic survival model
kmfit <- survfit(Surv(time, status) ~ 1, km)
# Fit a basic survival model
kmfit <- survfit(Surv(time, status) ~ 1, data = surv_data)
# Estimated survival probabilities
summary(kmfit, times = c(1, 10, 30, 100, 365))
# Kaplan Meyer Plot
ggsurvplot(kmfit, data = km, risk.table = FALSE,
gtheme = theme_bw(),
censor = FALSE,
xlab = "Days post-release",
ylab = "Survival",
xlim = c(0,360),
palette = "grey20",
conf.int = FALSE)
# Kaplan Meyer Plot
ggsurvplot(kmfit, data = surv_data, risk.table = FALSE,
gtheme = theme_bw(),
censor = FALSE,
xlab = "Days post-release",
ylab = "Survival",
xlim = c(0,360),
palette = "grey20",
conf.int = FALSE)
# plot
autoplot(kmfit)
# Packages
pacman::p_load(amt, atlastools, beepr, ggfortify, ggmap, ggpubr, ggridges, janitor, lme4, lmerTest, move, scattermore, sf, suncalc, survival, survminer, terra, tidyterra, tidyverse)
# plot
autoplot(kmfit)
View(metadata)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# limit to study period
mutate(end_date_study = ifelse(end_date < "2023-08-04", end_date, "2023-08-04"))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# limit to study period
mutate(end_date_study = ifelse(end_date < as_date("2023-08-04"), end_date, as_date("2023-08-04")))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# limit to study period
mutate(end_date_study = ifelse(end_date < as_date(ymd("2023-08-04")), end_date, as_date(ymd("2023-08-04"))))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# limit to study period
mutate(end_date_study = as_date(ifelse(end_date < as_date("2023-08-04"), end_date, as_date("2023-08-04"))))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# limit to study period
mutate(end_date_study = as_date(ifelse(end_date < as_date("2023-08-05"), end_date, as_date("2023-08-04"))))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# limit to study period
mutate(end_date_study = as_date(ifelse(end_date < as_date("2023-08-05"),
end_date, as_date("2023-08-04")))) %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date_study - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# limit to study period
mutate(end_date_study = as_date(ifelse(end_date < as_date("2023-08-05"),
end_date, as_date("2023-08-04"))),
mortality_study = ifelse(end_date < as_date("2023-08-05"), 1, 0)) %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date_study - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# limit to study period
mutate(end_date_study = as_date(ifelse(end_date < as_date("2023-08-05"),
end_date, as_date("2023-08-04"))),
status = ifelse(end_date < as_date("2023-08-05"), 1, 0)) %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year))
View(surv_data)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date_study - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
View(surv_data)
# Estimated survival probabilities
summary(kmfit, times = c(1, 10, 30, 100, 365))
# Fit a survival model by cohort
kmfit_cohort <- survfit(Surv(time, status) ~ cohort, data = surv_data)
# plot
autoplot(kmfit_cohort)
# Fit Cox Model
cox <- coxph(Surv(time, status) ~ cohort, data = surv_data)
summary(cox)
autoplot(cox)
autoplot(survfit(cox))
?glm
View(metadata)
# survival data
survival <- metadata %>%
# remove un-needed columns
select(id, cohort, start_date, mortality, end_date)
View(survival)
# survival data
survival <- metadata %>%
# remove un-needed columns
select(id, cohort, start_date, mortality, end_date) %>%
# calculate persistence
mutate(persistence = end_date - start_date)
View(survival)
# survival data
survival <- metadata %>%
# remove un-needed columns
select(id, cohort, start_date, mortality, end_date) %>%
# calculate persistence
mutate(persistence = end_date - start_date) %>%
# binary survival to 54 days
mutate(survived = ifelse(persistence < 54, FALSE, TRUE))
View(survival)
# survival data
survival <- metadata %>%
# remove un-needed columns
select(id, cohort, start_date, mortality, end_date) %>%
# calculate persistence
mutate(persistence = end_date - start_date) %>%
# binary survival to 54 days
mutate(survive_initial = ifelse(persistence < 54, FALSE, TRUE))
View(survival)
# Packages
pacman::p_load(amt, atlastools, beepr, ggfortify, ggmap, ggpubr, ggridges, janitor, lme4, lmerTest, move, scattermore, sf, suncalc, survival, survminer, terra, tidyterra, tidyverse)
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity,
mortality = mortality_or_capture) %>%
mutate(start_date = as_date(dmy(start_date)),
end_date = as_date(dmy(end_date)),
mortality = as_date(dmy(mortality)))
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
km <- with(surv_data, Surv(time, status))
# Fit a basic survival model
kmfit <- survfit(Surv(time, status) ~ 1, data = surv_data)
# Estimated survival probabilities
summary(kmfit, times = c(1, 10, 30, 100, 365))
# plot
autoplot(kmfit)
# Fit a survival model by cohort
kmfit_cohort <- survfit(Surv(time, status) ~ cohort, data = surv_data)
# plot
autoplot(kmfit_cohort)
summary(kmfit_cohort)
summary(kmfit_cohort, times = c(1,30,60))
summary(kmfit_cohort, times = c(1,30,54))
# Estimated survival probabilities
summary(kmfit, times = c(1, 10, 30, 54, 100, 365))
summary(cox)
# Fit Cox Model
cox <- coxph(Surv(time, status) ~ cohort, data = surv_data)
summary(cox)
View(surv_data)
# Metadata - translocation information
metadata  <- read.csv("data/metadata.csv") %>%
clean_names() %>%
rename(id = identity,
mortality = mortality_or_capture) %>%
mutate(start_date = as_date(dmy(start_date)),
end_date = as_date(dmy(end_date)),
mortality = as_date(dmy(mortality)))
View(metadata)
# Format data for Kaplan Meier Analysis - where death is TRUE i.e. 1
surv_data <- metadata %>%
# remove columns not needed
select(!c(location, abbbs, band, alive, release_year)) %>%
# add survival time (persistence) - right censored data
mutate(time = end_date - start_date) %>%
# add status - whether death occurs
mutate(status = ifelse(is.na(mortality), 0, 1))
View(surv_data)
km <- with(surv_data, Surv(time, status))
# Fit a basic survival model
kmfit <- survfit(Surv(time, status) ~ 1, data = surv_data)
# Estimated survival probabilities
summary(kmfit, times = c(1, 10, 30, 54, 100, 365))
# plot
autoplot(kmfit)
View(surv_data)
km
View(metadata)
View(surv_data)
# Fit a survival model by cohort
kmfit_cohort <- survfit(Surv(time, status) ~ cohort, data = surv_data)
summary(kmfit_cohort, times = c(1,30,54))
# plot
autoplot(kmfit_cohort)
# Fit Cox Model
cox <- coxph(Surv(time, status) ~ cohort, data = surv_data)
summary(cox)
autoplot(survfit(cox))
# Read in cleaned data
data <- read.csv("data/data_cleaned.csv") %>%
# Time in posix format
mutate(time_local = as.POSIXct(time_local, format = "%Y-%m-%d %H:%M:%OS",
tz = "Australia/Melbourne"),
time_utc = as.POSIXct(time_utc, format = "%Y-%m-%d %H:%M:%OS",
tz = "UTC")) %>%
# Add date
mutate(date = as_date(time_local, tz = "Australia/Melbourne"))
# Summary statistic: number of tracked days
length(unique(data$date))
# Summary statistic: total number of tracked days per bird
print(data %>%
group_by(id) %>%
summarise(length(unique(date))), n=35)
print(data %>%
group_by(id) %>%
summarise(days = length(unique(date))) %>%
summarise(birddays = sum(days)))
data <- data %>%
filter(!id %in% c("Wobbles", "Star"))
# Calculate if time is pre/post dawn/dusk
suntime <- getSunlightTimes(date = unique(data$date),
lat = -37.90,
lon = 144.43,
keep = c("sunrise", "sunset"),
tz = "Australia/Melbourne") %>%
subset(select = -c(lat, lon))
# Append to data frame
data_sun <- left_join(data, suntime) %>%
mutate(tod = ifelse(time_local>sunrise & time_local<sunset, "day", "night")) %>%
relocate(time_local, .after = tod) %>%
na.omit()
# Add "bird date"
data_sun <- data_sun %>%
# add column for how long past/to sunset
mutate(suntime = as.numeric(difftime(time_local, sunset, units = "hours"))) %>%
# negative sun-time values indicate it's the next day -
# therefore allocate previous day calendar date as "bird date"
mutate(date_bird = as_date(ifelse(suntime > 0, date, date - 1)))
# format as amt and calculate step lengths
steps <- data_night %>%
filter(id=="Fauna") %>%
# format as amt track - add columns as needed
make_track(.x = easting, .y = northing, .t = time_local, id = id, date_bird = date_bird) %>%
steps(keep_cols = "start")
# Save night data
data_night <- data_sun %>%
filter(tod == "night")
# format as amt and calculate step lengths
steps <- data_night %>%
filter(id=="Fauna") %>%
# format as amt track - add columns as needed
make_track(.x = easting, .y = northing, .t = time_local, id = id, date_bird = date_bird) %>%
steps(keep_cols = "start")
# summarise per bird date
summary <- steps %>%
group_by(date_bird) %>%
summarise(daily_dist = sum(sl_))
# plot histogram
hist(summary$daily_dist)
# plot over time
ggplot(summary, aes(date_bird, daily_dist))+
geom_point()+
geom_smooth(method = "lm")+
theme_void()
# for loop to calculate distance moved per bird date
birds <- unique(data$id)
distance_daily <- data.frame()
for(i in 1:length(birds)){
# Subset to bird, convert data to spatial and reproject in utm
points <- data_night %>%
# subset to bird
filter(id==birds[i]) %>%
vect(geom = c("longitude", "latitude"), crs = "EPSG:4326") %>%
# re-project into zone 55S
project("EPSG:32755") %>%
st_as_sf()
# save coords
coords <- st_coordinates(points$geometry)
# format as amt and calculate step lengths
steps <- points %>%
# get utm xy columns
mutate(easting = st_coordinates(points$geometry)[,1],
northing = st_coordinates(points$geometry)[,2]) %>%
# format as amt track
make_track(.x = easting, .y = northing, .t = time_local, id = id,
# add additional columns as needed
date_bird = date_bird) %>%
steps(keep_cols = "start")
# summarise per bird date
summary <- steps %>%
group_by(date_bird) %>%
summarise(daily_dist = sum(sl_)) %>%
mutate(id = birds[i])
# write out
distance_daily <- rbind(distance_daily, summary)
# alert me
print(paste("finished calculation for ", birds[i], sep = ""))
}
# plot histogram
hist(distance_daily$daily_dist)
# plot density by bird
ggplot(distance_daily)+
geom_density_ridges(aes(daily_dist, id, fill = id), alpha = 0.7)+
scale_fill_viridis_d()+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
theme(legend.position = "none")+
xlim(0,7000)+
scale_y_discrete(expand = expansion(add = c(0, 2)))+
xlab("Distance moved daily (m)") +
theme(axis.title.y=element_blank())
# filter to establishment period
distance_daily2 <- distance_daily %>%
# add metadata
left_join(select(metadata, c("id", "cohort", "start_date"))) %>%
# calculate time since release
mutate(elapsed = as.numeric(date_bird - start_date))
View(distance_daily2)
# filter to establishment period
distance_daily2 <- distance_daily %>%
# add metadata
left_join(select(metadata, c("id", "cohort", "start_date"))) %>%
# calculate time since release
mutate(elapsed = as.numeric(date_bird - start_date)) %>%
# filter to establishment period
filter(elapsed < 100)
# calculate cohort means
summary2 <- distance_daily2 %>%
group_by(cohort, elapsed) %>%
summarise(mean_daily_dist = mean(daily_dist))
# plot distance moved by cohort during establishment
ggplot(summary2)+
geom_path(aes(elapsed, mean_daily_dist, colour = cohort))+
theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
xlab("Days post-release") +
ylab("Mean daily distance moved (m)")
# limit cohort daily means to 55 days (minimum period for reinforcers)
cohort_establishment <- distance_daily2 %>%
filter(elapsed < 56)
# plot movement
ggplot(cohort_establishment)+
geom_smooth(aes(elapsed, daily_dist, color = cohort), method = "lm")+
theme_minimal() +
xlab("Days post-release") +
ylab("Daily distance moved (m)")
# another way to visualise (group means)
ggplot(cohort_establishment,
aes(elapsed, daily_dist, color = cohort, group = interaction(cohort, id))) +
geom_line(alpha = 0.5) +
stat_summary(fun = mean, geom = "line", aes(group = cohort), linewidth = 1.2) +
theme_minimal() +
xlab("Days post-release") +
ylab("Daily distance moved (m)")
# distribution of movement data
hist(cohort_establishment$daily_dist)
ggqqplot(cohort_establishment$daily_dist)
# correct left skew
cohort_establishment <- cohort_establishment %>%
mutate(dist_sqrt = sqrt(daily_dist))
hist(cohort_establishment$dist_sqrt)
ggqqplot(cohort_establishment$dist_sqrt)
# test whether establishment differs between the groups
m1 <- lmer(dist_sqrt ~ cohort * elapsed + (1|id), data = cohort_establishment)
summary(m1)
anova(m1)
